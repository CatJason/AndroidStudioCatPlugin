Any
toStringString
plusNamedDomainObjectList
withType%ComponentArtifactsResult
getArtifactsRepositoryHandler
mavenCentralRepositoryHandler
flatDirNamedDomainObjectSet
withType:ExtensiblePolymorphicDomainObjectContainer
registerBinding&ComponentMetadataContext
getDescriptor#DependencyHandler
registerTransform%ArtifactResolutionQuery
withArtifactsProject
fileTree#AuthenticationSupported
credentials&AuthenticationSupported
getCredentialsScript
fileTreeScript
applyProcessForkOptions
environment!ProcessForkOptions
setEnvironment)MetadataSupplierAware
setMetadataSupplier0MetadataSupplierAware
setComponentVersionsListerDisambiguationRuleChain
addFlowScope
alwaysCompatibilityRuleChain
add2PolymorphicDomainObjectContainer
containerWithType ComponentSelection
getDescriptorDomainObjectSet
withTypeContentFilterable
expandCopySpec
expandObjectConfigurationAction
typePluginManager
applyPluginCollection
withTypePluginContainer
applyPluginContainer
hasPluginPluginContainer
getAtPluginContainer
getPluginPluginContainer
findPlugin+TaskInputFilePropertyBuilder
withNormalizerTaskInputs
properties JavaForkOptions
systemPropertiesWriteProperties
setPropertiesWriteProperties
propertiesAbstractExecTask
environmentWorkQueue
submitSourceSetOutput
dirBinaryTasksCollection
createManifest
attributesProviderFactory
credentialsProviderFactory
of%BuildServiceRegistry
registerIfAbsentTypeBuilder
internalView!TypeBuilder
defaultImplementationAbstractCopyTask
filterAbstractCopyTask
expandProjectConnection
modelProjectConnection
getModelTest
systemPropertiesTest
environment&JavaToolchainResolverRegistry
registerCheckstyle
setConfigProperties'CheckstyleExtension
setConfigPropertiesEclipseWtpFacet
facetGroovyCompileOptions
forkAbstractOptions
defineCompileOptions
debugCompileOptions
forkJavaExec
environmentJavaExec
systemPropertiesBuildController
findModel1BuildController
getCanQueryProjectModelInParallelBuildController
getModelModelMap
namedModelMap
createModelMap
afterEachModelMap
withTypeModelMap
beforeEachTaskContainer
replace.ObjectFactory
polymorphicDomainObjectContainer#ObjectFactory
domainObjectContainer#ObjectFactory
namedDomainObjectList"ObjectFactory
namedDomainObjectSetObjectFactory
domainObjectSet%BinaryCollection
whenElementFinalizedBinaryCollection
getBinaryCollection
configureEach!BinaryCollection
whenElementKnown$PluginDependenciesSpec
visual-studio%PluginDependenciesSpec
lifecycle-base$PluginDependenciesSpec
language-base"PluginDependenciesSpec
application!PluginDependenciesSpec
checkstyle-PluginDependenciesSpec
google-test-test-suite"PluginDependenciesSpec
eclipse-wtp#PluginDependenciesSpec
java-library)PluginDependenciesSpec
objective-cpp-langPluginDependenciesSpec
pmd/PluginDependenciesSpec
jvm-toolchain-managementPluginDependenciesSpec
scala4PluginDependenciesSpec
microsoft-visual-cpp-compilerPluginDependenciesSpec
c$PluginDependenciesSpec
objective-cpp(PluginDependenciesSpec
swift-application-PluginDependenciesSpec
native-component-model%PluginDependenciesSpec
clang-compiler&PluginDependenciesSpec
version-catalogPluginDependenciesSpec
antlr"PluginDependenciesSpec
ivy-publish%PluginDependenciesSpec
jvm-toolchains&PluginDependenciesSpec
project-reportsPluginDependenciesSpec
java%PluginDependenciesSpec
jdk-toolchains!PluginDependenciesSpec
help-tasksPluginDependenciesSpec
idea(PluginDependenciesSpec
windows-resourcesPluginDependenciesSpec
c-lang'PluginDependenciesSpec
native-componentPluginDependenciesSpec
codenarc$PluginDependenciesSpec
jvm-ecosystem$PluginDependenciesSpec
cpp-unit-testPluginDependenciesSpec
eclipsePluginDependenciesSpec
cpp-lang PluginDependenciesSpec
assembler'PluginDependenciesSpec
objective-c-lang"PluginDependenciesSpec
cpp-libraryPluginDependenciesSpec
groovy0PluginDependenciesSpec
java-library-distributionPluginDependenciesSpec
war+PluginDependenciesSpec
standard-tool-chains.PluginDependenciesSpec
test-report-aggregation&PluginDependenciesSpec
cpp-applicationPluginDependenciesSpec
cppPluginDependenciesSpec
ear"PluginDependenciesSpec
google-test&PluginDependenciesSpec
test-suite-base$PluginDependenciesSpec
swift-library#PluginDependenciesSpec
gcc-compiler$PluginDependenciesSpec
maven-publishPluginDependenciesSpec
jacoco.PluginDependenciesSpec
windows-resource-script!PluginDependenciesSpec
build-init%PluginDependenciesSpec
jvm-test-suite%PluginDependenciesSpec
reporting-base)PluginDependenciesSpec
java-test-fixturesPluginDependenciesSpec
xcode"PluginDependenciesSpec
objective-c'PluginDependenciesSpec
cunit-test-suitePluginDependenciesSpec
base%PluginDependenciesSpec
assembler-langPluginDependenciesSpec
cunit&PluginDependenciesSpec
build-dashboard)PluginDependenciesSpec
java-gradle-pluginPluginDependenciesSpec
wrapper+PluginDependenciesSpec
component-model-basePluginDependenciesSpec
xctestPluginDependenciesSpec
signing+PluginDependenciesSpec
groovy-gradle-plugin%PluginDependenciesSpec
swiftpm-export"PluginDependenciesSpec
groovy-base!PluginDependenciesSpec
scala-base!PluginDependenciesSpec
publishing$PluginDependenciesSpec
java-platform PluginDependenciesSpec
java-base%PluginDependenciesSpec
component-base#PluginDependenciesSpec
distribution0PluginDependenciesSpec
jacoco-report-aggregation"PluginDependenciesSpec
binary-base%PluginDependenciesSpec
project-reportLintModelModule
writeModule BigInteger
toByteArrayOfLength24Builder
recordTestLibraryFile
toWriterPath
recursiveSize%String
performPlaceholderSubstitution"ManifestSystemProperty
toCamelCaseShort
isTruthyChar
deviceToHostInt
hostToDeviceInt
isTruthyAny
isTruthyChar
hostToDeviceShort
hostToDeviceByte
isTruthyInt
deviceToHostShort
deviceToHostInt
isValidIdInt
getPackageIdInt
getTypeIdInt
getEntryIdInt
isValidDynamicIdChar
isPossiblePlaceHolderEndChar
pseudoLocalizePomDependency
toXmlElementList
cartesianProduct'AndroidVersion
getReleaseNameAndDetails#AndroidVersion
getApiNameAndDetailsAndroidVersion
getFullApiName!AndroidVersion
getFullReleaseNameAutoCloseable
useFile
progressReaderCharSequence
name'CharSequence
filenameEndsWithIgnoreCase CharSequence
indexOfExtensionDot!CharSequence
nameWithoutExtensionCharSequence
endsWithIgnoreCaseChar
isSlash!CharSequence
startsWithIgnoreCaseCharSequence
lastIndexOfNameCharSequence
firstIndexOfNameCharSequence
extension%CharSequence
removeExtensionIfPresent#CharSequence
hasExtensionIgnoreCase)CharSequence
filenameStartsWithIgnoreCaseReader
streamUnescapedNinjaReader
streamNinjaBuildTokensReader
streamNinjaStatementsMutableList
pushMutableList
popList
joinToCamelCaseAsVarPair
mapEachList
joinToCamelCaseMatchResult
regexFieldOrNullMatchResult
regexFieldTokenizedCommandLine
stripFlagsString
toClassNameString
toCamelCaseAsVar String
parseXmlResourceReferenceString
toTypeNameString
readableNameClass
toJavaCodeString
capitalizeUSString
stripNonJavaString
decapitalizeUSString
toCamelCase	String
brCollection
toCommaSeparatedListString
ellipsize4KotlinCompilation
runtimeDependencyConfigurationNameDuration
toMillisAndNanosString
removeJsCompilerSuffixKotlinJsCompilerType
lowerNameBindingTargetBundle
fieldTypeViewBinder
generatedClassInfoViewBinder
toJavaFileElement
visitElementsBaseLayoutModel
parseRootNodeBaseLayoutModel
toViewBinder(XmlResourceReference
toResourceReference0BaseLayoutModel
validateExplicitViewBindingTypesMap
mapValuesNotNullIterable
associateNotNullIterable
associateByNotNullIterable
associateWithNotNull+KotlinMultiplatformExtension
androidLibraryZipEntry
isFileFunction1
parameterNamesForList
hasContext
apiTypeParametersForInt
isVarargs!Context
apiTypeUsageForReturnTypeInt
isStatic&ApiTypeUsage
isStarProjectionTypeUsageInt
isPublic Context
apiFunctionParametersForContext
apiTypeUsageForInt
isSyntheticInt
isAbstractSequence
groupedByTargetApiTypeUsage
toKotlinClassApiTypeUsage
isGroovyClosureApiTypeUsage
isGradleTypeOfApiTypeUsage
isMap!Boolean
toKotlinNullabilityStringApiTypeUsage
hasJavaClassList
rawTypesToStarProjectionsApiTypeUsage
isJavaClass"ApiTypeUsage
toTypeParameterString!ApiTypeUsage
toTypeArgumentString%ApiTypeUsage
isGroovyNamedArgumentMapApiFunction
newMappedParameters#ApiTypeUsage
toArrayOfKotlinClassesApiTypeUsage
isKotlinCollectionApiTypeUsage
isAny"List
groovyNamedArgumentsToVarargsApiTypeUsage
isSAM-Sequence
sortedWithTypeOfTakingFunctionsFirstApiTypeUsage
isKotlinArrayList
toTypeParametersStringVariance
toKotlinStringList
toTypeArgumentsString2ApiTypeUsage
singleTypeArgumentRawToStarProjectionApiTypeUsage
isString(ApiTypeUsage
toCollectionOfKotlinClassesList
javaClassToKotlinClassList
joinInAngleBracketsAutoCloseable
useToRun$Appendable
appendReproducibleNewLineFile
listFilesOrderedString
uppercaseFirstCharString
normaliseLineSeparatorsLogger
debugLogger
errorLogger
traceLogger
warnLogger
infoFile
normalisedPathRelativeToFile
walkReproduciblyGradle
serviceOfClassWriter
endKotlinClass(ClassVisitor
publicStaticSyntheticMethodKmPackage
addKmPropertyKmPackage
closeHeader)ClassWriter
visitKotlinMetadataAnnotationProject
serviceOfClassPath
filterSettings
serviceOfClassVisitor
methodMethodVisitor
TRY_CATCHMethodVisitor
POPMethodVisitor
ICONST_0MethodVisitor
kotlinDeprecationMethodVisitor
INVOKEVIRTUALMethodVisitor
RETURNKClass
internalNameMethodVisitor
GETSTATICMethodVisitor
visitMethodInsn_MethodVisitor
visitTypeInsnMethodVisitor
LDCMethodVisitor
NEWMethodVisitor
DUPMethodVisitor
ASTOREMethodVisitor
ARETURNClassVisitor
publicMethodMethodVisitor
INVOKEINTERFACEMethodVisitor
INVOKESPECIALClass
internalNameMethodVisitor
ACONST_NULLMethodVisitor
ALOADClassWriter
endClassMethodVisitor
BASTORE$ClassWriter
publicDefaultConstructorMethodVisitor
GOTOMethodVisitor
GETFIELDMethodVisitor
CHECKCASTMethodVisitor
PUTFIELDMethodVisitor
NEWARRAYMethodVisitor
INVOKESTATICMethodVisitor
loadByteArrayJarFile
loadPropertiesJarFile
loadPropertiesOrNullString
isClassFilePathFile
isClassPathArchiveServiceRegistry
get"ClassLoaderScope
traverseAncestorsClassLoaderScope
foldHierarchy"ClassLoaderScope
traverseHierarchyJavaVersion
toKotlinJvmTarget)CompilerConfiguration
addScriptDefinition#CompilerConfiguration
setModuleName#Disposable
kotlinCoreEnvironmentFor4CompilerConfiguration
addScriptingCompilerComponentsProject
fileCollectionOf.ClassPathModeExceptionCollector
ignoringErrorsMap
stringListMap
gradleOptionsMap
stringMapMap
gradleHomeMap
gradleUserHomeMap
gradleVersionMap
gradleJvmOptionsMap
pathMap
projectRootMap
gradleUriMap
gradleJavaHomeMap
gradleEnvironmentVariablesMap
isShortCircuitEnabledGradleConnector
useGradleFrom3KotlinBuildScriptModelRequest
toFetchParametersWith!ProjectConnection
modelBuilderForEditorPosition
toIdePositionFunction3
fatal"EditorReportSeverity
toIdeSeverityFunction3
warningFunction3
editorReportFunction3
errorIO
emitClassForIO
emitAccessorsForIO
makeAccessorOutputDirsIO
writeAccessorsBytecodeTo"ExtensionAware
getOrCreatePropertyIO
writeClassFileToInt
containsHasher
putAllSorted.Project
warnAboutDiscontinuedJsonProjectSchemaIO
writeAccessorsToIO
buildAccessorsForHasher
putAll+IO
writeVersionCatalogAccessorsSourceCodeTo"IO
buildVersionCatalogAccessorsFor9BufferedWriter
appendSourceCodeForVersionCatalogAccessors/ClassWriter
emitVersionCatalogAccessorMethodForMethodVisitor
loadConventionOfMethodVisitor
invokeRuntimeAccessible
internalNameSchemaType
kmTypeTypeOf
kmType(MethodVisitor
invokeDependencyHandlerAddMethodVisitor
invokeAction1ConfigurationEntry
getDeclarationDeprecationBlock7BytecodeFragmentScope
publicStaticMaybeDeprecatedMethod3ConfigurationEntry
getDeclarationDeprecationMessageMethodVisitor
GETPLUGINS?BufferedWriter
appendSourceCodeForPluginDependencySpecAccessors(IO
buildPluginDependencySpecAccessorsForClassWriter
packagePrivateField1IO
writePluginDependencySpecAccessorsSourceCodeTo5ClassWriter
emitPluginDependencySpecAccessorMethodForIterable
runEachList
singleBlockSectionOrNull%KotlinLexer
skipWhiteSpaceAndCommentsKotlinLexer
parseQualifiedName/ScriptSource
withLocationAwareExceptionHandlingList
singleSectionOfString
eraseProgramSource
fragment0TemporaryFileProvider
withTemporaryScriptFileForParserResult
mapFunction1
timesFunction1
plusFunction1
invokeFunction1
mapKotlinLexer
orMore%CharSequence
linePreservingBlankRangeCharSequence
splitIncluding%CharSequence
linePreservingSubstring_CharSequence
lineAndColumnFor#CharSequence
lineAndColumnFromRange$CharSequence
linePreservingSubstring&CharSequence
linePreservingBlankRangesIdeaKpmFragment
nameIdeaKpmModule
moduleClassifierIdeaKpmModule
nameIdeaKpmPlatform
isNativeIdeaKpmPlatform
isJsIdeaKpmPlatform
isUnknownIdeaKpmPlatform
isWasmIdeaKpmPlatform
isJvmKpmModule
findRefiningFragments$KpmModule
variantsContainingFragment-IdeaKpmResolvedBinaryDependency
isSourcesType3IdeaKpmResolvedBinaryDependency
isDocumentationType/IdeaKpmResolvedBinaryDependency
isClasspathTypeIdeaKpmContentRoot
isSourcesIdeaKpmContentRoot
isResources!KpmFragment
fragmentAttributeSetsKpmVariant
nativeTargetKpmVariant
platform/KpmFragment
nativeMetadataCompilationPluginData(KpmVariant
platformCompilationPluginData)KpmFragment
metadataCompilationPluginDataIdeaKpmModuleCoordinates
pathIdeaKpmFragmentCoordinates
path$IdeaKotlinBinaryDependency
klibExtra<IdeaKotlinResolvedBinaryDependency
isKotlinCompileBinaryType6IdeaKotlinProjectArtifactDependency
artifactsClasspath+IdeaKotlinBinaryDependency
sourcesClasspath1IdeaKotlinBinaryDependency
documentationClasspath/IdeaKotlinBinaryDependency
isNativeDistribution-IdeaKotlinBinaryDependency
isIdeaProjectLevel)IdeaKotlinBinaryDependency
isNativeStdlib'IdeaKotlinBinaryDependency
isCommonized	Key
setToExtras
plusKey
withValueIterable
toMutableExtrasMutableExtras
getOrPutIterable
toExtras&KonanDistribution
konanCommonLibrariesKonanDistribution
klibDirKonanDistribution
sourcesDirKonanDistribution
stdlib!KonanDistribution
platformLibsDir#CommonizerDependency
identityStringIterable
withClosureIterable
closureAny
withClosureAny
linearClosureAny
closureAny
withLinearClosure$KotlinToolingVersion
toKotlinVersion$KotlinVersion
toKotlinToolingVersionKotlinToolingVersion
compareToKotlinToolingVersion
isRC KotlinToolingVersion
buildNumber KotlinToolingVersion
isMilestoneKotlinToolingVersion
isAlphaKotlinToolingVersion
isDevKotlinToolingVersion
isStable!KotlinToolingVersion
isPreRelease%KotlinToolingVersion
classifierNumberKotlinToolingVersion
isSnapshotKotlinToolingVersion
isBetaIterable
withAllLeavesCommonizerTarget
withAllLeavesIterable
allLeaves%SharedCommonizerTarget
identityStringCommonizerTarget
identityStringCommonizerTarget
levelIterable
konanTargetsCommonizerTarget
allLeavesCommonizerTarget
konanTargetsKey
readPropertyKey
factoryPropertyKey
readWritePropertyKey
lazyPropertyKey
nullableLazyPropertyIdentityStringTokenizer
plusParser
zeroOrMoreParser
ignoreString
parseIntOrDefaultMap
toPathMapPathString
isRegularFilePathString
inputStreamPathString
isDirectoryMap
toPathTreeMapIDevice
isMdnsAutoConnectTlsIDevice
isSameAsDeviceWithIDevice
getLanguages$IDevice
isMdnsAutoConnectUnencryptedCollection
toPathStringsString
withSeparatorIntProgression
countUntilPath
toPathStringFile
toPathStringOrNullString
countUntilFile
toPathStringIO
writeFile*Builder
defaultImportsForPrecompiledScriptBigInteger
toIntOrNullSpec
invokeAction
invokeGradle
applyCallable
invokeSettings
applySettings
provideDelegateConfiguration
excludeScriptHandler
dependencyLockingPluginAware
applyToProperty
assignHasMultipleValues
assign!FileSystemLocationProperty
assignMapProperty
assignProperty
getValueConvention
findPluginConvention
getPluginByNameAny
withConventionConvention
getPluginArtifactHandler
invokeExtensionAware
theExtensionAware
configure(ExtraPropertiesExtension
provideDelegateExtensionAware
extraExtraPropertiesExtension
invokeAny
withGroovyBuilderClosure
invokeAny
closureOfAny
delegateClosureOfPluginDependencySpec
applyPluginDependencySpec
version DependencyHandler
embeddedKotlinPluginDependenciesSpec
kotlin<PluginDependenciesSpec
kotlin-dsl-precompiled-script-plugins!PluginDependenciesSpec
kotlin-dsl%PluginDependenciesSpec
embeddedKotlin&PluginDependenciesSpec
embedded-kotlin&PluginDependenciesSpec
kotlin-dsl-baseDependencyHandler
kotlinRepositoryHandler
mavenRepositoryHandler
ivyDependencies
moduleDependencyModifier
invokeDependencyAdder
invokeConfigurationContainer
invoke(PluginDependenciesSpec
gradle-enterpriseProject
dependenciesProject
repositoriesProject
pluginsProject
theProject
applyProject
buildscriptProject
artifactsProject
provideDelegateProject
configureProject
defaultTasksScriptHandler
repositoriesProject
gradleKotlinDsl NamedDomainObjectProvider
invokeExtensionContainer
getByNameExtensionContainer
getExtensionContainer
getValue"DependencyConstraintHandler
invoke!ConfigurableFileCollection
assign#ConfigurableFileCollection
setValue#ConfigurableFileCollection
getValueDependencyHandler
create'DependencyHandler
configureClientModuleDependencyHandler
addDependencyHandler
moduleModuleDependency
excludeTaskContainer
invokeBuilder
parseAarZipEntry"NamedDomainObjectContainer
getting&NamedDomainObjectContainer
registering,PolymorphicDomainObjectContainer
registering#NamedDomainObjectContainer
creating!NamedDomainObjectContainer
invoke)PolymorphicDomainObjectContainer
creatingAny
provideDelegate%ExistingDomainObjectDelegate
getValue#NamedDomainObjectCollection
getting$NamedDomainObjectCollection
existing+NamedDomainObjectCollection
provideDelegateNamedDomainObjectCollection
get"NamedDomainObjectProvider
getValue%NamedDomainObjectCollection
getByName%ResourceRepository
getConfiguredValueResourceRepository
getLocales)ResourceRepository
getConfiguredResources*NamedDomainObjectProvider
withDependencies(NamedDomainObjectProvider
setExtendsFrom/NamedDomainObjectProvider
dependencyConstraints)NamedDomainObjectProvider
allDependencies!NamedDomainObjectProvider
resolveNamedDomainObjectProvider
minus2NamedDomainObjectProvider
allDependencyConstraints#NamedDomainObjectProvider
isVisibleNamedDomainObjectProvider
plus+NamedDomainObjectProvider
buildDependencies#NamedDomainObjectProvider
artifacts-NamedDomainObjectProvider
defaultDependencies@NamedDomainObjectProvider
getTaskDependencyFromProjectDependency NamedDomainObjectProvider
filterNamedDomainObjectProvider
copy(NamedDomainObjectProvider
fileCollection$NamedDomainObjectProvider
asFileTree&NamedDomainObjectProvider
excludeRules,NamedDomainObjectProvider
resolutionStrategyFileCollection
plus"NamedDomainObjectProvider
contains&NamedDomainObjectProvider
isTransitive)NamedDomainObjectProvider
addToAntBuilder(NamedDomainObjectProvider
setDescriptionNamedDomainObjectProvider
all&NamedDomainObjectProvider
dependencies$NamedDomainObjectProvider
singleFile!NamedDomainObjectProvider
isEmpty"NamedDomainObjectProvider
outgoingFileCollection
minus/NamedDomainObjectProvider
resolvedConfigurationNamedDomainObjectProvider
state$NamedDomainObjectProvider
attributes%NamedDomainObjectProvider
descriptionNamedDomainObjectProvider
files#NamedDomainObjectProvider
hierarchy)NamedDomainObjectProvider
isCanBeResolved"NamedDomainObjectProvider
incoming&NamedDomainObjectProvider
allArtifacts NamedDomainObjectProvider
asPath'NamedDomainObjectProvider
copyRecursive)NamedDomainObjectProvider
isCanBeConsumed!NamedDomainObjectProvider
exclude'NamedDomainObjectProvider
setTransitiveComponent
stabilityDependency
isAndroidXString
toSafeHyphenKeyChar
normalizeString
isCommonDomainString
toSafeKeyThrowable
asResolveFailureKClass
classIdKType
classIdGScriptCompilationConfigurationKeys
skipExtensionsResolutionForImplicitsVScriptCompilationConfigurationKeys
skipExtensionsResolutionForImplicitsExceptInnermost8ConstantExpressionEvaluator
evaluateToConstantArrayValueConstantValue
toRuntimeValueKtCallExpression
isArrayCallKtAnnotationEntry
typeNameString
orAnonymousVirtualFile
loadAnnotationsSourceCode
getKtFile%ScriptDependencies
adjustByDefinitionSourceCode
getVirtualFileSourceCode
toKtFileSource;ScriptCompilationConfiguration
resolveImportsToVirtualFilesDocument
offsetToPositionPsiElement
location VirtualFile
getAnnotationEntries1ScriptCompilationConfiguration
adjustByDefinitionIterable
construct8ScriptCompilationConfigurationKeys
resolvedImportScripts!ScriptDependenciesResolver
unwrap"ResultWithDiagnostics
valueOrErrorVirtualFile
isKotlinFileTypePsiFile
isScriptVirtualFile
isNonScriptPsiFile
findScriptDefinition VirtualFile
findScriptDefinition-ScriptingHostConfigurationKeys
getEnvironmentAScriptCompilationConfigurationKeys
annotationsForSamWithReceivers+ScriptCompilationConfigurationKeys
platform List
partitionLoadJarDefinitions List
partitionLoadDirDefinitionsList
partitionLoadDefinitionsIterable
partitionMapNotNullSourceCode
scriptFileNameIrArrayReader
toArrayByteArray
bufferFile
javaFileFile
isPre_1_4_LibraryKotlinLibraryLayoutImpl
extract"KotlinLibraryLayoutImpl
extractDir4ReplScriptCompilationConfigurationKeys
currentLineIdKtDiagnostic
asScriptDiagnostic+CompilerMessageSeverity
toScriptingSeverityMessageCollector
reporter*BaseDiagnosticsCollector
scriptDiagnostics/CompilerConfiguration
processPluginsCommandLineClassLoader
loadServices!CompilerConfiguration
loadPluginsCScriptCompilationConfiguration
withUpdatesFromCompilerConfiguration-SharedScriptCompilationContext
applyConfigure/CompilerConfiguration
updateWithCompilerOptions5CompilerConfiguration
updateWithRefinedConfigurationsReplCodeLine
toSourceCodeSourceCode
addNoString
parseKotlinAbiVersionKotlinLibrary
containsErrorCodeBaseKotlinLibrary
uniqueNameKotlinLibrary
packageFqNameKotlinLibrary
builtInsPlatformKotlinLibrary
isInterop)KotlinLibrary
includedForwardDeclarations(BaseKotlinLibrary
unresolvedDependenciesBaseKotlinLibrary
shortNameBaseKotlinLibrary
nativeTargetsKotlinLibrary
commonizerTarget)BaseKotlinLibrary
commonizerNativeTargets'KotlinLibrary
exportForwardDeclarationsAndroidIrBuilder
readParcelWith AndroidIrBuilder
writeParcelWith#IrParcelerScope
hasCustomSerializer#IrParcelerScope
getCustomSerializer&IrAnnotationContainer
getParcelerScopeSearchPathResolver
resolve&Properties
writeKonanLibraryVersioning%Properties
readKonanLibraryVersioningFile
unpackZippedKonanLibraryToList
toUnresolvedLibraries$IrSimpleFunction
overridesFunctionInIrClass
creatorGetterIrBlockBuilder
forUntilIrClass
hasCreatorField*IrBuilderWithScope
parcelableWriteToParcelIrClass
isParcelizeIrTypeArgument
upperBound IrBuilderWithScope
parcelerWrite#AndroidIrBuilder
javaClassReferenceIrClass
parcelerSymbolByName"AndroidIrBuilder
kClassToJavaClassIrClass
isSubclassOfFqName#IrBuilderWithScope
parcelerNewArray4IrBuilderWithScope
parcelableCreatorCreateFromParcel!IrClass
getMethodWithoutArguments!IrBuilderWithScope
parcelerCreate"IrBuilderWithScope
kClassReference&KotlinType
matchesFqNameWithSupertypesKotlinType
matchesFqNameKotlinType
isParcelableInstructionAdapter
castIfNeededKtSourceFile
toSourceCode*FirSession
scriptDefinitionProviderService6ProjectExtensionDescriptor
registerExtensionIfRequired#PsiElement
getNonStrictParentOfType PsiElement
getStrictParentOfType(SimpleFunctionDescriptor
isWriteToParcelClassDescriptor
isParcelizeKotlinType
isParcelerWidget
resolveSimpleType
shouldBeCached$AndroidSyntheticProperty
isErrorTypeIrSimpleFunction
callWithRangesIrBuilderWithScope
irElvisAndroidContainerType
fqName,TranslationPluginContext
declareFunctionStubIrBuilderWithScope
irSafeLet-TranslationPluginContext
declareParameterStubFqName
childIrBuilderWithScope
irSafeCallIrClassifierSymbol
isFragment1TranslationPluginContext
declareTypeParameterStubCacheImplementation
hasCacheString
isUnixStaticLibString
isJavaScriptString
isWindowsStaticLibString
isBitcodeProperties
duplicateProperties
getSpaceSeparatedEnum
visibleName'Properties
downloadingAttemptIntervalMsProperties
dependenciesUrl2KonanPropertiesLoader
downloadingAttemptIntervalMs)KonanPropertiesLoader
downloadingAttempts%KonanPropertiesLoader
dependenciesUrlProperties
findCandidatesProperties
airplaneMode"KonanPropertiesLoader
airplaneModeProperties
downloadingAttemptsAppleConfigurables
platformNameKonanTarget
presetNameSanitizerKind
targetSuffixTargetTriple
isSimulatorTargetTriple
withoutVendorTargetTriple
withOSVersion!AnnotationDescriptor
getEnumValue)ZephyrConfigurables
constructClangCC1Args&ZephyrConfigurables
constructClangArgsList
forEachUntilLast"KonanTarget
hasFoundationFramework KonanTarget
supportsWinAPIUnwind#KonanTarget
supportsUnalignedAccessKonanTarget
supportedSanitizers KonanTarget
supports64BitAtomicsKonanTarget
supportsExceptionsKonanTarget
suportsMemMemKonanTarget
supportsObjcInterop KonanTarget
supportsLibBacktrace$KonanTarget
supports64BitMulOverflow-KonanTarget
hasAddressDependencyInMemoryModelKonanTarget
binaryFormatKonanTarget
supportsThreadsKonanTarget
supportsIosCrashLogKonanTarget
needSmallBinary KonanTarget
supportsCodeCoverageKonanTarget
pointerBits(KonanTarget
supportsGrandCentralDispatch%KonanTarget
supportsCoreSymbolication%KonanTarget
customArgsForKonanSourcesKonanTarget
hasUIKitFramework%KonanTarget
supportsMimallocAllocatorKonanTarget
supportsGccUnwindAttributes
toMapKonanLibrary
includedHeadersProperties
hostStringProperties
hostTargetStringProperties
hostTargetListProperties
targetListProperties
targetStringProperties
hostListString
parseKonanAbiVersion	Path
FileString
FileString
removeSuffixIfPresentLazy
getValueOrNullString
prefixIfNotString
prefixBaseNameIfNotString
suffixIfNotFile
zipFileSystemFile
recursiveCopyToFile
zipDirAsFile
unzipToFile
toPathFile
withZipFileSystemPath
unzipToFileSystem
fileProperties
hasPropertyString
resolveValue"Properties
keepOnlyDefaultProfilesProperties
propertyStringString
suffixFile
loadPropertiesProperties
propertyList#Properties
resolvablePropertyStringProperties
saveToFileFile
saveProperties!Properties
resolvablePropertyListFile
md5Digest$CompilerConfiguration
loadRegistrars(CompilerConfiguration
configureScripting<ReplScriptCompilationConfigurationKeys
makeSnippetIdentifier'ScriptCompilationConfigurationKeys
repl8ReplScriptCompilationConfigurationKeys
resultFieldPrefix*ReplAnalyzerResultKeys
analysisDiagnostics)ReplAnalyzerResultKeys
renderedResultType,ScriptCollectedDataKeys
collectedAnnotations(ScriptCollectedDataKeys
foundAnnotations/ScriptEvaluationContextDataKeys
commandLineArgsScriptHandlerScope
libs PluginDependenciesSpecScope
libsURL
toFileOrNullURL
toContainingJarOrNullIterable
mapNotNullSuccess!ResultWithDiagnostics
valueOrNullResultWithDiagnostics
onSuccessResultWithDiagnostics
onFailureAny
asSuccessIterable
mapSuccessImplString
asErrorDiagnosticsIterable
mapSuccessThrowable
asDiagnosticsResultWithDiagnostics
valueOrIterable
flatMapSuccess	List
plusScriptDiagnostic
isError"ResultWithDiagnostics
valueOrThrow7IdeScriptCompilationConfigurationKeys
acceptedLocations9IdeScriptCompilationConfigurationKeys
dependenciesSources&ScriptCompilationConfigurationKeys
ide3ScriptEvaluationConfigurationKeys
implicitReceivers"ScriptEvaluationConfiguration
with4ScriptEvaluationConfiguration
refineBeforeEvaluation8ScriptEvaluationConfigurationKeys
scriptExecutionWrapperBuilder
scriptExecutionWrapper4ScriptEvaluationConfigurationKeys
providedProperties%Builder
enableScriptsInstancesSharingCScriptEvaluationConfigurationKeys
refineConfigurationBeforeEvaluate2ScriptEvaluationConfigurationKeys
previousSnippets1ScriptEvaluationConfigurationKeys
constructorArgs<ScriptEvaluationConfigurationKeys
scriptsInstancesSharingMap)Builder
refineConfigurationBeforeEvaluate9ScriptEvaluationConfigurationKeys
scriptsInstancesSharing:ScriptEvaluationConfigurationKeys
compilationConfiguration3ScriptEvaluationConfigurationKeys
hostConfiguration/KJvmCompiledScript
getOrCreateActualClassloaderKJvmCompiledScript
toBytes.CompiledScript
makeClassLoaderFromDependencies$KJvmCompiledScript
copyWithoutModule4ScriptCompilationConfigurationKeys
defaultIdentifier0ScriptCompilationConfigurationKeys
fileExtension4ScriptCompilationConfigurationKeys
hostConfiguration1ScriptCompilationConfigurationKeys
defaultImports#ScriptCompilationConfiguration
with,ScriptCompilationConfigurationKeys
baseClassEScriptCompilationConfigurationKeys
refineConfigurationBeforeCompiling.ScriptCompilationConfigurationKeys
resultField2ScriptCompilationConfiguration
refineOnAnnotations4ScriptCompilationConfiguration
refineBeforeCompiling2ScriptCompilationConfigurationKeys
compilerOptions2ScriptCompilationConfiguration
refineBeforeParsing0ScriptCompilationConfigurationKeys
importScripts=ScriptCompilationConfigurationKeys
scriptFileLocationVariable%PropertiesCollection
simpleRefineImplCScriptCompilationConfigurationKeys
refineConfigurationBeforeParsing/ScriptCompilationConfigurationKeys
isStandaloneCScriptCompilationConfigurationKeys
refineConfigurationOnAnnotations.ScriptCompilationConfigurationKeys
displayName/ScriptCompilationConfigurationKeys
dependencies5ScriptCompilationConfigurationKeys
scriptFileLocation2ScriptCompilationConfigurationKeys
sourceFragments4ScriptCompilationConfigurationKeys
implicitReceivers2ScriptCompilationConfigurationKeys
filePathPatternBuilder
refineConfiguration5ScriptCompilationConfigurationKeys
providedPropertiesList
toFilesOrEmpty"List
mapScriptReportsToDiagnostics)ScriptCompilationConfiguration
refineWithScriptContents
toScriptSourceList
toClassPathOrEmpty-ScriptCompilationConfiguration
toDependenciesString
toValidJvmIdentifierTaskContainer
init+TaskContainer
prepareKotlinBuildScriptModelInt
toSourceCodePositionString
determineSepString
findNthPosition
calcAbsolute+ClassLoader
rawClassPathFromKeyResourcePathList
filterIfContainsAllFile
unpackJarCollection,ClassLoader
classPathFromGetUrlsMethodOrNullList
takeIfContainsAll,ClassLoader
classPathFromTypicalResourceUrlsFile
hasParentNamedList
takeIfContainsAnyFile
matchMaybeVersionedFileFile
isValidClasspathFileURL
toValidClasspathFileOrNull"ResultWithDiagnostics
isIncompleteResultWithDiagnostics
isErrorString
toUniversalSeparatorClassLoader
forAllMatchingFilesChar
escapeTaskContainer
wrapperError
renderErrorURL
readTextSkipUtf8Bom(String
cleanContentPreservingLinesLayoutFile
toScriptSourceString
toScriptSourceFile
readTextSkipUtf8BomExternalSourceCode
textSafe,ScriptingHostConfiguration
getScriptingClass8ScriptingHostConfigurationKeys
configurationDependencies+ScriptingHostConfiguration
withDefaultsFrom0ScriptingHostConfigurationKeys
getScriptingClassBuilder
getEvaluationContext3ScriptingHostConfigurationKeys
getEvaluationContextScriptingHostConfiguration
withPropertiesCollection
getOrErrorIterable
filterByAnnotationTypeKClass
findAnnotationBuilder
propertiesFromTemplateKotlinType
getTemplateClassKClass
kotlinScriptAnnotationLinkedSnippetImpl
addLinkedSnippet
toListLinkedSnippet
get2JvmScriptingHostConfigurationKeys
compilationCache!List
mapToLegacyExpectedLocationsList
mapLegacyExpectedLocations0ScriptEvaluationConfiguration
getOrPrepareSharedIterable
mapToLegacyReportsIterable
mapToDiagnostics5JvmScriptEvaluationConfigurationKeys
loadDependencies?JvmScriptEvaluationConfigurationKeys
scriptsInstancesSharingMap6JvmScriptEvaluationConfigurationKeys
actualClassLoader4JvmScriptEvaluationConfigurationKeys
baseClassLoader;JvmScriptEvaluationConfigurationKeys
lastSnippetClassLoader%ScriptEvaluationConfigurationKeys
jvm2JvmScriptEvaluationConfigurationKeys
mainArgumentsBuilder
updateClasspath/JvmScriptCompilationConfigurationKeys
jvmTarget8JvmScriptCompilationConfigurationBuilder
updateClasspathEJvmScriptCompilationConfigurationBuilder
dependenciesFromClassContext&ScriptCompilationConfigurationKeys
jvm.JvmScriptCompilationConfigurationKeys
javaHome3ScriptCompilationConfiguration
withUpdatedClasspath-JvmScriptCompilationConfigurationKeys
jdkHomeBuilder
updateClasspathImplGJvmScriptCompilationConfigurationBuilder
dependenciesFromCurrentContextDJvmScriptCompilationConfigurationBuilder
dependenciesFromClassloaderCollection
filterNewClasspath)JvmScriptingHostConfigurationKeys
jdkHome*JvmScriptingHostConfigurationKeys
javaHome"ScriptingHostConfigurationKeys
jvm1JvmScriptingHostConfigurationKeys
baseClassLoaderAny
isAByteString
plusString
toByteStringUtf8ByteString
getByteArray
toByteStringByteBuffer
toByteStringVersion
copy#ExtendableMessageOrBuilder
containsExtendableMessageOrBuilder
getExtendableBuilder
set3CodeGeneratorRequestOrBuilder
compilerVersionOrNullCodeGeneratorRequest
copy	File
copyCodeGeneratorResponse
copy%FileOrBuilder
generatedCodeInfoOrNullAny
copyApi
copy ApiOrBuilder
sourceContextOrNull#DependencyConstraintHandler
defaultArtifactHandler
defaultDependencyHandler
default	Enum
copy!EnumOrBuilder
sourceContextOrNullFNamedDomainObjectContainer
testReleaseIntransitiveDependenciesMetadata#DependencyConstraintHandler
testApiArtifactHandler
testApiDependencyHandler
testApi$DependencyConstraintHandler
archivesArtifactHandler
archivesDependencyHandler
archivesENamedDomainObjectContainer
testReleaseCompileOnlyDependenciesMetadataDependencyConstraintHandler
apiDependencyHandler
apiArtifactHandler
api!TypeOrBuilder
sourceContextOrNull	Type
copy)NamedDomainObjectContainer
implementationDependencyHandler
wearAppArtifactHandler
wearApp#DependencyConstraintHandler
wearAppDependencyHandler
debugApiArtifactHandler
debugApi$DependencyConstraintHandler
debugApiDependencyHandler
lintChecksArtifactHandler
lintChecks&DependencyConstraintHandler
lintChecksArtifactHandler
releaseApiDependencyHandler
releaseApi&DependencyConstraintHandler
releaseApi
Empty
copy
Field
copy
Mixin
copyValueOrBuilder
listValueOrNull
Value
copy ValueOrBuilder
structValueOrNullMethod
copyOptionOrBuilder
valueOrNullOption
copyStruct
copyTaskContainer
consumeConfigAttrTaskContainer
cleanTaskContainer
assembleUnitTestProject
base9NamedDomainObjectContainer
testReleaseAnnotationProcessor1NamedDomainObjectContainer
testReleaseCompileOnly8NamedDomainObjectContainer
androidTestReleaseRuntimeOnly>NamedDomainObjectContainer
testCompileOnlyDependenciesMetadata9NamedDomainObjectContainer
testFixturesReleaseRuntimeOnly*NamedDomainObjectContainer
testFixturesApi.NamedDomainObjectContainer
debugImplementation9NamedDomainObjectContainer
testFixturesReleaseCompileOnlyINamedDomainObjectContainer
testFixturesImplementationDependenciesMetadata4NamedDomainObjectContainer
testReleaseImplementationDuration
copyDaemonReportingTargets
report!MessageCollector
reportUnexpected!MessageCollector
reportFromDaemon+NamedDomainObjectContainer
testDebugWearApp+NamedDomainObjectContainer
debugCompileOnly"NamedDomainObjectContainer
release9NamedDomainObjectContainer
androidTestAnnotationProcessor*NamedDomainObjectContainer
testCompileOnly>NamedDomainObjectContainer
kotlinNativeCompilerPluginClasspath+NamedDomainObjectContainer
debugRuntimeOnly6NamedDomainObjectContainer
androidTestDebugCompileOnlyTaskContainer
buildANamedDomainObjectContainer
testImplementationDependenciesMetadataTaskContainer
buildNeeded?NamedDomainObjectContainer
debugCompileOnlyDependenciesMetadata&NamedDomainObjectContainer
testWearApp5NamedDomainObjectContainer
testFixturesReleaseWearApp)ApplicationAndroidComponentsExtension
extDependencyHandler
lintPublish'DependencyConstraintHandler
lintPublishArtifactHandler
lintPublishArtifactHandler
androidApis'DependencyConstraintHandler
androidApisDependencyHandler
androidApisDependencyHandler
runtimeOnly'DependencyConstraintHandler
runtimeOnlyArtifactHandler
runtimeOnlyDependencyHandler
testWearAppArtifactHandler
testWearApp'DependencyConstraintHandler
testWearAppDependencyHandler
compileOnlyArtifactHandler
compileOnly'DependencyConstraintHandler
compileOnly0NamedDomainObjectContainer
releaseImplementation$NamedDomainObjectContainer
testDebugENamedDomainObjectContainer
androidTestCompileOnlyDependenciesMetadataNNamedDomainObjectContainer
testFixturesReleaseIntransitiveDependenciesMetadata8NamedDomainObjectContainer
androidTestReleaseCompileOnly-NamedDomainObjectContainer
releaseCompileOnly#NamedDomainObjectContainer
archivesBoolValue
copy"NamedDomainObjectContainer
wearApp'NamedDomainObjectContainer
testFixtures0NamedDomainObjectContainer
coreLibraryDesugaringDependencyHandler
optionalNpmTaskContainer
preBuildLNamedDomainObjectContainer
testFixturesDebugIntransitiveDependenciesMetadata=NamedDomainObjectContainer
testReleaseApiDependenciesMetadataProject
sourceSets-NamedDomainObjectContainer
releaseRuntimeOnlyANamedDomainObjectContainer
releaseCompileOnlyDependenciesMetadataBNamedDomainObjectContainer
androidTestDebugApiDependenciesMetadataTaskContainer
checkProject
androidBasePluginExtension
extFNamedDomainObjectContainer
androidTestIntransitiveDependenciesMetadataONamedDomainObjectContainer
androidTestReleaseImplementationDependenciesMetadataProject
kotlin-NamedDomainObjectContainer
androidTestWearAppTaskContainer
resolveConfigAttr=NamedDomainObjectContainer
implementationDependenciesMetadata!DefaultArtifactPublicationSet
ext'NamedDomainObjectContainer
debugWearAppDependencyHandler
npmFNamedDomainObjectContainer
testFixturesCompileOnlyDependenciesMetadata2NamedDomainObjectContainer
kotlinCompilerClasspathTaskContainer
compileLintEnumValue
copyFieldMask
copy.NamedDomainObjectContainer
annotationProcessor0NamedDomainObjectContainer
androidTestReleaseApiBNamedDomainObjectContainer
debugImplementationDependenciesMetadataListValue
copyDNamedDomainObjectContainer
androidTestReleaseApiDependenciesMetadata*NamedDomainObjectContainer
testRuntimeOnlyLNamedDomainObjectContainer
androidTestReleaseCompileOnlyDependenciesMetadataTaskContainer
assembleENamedDomainObjectContainer
testFixturesReleaseApiDependenciesMetadataANamedDomainObjectContainer
testFixturesReleaseAnnotationProcessor"NamedDomainObjectContainer
default(KotlinAndroidProjectExtension
sourceSetsNNamedDomainObjectContainer
testFixturesDebugImplementationDependenciesMetadata:NamedDomainObjectContainer
testFixturesAnnotationProcessorPNamedDomainObjectContainer
testFixturesReleaseImplementationDependenciesMetadata1NamedDomainObjectContainer
testReleaseRuntimeOnly9NamedDomainObjectContainer
releaseApiDependenciesMetadata=NamedDomainObjectContainer
androidTestApiDependenciesMetadataTimestamp
copy$BaseAppModuleExtension
kotlinOptions!TaskContainer
assembleAndroidTest;NamedDomainObjectContainer
intransitiveDependenciesMetadata8NamedDomainObjectContainer
kotlinKlibCommonizerClasspathKNamedDomainObjectContainer
testFixturesDebugCompileOnlyDependenciesMetadata<NamedDomainObjectContainer
testFixturesReleaseImplementationHNamedDomainObjectContainer
androidTestImplementationDependenciesMetadataKNamedDomainObjectContainer
androidTestDebugIntransitiveDependenciesMetadata/NamedDomainObjectContainer
testFixturesDebugApi/NamedDomainObjectContainer
testDebugCompileOnlySourceSetContainer
extBaseAppModuleExtension
ext#NamedDomainObjectContainer
debugApiBytesValue
copyCNamedDomainObjectContainer
testDebugCompileOnlyDependenciesMetadata&NamedDomainObjectContainer
androidApisDNamedDomainObjectContainer
releaseImplementationDependenciesMetadata.NamedDomainObjectContainer
testFixturesRelease>NamedDomainObjectContainer
testFixturesApiDependenciesMetadata7NamedDomainObjectContainer
testFixturesDebugCompileOnly"NamedDomainObjectContainer
testApi,NamedDomainObjectContainer
testFixturesDebug2NamedDomainObjectContainer
testDebugImplementation4NamedDomainObjectContainer
androidTestImplementation/NamedDomainObjectContainer
testDebugRuntimeOnly2NamedDomainObjectContainer
androidTestDebugWearApp!KotlinAndroidProjectExtension
ext1NamedDomainObjectContainer
androidTestRuntimeOnly&NamedDomainObjectContainer
lintPublish6NamedDomainObjectContainer
androidTestDebugRuntimeOnlyJavaPluginExtension
extTaskContainer
buildDependentsDNamedDomainObjectContainer
testDebugIntransitiveDependenciesMetadata%NamedDomainObjectContainer
releaseApi5NamedDomainObjectContainer
testFixturesImplementation@NamedDomainObjectContainer
androidTestReleaseAnnotationProcessorDependencyHandler
devNpm2NamedDomainObjectContainer
testFixturesCompileOnly2NamedDomainObjectContainer
testAnnotationProcessor?NamedDomainObjectContainer
testFixturesDebugAnnotationProcessorProject
java%NamedDomainObjectContainer
lintChecks;NamedDomainObjectContainer
androidTestReleaseImplementation1NamedDomainObjectContainer
androidTestCompileOnlyHNamedDomainObjectContainer
testReleaseImplementationDependenciesMetadata&NamedDomainObjectContainer
compileOnly.NamedDomainObjectContainer
androidTestDebugApi-NamedDomainObjectContainer
testImplementation4NamedDomainObjectContainer
androidTestReleaseWearAppFNamedDomainObjectContainer
testDebugImplementationDependenciesMetadata?NamedDomainObjectContainer
testIntransitiveDependenciesMetadata2NamedDomainObjectContainer
apiDependenciesMetadata-NamedDomainObjectContainer
testReleaseWearAppProject
buildOutputsProject
androidComponents+NamedDomainObjectContainer
androidTestDebugGNamedDomainObjectContainer
testFixturesIntransitiveDependenciesMetadataProject
defaultArtifacts'NamedDomainObjectContainer
testDebugApi:NamedDomainObjectContainer
compileOnlyDependenciesMetadataBNamedDomainObjectContainer
releaseIntransitiveDependenciesMetadata8NamedDomainObjectContainer
kotlinCompilerPluginClasspath3NamedDomainObjectContainer
debugAnnotationProcessor5NamedDomainObjectContainer
releaseAnnotationProcessor TaskContainer
updateLintBaselineFloatValue
copy)NamedDomainObjectContainer
androidTestApiInt32Value
copyInt64Value
copyProject
javaToolchainsProject
reporting*NamedDomainObjectContainer
androidJdkImage*NamedDomainObjectContainer
androidTestUtilCNamedDomainObjectContainer
testFixturesDebugApiDependenciesMetadata-NamedDomainObjectContainer
androidTestReleaseTaskContainer
sourceSetsEnumOptions
copyDoubleValue
copyFileOptions
copyStringValue
copyMNamedDomainObjectContainer
testFixturesReleaseCompileOnlyDependenciesMetadataTaskContainer
lintFix2NamedDomainObjectContainer
testFixturesRuntimeOnlyMNamedDomainObjectContainer
androidTestReleaseIntransitiveDependenciesMetadataDependencyHandler
peerNpm)NamedDomainObjectContainer
releaseWearAppTaskContainer
connectedCheck7NamedDomainObjectContainer
kotlinBuildToolsApiClasspath@NamedDomainObjectContainer
debugIntransitiveDependenciesMetadataNamedDomainObjectContainer
api&NamedDomainObjectContainer
runtimeOnlyJavaToolchainService
extMNamedDomainObjectContainer
androidTestDebugImplementationDependenciesMetadataTaskContainer
lint(TaskContainer
buildKotlinToolingMetadata)NamedDomainObjectContainer
testReleaseApi7NamedDomainObjectContainer
testFixturesDebugRuntimeOnly;NamedDomainObjectContainer
testDebugApiDependenciesMetadata7NamedDomainObjectContainer
debugApiDependenciesMetadata7NamedDomainObjectContainer
testDebugAnnotationProcessorTaskContainer
uninstallAll1NamedDomainObjectContainer
testFixturesReleaseApi9NamedDomainObjectContainer
androidTestDebugImplementation>NamedDomainObjectContainer
androidTestDebugAnnotationProcessorTaskContainer
deviceCheckJNamedDomainObjectContainer
androidTestDebugCompileOnlyDependenciesMetadata"TaskContainer
extractProguardFilesReportingExtension
ext:NamedDomainObjectContainer
testFixturesDebugImplementation NamedDomainObjectContainer
debug&NamedDomainObjectContainer
testRelease3NamedDomainObjectContainer
testFixturesDebugWearAppUInt32Value
copyUInt64Value
copy6NamedDomainObjectContainer
testApiDependenciesMetadata.NamedDomainObjectContainer
testFixturesWearApp(DependencyConstraintHandler
debugWearAppDependencyHandler
debugWearAppArtifactHandler
debugWearAppArtifactHandler
testDebugApiDependencyHandler
testDebugApi(DependencyConstraintHandler
testDebugApiFieldOptions
copyArtifactHandler
implementation DependencyHandler
implementation*DependencyConstraintHandler
implementation DependencyHandler
releaseWearAppArtifactHandler
releaseWearApp*DependencyConstraintHandler
releaseWearAppArtifactHandler
androidTestApi*DependencyConstraintHandler
androidTestApi DependencyHandler
androidTestApi DependencyHandler
testReleaseApiArtifactHandler
testReleaseApi*DependencyConstraintHandler
testReleaseApiOneofOptions
copy+DependencyConstraintHandler
androidJdkImage!DependencyHandler
androidJdkImageArtifactHandler
androidJdkImage+DependencyConstraintHandler
androidTestUtil!DependencyHandler
androidTestUtilArtifactHandler
androidTestUtilArtifactHandler
testCompileOnly+DependencyConstraintHandler
testCompileOnly!DependencyHandler
testCompileOnlyArtifactHandler
testFixturesApi!DependencyHandler
testFixturesApi+DependencyConstraintHandler
testFixturesApiArtifactHandler
testRuntimeOnly+DependencyConstraintHandler
testRuntimeOnly!DependencyHandler
testRuntimeOnly ArtifactHandler
debugCompileOnly,DependencyConstraintHandler
debugCompileOnly"DependencyHandler
debugCompileOnly ArtifactHandler
testDebugWearApp,DependencyConstraintHandler
testDebugWearApp"DependencyHandler
testDebugWearApp"DependencyHandler
debugRuntimeOnly ArtifactHandler
debugRuntimeOnly,DependencyConstraintHandler
debugRuntimeOnly.DependencyConstraintHandler
releaseCompileOnly$DependencyHandler
releaseCompileOnly"ArtifactHandler
releaseCompileOnly.DependencyConstraintHandler
releaseRuntimeOnly"ArtifactHandler
releaseRuntimeOnly$DependencyHandler
releaseRuntimeOnly$DependencyHandler
androidTestWearApp"ArtifactHandler
androidTestWearApp.DependencyConstraintHandler
androidTestWearApp%DependencyHandler
androidTestDebugApi#ArtifactHandler
androidTestDebugApi/DependencyConstraintHandler
androidTestDebugApi.DependencyConstraintHandler
testImplementation"ArtifactHandler
testImplementation$DependencyHandler
testImplementation#ArtifactHandler
annotationProcessor/DependencyConstraintHandler
annotationProcessor%DependencyHandler
annotationProcessor.DependencyConstraintHandler
testReleaseWearApp"ArtifactHandler
testReleaseWearApp$DependencyHandler
testReleaseWearApp#ArtifactHandler
debugImplementation/DependencyConstraintHandler
debugImplementation%DependencyHandler
debugImplementation#ArtifactHandler
testFixturesWearApp/DependencyConstraintHandler
testFixturesWearApp%DependencyHandler
testFixturesWearApp0DependencyConstraintHandler
testDebugCompileOnly&DependencyHandler
testDebugCompileOnly$ArtifactHandler
testDebugCompileOnly&DependencyHandler
testFixturesDebugApi$ArtifactHandler
testFixturesDebugApi0DependencyConstraintHandler
testFixturesDebugApi'DependencyHandler
coreLibraryDesugaring1DependencyConstraintHandler
coreLibraryDesugaring%ArtifactHandler
coreLibraryDesugaring$ArtifactHandler
testDebugRuntimeOnly&DependencyHandler
testDebugRuntimeOnly0DependencyConstraintHandler
testDebugRuntimeOnly2DependencyConstraintHandler
androidTestCompileOnly&ArtifactHandler
androidTestCompileOnly(DependencyHandler
androidTestCompileOnly2DependencyConstraintHandler
androidTestRuntimeOnly(DependencyHandler
androidTestRuntimeOnly&ArtifactHandler
androidTestRuntimeOnly%ArtifactHandler
androidTestReleaseApi'DependencyHandler
androidTestReleaseApi1DependencyConstraintHandler
androidTestReleaseApi1DependencyConstraintHandler
releaseImplementation'DependencyHandler
releaseImplementation%ArtifactHandler
releaseImplementation&ArtifactHandler
testReleaseRuntimeOnly(DependencyHandler
testReleaseRuntimeOnly2DependencyConstraintHandler
testReleaseRuntimeOnly)DependencyHandler
kotlinCompilerClasspath'ArtifactHandler
kotlinCompilerClasspath3DependencyConstraintHandler
kotlinCompilerClasspath2DependencyConstraintHandler
testReleaseCompileOnly&ArtifactHandler
testReleaseCompileOnly(DependencyHandler
testReleaseCompileOnly'ArtifactHandler
androidTestDebugWearApp)DependencyHandler
androidTestDebugWearApp3DependencyConstraintHandler
androidTestDebugWearApp(DependencyHandler
testFixturesReleaseApi2DependencyConstraintHandler
testFixturesReleaseApi&ArtifactHandler
testFixturesReleaseApi3DependencyConstraintHandler
testAnnotationProcessor'ArtifactHandler
testAnnotationProcessor)DependencyHandler
testAnnotationProcessor)DependencyHandler
apiDependenciesMetadata3DependencyConstraintHandler
apiDependenciesMetadata'ArtifactHandler
apiDependenciesMetadata'ArtifactHandler
testFixturesCompileOnly)DependencyHandler
testFixturesCompileOnly3DependencyConstraintHandler
testFixturesCompileOnly4DependencyConstraintHandler
testFixturesDebugWearApp(ArtifactHandler
testFixturesDebugWearApp*DependencyHandler
testFixturesDebugWearApp*ArtifactHandler
releaseAnnotationProcessor6DependencyConstraintHandler
releaseAnnotationProcessor,DependencyHandler
releaseAnnotationProcessor)DependencyHandler
testDebugImplementation'ArtifactHandler
testDebugImplementation3DependencyConstraintHandler
testDebugImplementation,DependencyHandler
testFixturesReleaseWearApp*ArtifactHandler
testFixturesReleaseWearApp6DependencyConstraintHandler
testFixturesReleaseWearApp-DependencyHandler
androidTestDebugCompileOnly+ArtifactHandler
androidTestDebugCompileOnly7DependencyConstraintHandler
androidTestDebugCompileOnly7DependencyConstraintHandler
androidTestDebugRuntimeOnly+ArtifactHandler
androidTestDebugRuntimeOnly-DependencyHandler
androidTestDebugRuntimeOnly)ArtifactHandler
androidTestImplementation5DependencyConstraintHandler
androidTestImplementation+DependencyHandler
androidTestImplementation.DependencyHandler
testDebugAnnotationProcessor8DependencyConstraintHandler
testDebugAnnotationProcessor,ArtifactHandler
testDebugAnnotationProcessor(ArtifactHandler
debugAnnotationProcessor4DependencyConstraintHandler
debugAnnotationProcessor*DependencyHandler
debugAnnotationProcessor*ArtifactHandler
testFixturesImplementation,DependencyHandler
testFixturesImplementation6DependencyConstraintHandler
testFixturesImplementation3DependencyConstraintHandler
testFixturesRuntimeOnly)DependencyHandler
testFixturesRuntimeOnly'ArtifactHandler
testFixturesRuntimeOnly)ArtifactHandler
androidTestReleaseWearApp+DependencyHandler
androidTestReleaseWearApp5DependencyConstraintHandler
androidTestReleaseWearApp5DependencyConstraintHandler
testReleaseImplementation)ArtifactHandler
testReleaseImplementation+DependencyHandler
testReleaseImplementation,ArtifactHandler
debugApiDependenciesMetadata8DependencyConstraintHandler
debugApiDependenciesMetadata.DependencyHandler
debugApiDependenciesMetadata-DependencyHandler
testApiDependenciesMetadata7DependencyConstraintHandler
testApiDependenciesMetadata+ArtifactHandler
testApiDependenciesMetadata.DependencyHandler
testFixturesDebugCompileOnly,ArtifactHandler
testFixturesDebugCompileOnly8DependencyConstraintHandler
testFixturesDebugCompileOnly8DependencyConstraintHandler
kotlinBuildToolsApiClasspath,ArtifactHandler
kotlinBuildToolsApiClasspath.DependencyHandler
kotlinBuildToolsApiClasspath,ArtifactHandler
testFixturesDebugRuntimeOnly8DependencyConstraintHandler
testFixturesDebugRuntimeOnly.DependencyHandler
testFixturesDebugRuntimeOnly/DependencyHandler
androidTestReleaseRuntimeOnly9DependencyConstraintHandler
androidTestReleaseRuntimeOnly-ArtifactHandler
androidTestReleaseRuntimeOnly-ArtifactHandler
androidTestReleaseCompileOnly9DependencyConstraintHandler
androidTestReleaseCompileOnly/DependencyHandler
androidTestReleaseCompileOnly/DependencyHandler
kotlinKlibCommonizerClasspath9DependencyConstraintHandler
kotlinKlibCommonizerClasspath-ArtifactHandler
kotlinKlibCommonizerClasspath.ArtifactHandler
androidTestAnnotationProcessor0DependencyHandler
androidTestAnnotationProcessor:DependencyConstraintHandler
androidTestAnnotationProcessor-ArtifactHandler
kotlinCompilerPluginClasspath/DependencyHandler
kotlinCompilerPluginClasspath9DependencyConstraintHandler
kotlinCompilerPluginClasspath0DependencyHandler
testFixturesReleaseRuntimeOnly:DependencyConstraintHandler
testFixturesReleaseRuntimeOnly.ArtifactHandler
testFixturesReleaseRuntimeOnly0DependencyHandler
testReleaseAnnotationProcessor.ArtifactHandler
testReleaseAnnotationProcessor:DependencyConstraintHandler
testReleaseAnnotationProcessor.ArtifactHandler
releaseApiDependenciesMetadata:DependencyConstraintHandler
releaseApiDependenciesMetadata0DependencyHandler
releaseApiDependenciesMetadata2ArtifactHandler
androidTestApiDependenciesMetadata4DependencyHandler
androidTestApiDependenciesMetadata>DependencyConstraintHandler
androidTestApiDependenciesMetadata.ArtifactHandler
androidTestDebugImplementation:DependencyConstraintHandler
androidTestDebugImplementation0DependencyHandler
androidTestDebugImplementation:DependencyConstraintHandler
testFixturesReleaseCompileOnly.ArtifactHandler
testFixturesReleaseCompileOnly0DependencyHandler
testFixturesReleaseCompileOnly/ArtifactHandler
testFixturesDebugImplementation;DependencyConstraintHandler
testFixturesDebugImplementation1DependencyHandler
testFixturesDebugImplementation3DependencyHandler
testFixturesReleaseImplementation1ArtifactHandler
testFixturesReleaseImplementation=DependencyConstraintHandler
testFixturesReleaseImplementation0ArtifactHandler
androidTestReleaseImplementation2DependencyHandler
androidTestReleaseImplementation<DependencyConstraintHandler
androidTestReleaseImplementation;DependencyConstraintHandler
testFixturesAnnotationProcessor/ArtifactHandler
testFixturesAnnotationProcessor1DependencyHandler
testFixturesAnnotationProcessor;DependencyConstraintHandler
compileOnlyDependenciesMetadata/ArtifactHandler
compileOnlyDependenciesMetadata1DependencyHandler
compileOnlyDependenciesMetadata3ArtifactHandler
kotlinNativeCompilerPluginClasspath5DependencyHandler
kotlinNativeCompilerPluginClasspath?DependencyConstraintHandler
kotlinNativeCompilerPluginClasspath<DependencyConstraintHandler
intransitiveDependenciesMetadata0ArtifactHandler
intransitiveDependenciesMetadata2DependencyHandler
intransitiveDependenciesMetadata4DependencyHandler
testReleaseApiDependenciesMetadata>DependencyConstraintHandler
testReleaseApiDependenciesMetadata2ArtifactHandler
testReleaseApiDependenciesMetadata0ArtifactHandler
testDebugApiDependenciesMetadata<DependencyConstraintHandler
testDebugApiDependenciesMetadata2DependencyHandler
testDebugApiDependenciesMetadata2ArtifactHandler
implementationDependenciesMetadata4DependencyHandler
implementationDependenciesMetadata>DependencyConstraintHandler
implementationDependenciesMetadata6DependencyHandler
debugCompileOnlyDependenciesMetadata4ArtifactHandler
debugCompileOnlyDependenciesMetadata@DependencyConstraintHandler
debugCompileOnlyDependenciesMetadata5DependencyHandler
androidTestDebugAnnotationProcessor?DependencyConstraintHandler
androidTestDebugAnnotationProcessor3ArtifactHandler
androidTestDebugAnnotationProcessor@DependencyConstraintHandler
testIntransitiveDependenciesMetadata6DependencyHandler
testIntransitiveDependenciesMetadata4ArtifactHandler
testIntransitiveDependenciesMetadata3ArtifactHandler
testCompileOnlyDependenciesMetadata?DependencyConstraintHandler
testCompileOnlyDependenciesMetadata5DependencyHandler
testCompileOnlyDependenciesMetadata3ArtifactHandler
testFixturesApiDependenciesMetadata5DependencyHandler
testFixturesApiDependenciesMetadata?DependencyConstraintHandler
testFixturesApiDependenciesMetadata4ArtifactHandler
testFixturesDebugAnnotationProcessor6DependencyHandler
testFixturesDebugAnnotationProcessor@DependencyConstraintHandler
testFixturesDebugAnnotationProcessor7DependencyHandler
androidTestReleaseAnnotationProcessorADependencyConstraintHandler
androidTestReleaseAnnotationProcessor5ArtifactHandler
androidTestReleaseAnnotationProcessor7DependencyHandler
debugIntransitiveDependenciesMetadata5ArtifactHandler
debugIntransitiveDependenciesMetadataADependencyConstraintHandler
debugIntransitiveDependenciesMetadata8DependencyHandler
releaseCompileOnlyDependenciesMetadataBDependencyConstraintHandler
releaseCompileOnlyDependenciesMetadata6ArtifactHandler
releaseCompileOnlyDependenciesMetadata9DependencyHandler
debugImplementationDependenciesMetadataCDependencyConstraintHandler
debugImplementationDependenciesMetadata7ArtifactHandler
debugImplementationDependenciesMetadataBDependencyConstraintHandler
testFixturesReleaseAnnotationProcessor8DependencyHandler
testFixturesReleaseAnnotationProcessor6ArtifactHandler
testFixturesReleaseAnnotationProcessorBDependencyConstraintHandler
testImplementationDependenciesMetadata8DependencyHandler
testImplementationDependenciesMetadata6ArtifactHandler
testImplementationDependenciesMetadata9DependencyHandler
androidTestDebugApiDependenciesMetadataCDependencyConstraintHandler
androidTestDebugApiDependenciesMetadata7ArtifactHandler
androidTestDebugApiDependenciesMetadataCDependencyConstraintHandler
releaseIntransitiveDependenciesMetadata9DependencyHandler
releaseIntransitiveDependenciesMetadata7ArtifactHandler
releaseIntransitiveDependenciesMetadata8ArtifactHandler
testFixturesDebugApiDependenciesMetadata:DependencyHandler
testFixturesDebugApiDependenciesMetadataDDependencyConstraintHandler
testFixturesDebugApiDependenciesMetadataDDependencyConstraintHandler
testDebugCompileOnlyDependenciesMetadata:DependencyHandler
testDebugCompileOnlyDependenciesMetadata8ArtifactHandler
testDebugCompileOnlyDependenciesMetadata;DependencyHandler
releaseImplementationDependenciesMetadataEDependencyConstraintHandler
releaseImplementationDependenciesMetadata9ArtifactHandler
releaseImplementationDependenciesMetadata;ArtifactHandler
testReleaseIntransitiveDependenciesMetadata=DependencyHandler
testReleaseIntransitiveDependenciesMetadataGDependencyConstraintHandler
testReleaseIntransitiveDependenciesMetadata9ArtifactHandler
androidTestReleaseApiDependenciesMetadataEDependencyConstraintHandler
androidTestReleaseApiDependenciesMetadata;DependencyHandler
androidTestReleaseApiDependenciesMetadata?DependencyHandler
androidTestImplementationDependenciesMetadataIDependencyConstraintHandler
androidTestImplementationDependenciesMetadata=ArtifactHandler
androidTestImplementationDependenciesMetadataGDependencyConstraintHandler
testDebugImplementationDependenciesMetadata=DependencyHandler
testDebugImplementationDependenciesMetadata;ArtifactHandler
testDebugImplementationDependenciesMetadataFDependencyConstraintHandler
testReleaseCompileOnlyDependenciesMetadata<DependencyHandler
testReleaseCompileOnlyDependenciesMetadata:ArtifactHandler
testReleaseCompileOnlyDependenciesMetadata9ArtifactHandler
testDebugIntransitiveDependenciesMetadata;DependencyHandler
testDebugIntransitiveDependenciesMetadataEDependencyConstraintHandler
testDebugIntransitiveDependenciesMetadata:ArtifactHandler
testFixturesReleaseApiDependenciesMetadata<DependencyHandler
testFixturesReleaseApiDependenciesMetadataFDependencyConstraintHandler
testFixturesReleaseApiDependenciesMetadata>DependencyHandler
testFixturesIntransitiveDependenciesMetadata<ArtifactHandler
testFixturesIntransitiveDependenciesMetadataHDependencyConstraintHandler
testFixturesIntransitiveDependenciesMetadataGDependencyConstraintHandler
androidTestIntransitiveDependenciesMetadata;ArtifactHandler
androidTestIntransitiveDependenciesMetadata=DependencyHandler
androidTestIntransitiveDependenciesMetadata=DependencyHandler
testFixturesCompileOnlyDependenciesMetadataGDependencyConstraintHandler
testFixturesCompileOnlyDependenciesMetadata;ArtifactHandler
testFixturesCompileOnlyDependenciesMetadataMDependencyConstraintHandler
androidTestReleaseCompileOnlyDependenciesMetadataCDependencyHandler
androidTestReleaseCompileOnlyDependenciesMetadataAArtifactHandler
androidTestReleaseCompileOnlyDependenciesMetadata:ArtifactHandler
androidTestCompileOnlyDependenciesMetadataFDependencyConstraintHandler
androidTestCompileOnlyDependenciesMetadata<DependencyHandler
androidTestCompileOnlyDependenciesMetadata@ArtifactHandler
androidTestDebugIntransitiveDependenciesMetadataBDependencyHandler
androidTestDebugIntransitiveDependenciesMetadataLDependencyConstraintHandler
androidTestDebugIntransitiveDependenciesMetadataKDependencyConstraintHandler
androidTestDebugCompileOnlyDependenciesMetadata?ArtifactHandler
androidTestDebugCompileOnlyDependenciesMetadataADependencyHandler
androidTestDebugCompileOnlyDependenciesMetadataBDependencyHandler
testFixturesDebugCompileOnlyDependenciesMetadata@ArtifactHandler
testFixturesDebugCompileOnlyDependenciesMetadataLDependencyConstraintHandler
testFixturesDebugCompileOnlyDependenciesMetadata?DependencyHandler
testReleaseImplementationDependenciesMetadata=ArtifactHandler
testReleaseImplementationDependenciesMetadataIDependencyConstraintHandler
testReleaseImplementationDependenciesMetadata@DependencyHandler
testFixturesImplementationDependenciesMetadata>ArtifactHandler
testFixturesImplementationDependenciesMetadataJDependencyConstraintHandler
testFixturesImplementationDependenciesMetadataMDependencyConstraintHandler
testFixturesDebugIntransitiveDependenciesMetadataCDependencyHandler
testFixturesDebugIntransitiveDependenciesMetadataAArtifactHandler
testFixturesDebugIntransitiveDependenciesMetadataBArtifactHandler
androidTestDebugImplementationDependenciesMetadataDDependencyHandler
androidTestDebugImplementationDependenciesMetadataNDependencyConstraintHandler
androidTestDebugImplementationDependenciesMetadataDDependencyHandler
androidTestReleaseIntransitiveDependenciesMetadataBArtifactHandler
androidTestReleaseIntransitiveDependenciesMetadataNDependencyConstraintHandler
androidTestReleaseIntransitiveDependenciesMetadataMethodOptions
copyEDependencyHandler
testFixturesReleaseIntransitiveDependenciesMetadataODependencyConstraintHandler
testFixturesReleaseIntransitiveDependenciesMetadataCArtifactHandler
testFixturesReleaseIntransitiveDependenciesMetadataNDependencyConstraintHandler
testFixturesReleaseCompileOnlyDependenciesMetadataBArtifactHandler
testFixturesReleaseCompileOnlyDependenciesMetadataDDependencyHandler
testFixturesReleaseCompileOnlyDependenciesMetadataODependencyConstraintHandler
testFixturesDebugImplementationDependenciesMetadataEDependencyHandler
testFixturesDebugImplementationDependenciesMetadataCArtifactHandler
testFixturesDebugImplementationDependenciesMetadataSourceContext
copyPDependencyConstraintHandler
androidTestReleaseImplementationDependenciesMetadataDArtifactHandler
androidTestReleaseImplementationDependenciesMetadataFDependencyHandler
androidTestReleaseImplementationDependenciesMetadataQDependencyConstraintHandler
testFixturesReleaseImplementationDependenciesMetadataGDependencyHandler
testFixturesReleaseImplementationDependenciesMetadataEArtifactHandler
testFixturesReleaseImplementationDependenciesMetadataServiceOptions
copyMessageOptions
copySourceCodeInfo
copyLocation
copyExtensionRange
copyReservedRange
copyDescriptorProto
copy%ExtensionRangeOrBuilder
optionsOrNull&DescriptorProtoOrBuilder
optionsOrNullEnumValueOptions
copyFileDescriptorSet
copyAnnotation
copyGeneratedCodeInfo
copyEnumReservedRange
copy*EnumDescriptorProtoOrBuilder
optionsOrNullEnumDescriptorProto
copy1FileDescriptorProtoOrBuilder
sourceCodeInfoOrNull*FileDescriptorProtoOrBuilder
optionsOrNullFileDescriptorProto
copyNamePart
copyUninterpretedOption
copyFieldDescriptorProto
copy+FieldDescriptorProtoOrBuilder
optionsOrNullOneofDescriptorProto
copy+OneofDescriptorProtoOrBuilder
optionsOrNullExtensionRangeOptions
copy,MethodDescriptorProtoOrBuilder
optionsOrNullMethodDescriptorProto
copyServiceDescriptorProto
copy-ServiceDescriptorProtoOrBuilder
optionsOrNull/EnumValueDescriptorProtoOrBuilder
optionsOrNullEnumValueDescriptorProto
copy2IdeaKotlinSerializationContext
IdeaKpmProjectProto1IdeaKotlinSerializationContext
IdeaKpmModuleProto,IdeaKotlinSerializationContext
IdeaKpmModuleIdeaKpmModule
toByteArray$IdeaKpmBinaryCoordinates
toByteArrayIdeaKpmFragment
toByteArray3IdeaKotlinSerializationContext
IdeaKpmFragmentProto.IdeaKotlinSerializationContext
IdeaKpmFragmentIdeaKpmContentRoot
toByteArray1IdeaKotlinSerializationContext
IdeaKpmContentRoot6IdeaKotlinSerializationContext
IdeaKpmContentRootProto#IdeaKpmLanguageSettings
toByteArray$IdeaKpmModuleCoordinates
toByteArray$IdeaKpmCompilationOutput
toByteArray0IdeaKotlinSerializationContext
IdeaKpmDependency5IdeaKotlinSerializationContext
IdeaKpmDependencyProto2IdeaKotlinSerializationContext
IdeaKpmVariantProto-IdeaKotlinSerializationContext
IdeaKpmVariantIdeaKpmVariant
toByteArray&IdeaKpmFragmentCoordinates
toByteArray8IdeaKotlinSerializationContext
IdeaKpmFragmentDependency=IdeaKotlinSerializationContext
IdeaKpmFragmentDependencyProto%IdeaKpmFragmentDependency
toByteArrayIdeaKpmProject
toByteArrayIdeaKpmProject
writeTo4IdeaKotlinSerializationContext
IdeaKpmContainerProtoEIdeaKotlinSerializationContext
IdeaKpmUnresolvedBinaryDependencyProto@IdeaKotlinSerializationContext
IdeaKpmUnresolvedBinaryDependency-IdeaKpmUnresolvedBinaryDependency
toByteArrayCIdeaKotlinSerializationContext
IdeaKpmResolvedBinaryDependencyProto+IdeaKpmResolvedBinaryDependency
toByteArray>IdeaKotlinSerializationContext
IdeaKpmResolvedBinaryDependency0IdeaKotlinSerializationContext
IdeaKpmJsPlatform5IdeaKotlinSerializationContext
IdeaKpmJsPlatformProto.IdeaKotlinSerializationContext
IdeaKpmPlatformIdeaKpmJvmPlatform
toByteArray3IdeaKotlinSerializationContext
IdeaKpmPlatformProto:IdeaKotlinSerializationContext
IdeaKpmUnknownPlatformProto6IdeaKotlinSerializationContext
IdeaKpmJvmPlatformProtoIdeaKpmWasmPlatform
toByteArray!IdeaKpmNativePlatform
toByteArrayIdeaKpmJsPlatform
toByteArray5IdeaKotlinSerializationContext
IdeaKpmUnknownPlatform"IdeaKpmUnknownPlatform
toByteArray1IdeaKotlinSerializationContext
IdeaKpmJvmPlatform2IdeaKotlinSerializationContext
IdeaKpmWasmPlatform9IdeaKotlinSerializationContext
IdeaKpmNativePlatformProto4IdeaKotlinSerializationContext
IdeaKpmNativePlatform7IdeaKotlinSerializationContext
IdeaKpmWasmPlatformProto.IdeaKotlinClasspathProto
toIdeaKotlinClasspathIdeaKotlinClasspath
toProtoIdeaKotlinClasspath
toByteArray IdeaKotlinDependency
toByteArray3IdeaKotlinSerializationContext
IdeaKotlinDependency8IdeaKotlinSerializationContext
IdeaKotlinDependencyProto>IdeaKotlinSerializationContext
IdeaKotlinSourceDependencyProto9IdeaKotlinSerializationContext
IdeaKotlinSourceDependency=IdeaKotlinSerializationContext
IdeaKotlinSourceDependencyTypeType
toProtoFIdeaKotlinSerializationContext
IdeaKotlinResolvedBinaryDependencyProtoAIdeaKotlinSerializationContext
IdeaKotlinResolvedBinaryDependencyGIdeaKotlinSerializationContext
IdeaKotlinProjectArtifactDependencyProtoBIdeaKotlinSerializationContext
IdeaKotlinProjectArtifactDependencyCIdeaKotlinSerializationContext
IdeaKotlinUnresolvedBinaryDependencyHIdeaKotlinSerializationContext
IdeaKotlinUnresolvedBinaryDependencyProtoIdeaKpmVariantProto
copy+IdeaKpmVariantProtoOrBuilder
platformOrNull+IdeaKpmVariantProtoOrBuilder
fragmentOrNull4IdeaKpmVariantProtoOrBuilder
compilationOutputOrNullIdeaKpmModuleProto
copy-IdeaKpmModuleProtoOrBuilder
coordinatesOrNull(IdeaKpmModuleProtoOrBuilder
extrasOrNull)IdeaKpmProjectProtoOrBuilder
extrasOrNullIdeaKpmProjectProto
copy*IdeaKpmFragmentProtoOrBuilder
extrasOrNullIdeaKpmFragmentProto
copy4IdeaKpmFragmentProtoOrBuilder
languageSettingsOrNull/IdeaKpmFragmentProtoOrBuilder
coordinatesOrNullIdeaKpmContainerProto
copy,IdeaKpmContainerProtoOrBuilder
projectOrNullIdeaKpmJsPlatformProto
copy,IdeaKpmJsPlatformProtoOrBuilder
extrasOrNullIdeaKpmPlatformProto
copy&IdeaKpmPlatformProtoOrBuilder
jsOrNull(IdeaKpmPlatformProtoOrBuilder
wasmOrNull+IdeaKpmPlatformProtoOrBuilder
unknownOrNull*IdeaKpmPlatformProtoOrBuilder
nativeOrNull'IdeaKpmPlatformProtoOrBuilder
jvmOrNull@IdeaKpmDependencyProtoOrBuilder
unresolvedBinaryDependencyOrNull8IdeaKpmDependencyProtoOrBuilder
fragmentDependencyOrNull>IdeaKpmDependencyProtoOrBuilder
resolvedBinaryDependencyOrNullIdeaKpmDependencyProto
copyIdeaKpmSchemaInfoProto
copyIdeaKpmContentRootProto
copy-IdeaKpmContentRootProtoOrBuilder
extrasOrNullIdeaKpmJvmPlatformProto
copy-IdeaKpmJvmPlatformProtoOrBuilder
extrasOrNull.IdeaKpmWasmPlatformProtoOrBuilder
extrasOrNullIdeaKpmWasmPlatformProto
copyFlowCollector
combineInternalFlow
asChannelFlow.FlowCollector
withUndispatchedContextCollectorCoroutineScope
flowProduceIdeaKpmNativePlatformProto
copy0IdeaKpmNativePlatformProtoOrBuilder
extrasOrNull IdeaKpmUnknownPlatformProto
copy1IdeaKpmUnknownPlatformProtoOrBuilder
extrasOrNull"IdeaKpmBinaryCoordinatesProto
copy"IdeaKpmCompilationOutputProto
copy!IdeaKpmLanguageSettingsProto
copy"IdeaKpmModuleCoordinatesProto
copy#IdeaKpmFragmentDependencyProto
copy9IdeaKpmFragmentDependencyProtoOrBuilder
coordinatesOrNull4IdeaKpmFragmentDependencyProtoOrBuilder
extrasOrNull$IdeaKpmFragmentCoordinatesProto
copy5IdeaKpmFragmentCoordinatesProtoOrBuilder
moduleOrNullJob
transitiveCoroutineParentSafeCollector
checkContext!AbortFlowException
checkOwnership?IdeaKpmResolvedBinaryDependencyProtoOrBuilder
coordinatesOrNull:IdeaKpmResolvedBinaryDependencyProtoOrBuilder
extrasOrNull)IdeaKpmResolvedBinaryDependencyProto
copy<IdeaKpmUnresolvedBinaryDependencyProtoOrBuilder
extrasOrNullAIdeaKpmUnresolvedBinaryDependencyProtoOrBuilder
coordinatesOrNull+IdeaKpmUnresolvedBinaryDependencyProto
copyStateFlow
fuseStateFlowMutableStateFlow
incrementCompanion
WhileSubscribedArray
getBufferAtArray
setBufferAtSharedFlow
fuseSharedFlowStateFlow
distinctUntilChangedFlowCollector
cancelSharedFlow
catchSharedFlow
countSharedFlow
flowOnFlowCollector
isActiveSharedFlow
toListSharedFlow
cancellableFlowCollector
coroutineContextSharedFlow
retrySharedFlow
retryWhenStateFlow
conflateSharedFlow
toSetIdeaKotlinClasspathProto
copy:IdeaKotlinSourceDependencyProtoOrBuilder
coordinatesOrNull5IdeaKotlinSourceDependencyProtoOrBuilder
extrasOrNull$IdeaKotlinSourceDependencyProto
copyCIdeaKotlinDependencyProtoOrBuilder
unresolvedBinaryDependencyOrNull9IdeaKotlinDependencyProtoOrBuilder
sourceDependencyOrNullBIdeaKotlinDependencyProtoOrBuilder
projectArtifactDependencyOrNullAIdeaKotlinDependencyProtoOrBuilder
resolvedBinaryDependencyOrNullIdeaKotlinDependencyProto
copy%IdeaKotlinBinaryCoordinatesProto
copy7IdeaKotlinSourceCoordinatesProtoOrBuilder
projectOrNull%IdeaKotlinSourceCoordinatesProto
copy&IdeaKotlinProjectCoordinatesProto
copy=IdeaKotlinResolvedBinaryDependencyProtoOrBuilder
extrasOrNullBIdeaKotlinResolvedBinaryDependencyProtoOrBuilder
coordinatesOrNull@IdeaKotlinResolvedBinaryDependencyProtoOrBuilder
classpathOrNull,IdeaKotlinResolvedBinaryDependencyProto
copy>IdeaKotlinProjectArtifactDependencyProtoOrBuilder
extrasOrNull-IdeaKotlinProjectArtifactDependencyProto
copyCIdeaKotlinProjectArtifactDependencyProtoOrBuilder
coordinatesOrNull?IdeaKotlinUnresolvedBinaryDependencyProtoOrBuilder
extrasOrNullDIdeaKotlinUnresolvedBinaryDependencyProtoOrBuilder
coordinatesOrNull.IdeaKotlinUnresolvedBinaryDependencyProto
copyIdeaExtrasProto
copy.IdeaKotlinSerializationContext
IdeaExtrasProto%IdeaKotlinSerializationContext
ExtrasExtras
toByteArrayMutableStateFlow
asStateFlowLongArray
asFlowFlow
forEachFlow
flatMapMergeFlowCollector
invokeSafelyFlow
flatMapFlow
transformLatestFlow
sampleFlow
mapFlow
broadcastInFlow
stateInFlow
transformWhileFlowCollector
emitAllFlow
filterNotNullFlow
catchImpl	Flow
scanFlow
subscribeFlow
toCollectionFlow
filterFlow
delayFlowFlow
onCompletionIterator
asFlowFlow
composeFlow
collectFlow
onEmptyArray
asFlowFlow
flattenConcatFlow
concatWithFlow
flattenFlow
filterNotFlow
flowWithFlow
retryWhenThrowable
isSameExceptionAsLongRange
asFlowFlow
takeWhileSequence
asFlowFlow
distinctUntilChangedBy	Flow
lastFlow
delayEachFlow
singleFlow
flattenMergeFlow
toListFlow
dropWhileFlow
onStartIntArray
asFlowFlow
observeOnIntRange
asFlowFlow
concatMap
Flow
catch
Flow
cacheFlow
mapNotNullFlow
runningFoldBroadcastChannel
asFlowFlow
filterIsInstance	Flow
takeCoroutineScope
launchSharingReceiveChannel
consumeAsFlowReceiveChannel
receiveAsFlowFlowCollector
emitAbortFlow
replayFlow
runningReduce$CoroutineScope
launchSharingDeferredFlow
transformFlow
onEachFlow
configureSharingFlow
mapLatestFlow
shareInFlow
bufferFlow
debounceInternalIterable
mergeIterable
asFlowFlow
cancellableFlow
firstOrNullFlow
combineFlowCollector
ensureActive CoroutineScope
fixedPeriodTickerFlow
conflateFlow
startWith
Flow
retryFlow
debounceFlow
withIndexFlow
onErrorResumeNextFlow
flowOnFlow
collectLatestFlow
singleOrNullFlow
launchInSuspendFunction0
asFlow	Flow
skipFlow
reduceFlow
subscribeOnFlow
zip
Flow
toSetFlowCollector
emitAllImplFlow
onErrorCollectFlow
produceInThrowable
isCancellationCauseFlow
combineTransformFlow
scanFoldFlow
onErrorReturnFlow
combineLatestFunction0
asFlowFlow
collectWhileFlow
flatMapConcatFlow
onErrorResumeFlow
distinctUntilChangedFlow
lastOrNull	Flow
dropFlow
scanReduceFlow
collectIndexedFlow
flatMapLatest	Flow
foldSharedFlow
onSubscriptionFlow
unsafeTransform
Flow
countFlow
switchMap
Flow
firstMutableSharedFlow
asSharedFlowFlow
publishOnFlow
publish
Flow
mergeMutex
withLockSemaphore
withPermitAny
markSelectBuilder
onTimeoutReceiveChannel
broadcastCoroutineScope
broadcastChannelResult
onSuccessChannelResult
onFailureChannelResult
onClosedChannelResult
getOrElseCoroutineScope
actorCoroutineScope
produceProducerScope
awaitCloseClosed
toResultAny
toResultReceiveChannel
consumeReceiveChannel
toChannelReceiveChannel
singleReceiveChannel
firstReceiveChannel
firstOrNullReceiveChannel
filterNotReceiveChannel
indexOfReceiveChannel
toSetReceiveChannel
onReceiveOrNullReceiveChannel
flatMapReceiveChannel
dropWhile ReceiveChannel
mapIndexedNotNullBroadcastChannel
consumeReceiveChannel
consumesSendChannel
trySendBlockingReceiveChannel
toListSendChannel
sendBlockingReceiveChannel
toMutableListReceiveChannel
filterIndexedReceiveChannel
dropReceiveChannel
mapNotNullReceiveChannel
mapIndexedReceiveChannel
receiveOrNullReceiveChannel
lastOrNullReceiveChannel
toMapReceiveChannel
withIndexReceiveChannel
requireNoNullsReceiveChannel
mapReceiveChannel
takeWhileReceiveChannel
filterBroadcastChannel
consumeEachReceiveChannel
takeReceiveChannel
filterNotNullToReceiveChannel
singleOrNullReceiveChannel
elementAtReceiveChannel
consumeEachReceiveChannel
distinctReceiveChannel
toMutableSetReceiveChannel
minWithReceiveChannel
lastReceiveChannel
filterNotNullReceiveChannel
distinctByReceiveChannel
noneReceiveChannel
cancelConsumedReceiveChannel
toCollectionReceiveChannel
zipReceiveChannel
countReceiveChannel
lastIndexOfReceiveChannel
anyReceiveChannel
maxWithReceiveChannel
elementAtOrNullReentrantLock
withLockAtomicInteger
value)MainDispatcherFactory
tryCreateDispatcher!MainCoroutineDispatcher
isMissingConcurrentLinkedListNode
closeSegment
findSegmentInternalFunction1
bindCancellationFun1Function1
callUndeliveredElementCatchingException Function1
callUndeliveredElement
Any
unwrap"Continuation
resumeCancellableWith(DispatchedContinuation
yieldUndispatched(DispatchedContinuation
executeUnconfinedClass
fieldsCountClass
fieldsCountOrDefault*SuspendFunction0
startCoroutineCancellable&Continuation
startCoroutineCancellable*SuspendFunction1
startCoroutineCancellable#StackTraceElement
elementWiseEqualsThrowable
initCauseThrowable
causeAndStacktraceThrowable
sanitizeStackTraceStackTraceElement
isArtificialArray
frameIndexTask
isBlocking,SuspendFunction0
startCoroutineUnintercepted5ScopeCoroutine
startUndispatchedOrReturnIgnoreTimeout,SuspendFunction1
startCoroutineUnintercepted+SuspendFunction0
startCoroutineUndispatched(ScopeCoroutine
startUndispatchedOrReturn+SuspendFunction1
startCoroutineUndispatched!ScopeCoroutine
undispatchedResultCoroutineContext
delayDuration
toDelayMillisCollection
joinAllCollection
awaitAll%ExecutorService
asCoroutineDispatcherExecutor
asCoroutineDispatcherCoroutineDispatcher
asExecutor Throwable
addSuppressedThrowableCoroutineScope
asyncCoroutineScope
launchCoroutineDispatcher
invokeAny
hexAddressAny
classSimpleNameContinuation
toDebugStringJob
disposeOnCompletionJob
cancelChildrenCoroutineContext
ensureActive
Job
cancel2CancellableContinuation
cancelFutureOnCancellationCoroutineContext
isActiveCoroutineContext
cancelThrowable
orCancellationJob
cancelFutureOnCompletionJob
cancelAndJoinJob
ensureActiveCoroutineContext
jobCoroutineContext
cancelChildrenAny
unboxStateAny
boxIncompleteTask
taskContextTaskContext
afterTaskCoroutineScope
ensureActiveCoroutineScope
plusCoroutineScope
cancelCoroutineScope
isActiveResult
toStateDispatchedTask
resumeUnconfined%DispatchedTask
runUnconfinedEventLoopInt
isReusableModeDispatchedTask
dispatchDispatchedTask
resumeInt
isCancellableMode!Continuation
resumeWithStackTraceCancelHandlerBase
asHandlerFunction1
invokeItCompletionHandlerBase
asHandler)Continuation
updateUndispatchedCompletionCoroutineContext
coroutineName"CoroutineScope
newCoroutineContext*CoroutineStackFrame
undispatchedCompletion CompletableDeferred
completeWithThreadLocal
asContextElementThreadLocal
ensurePresentThreadLocal
isPresentFunction1
isHandlerOf,CancellableContinuation
removeOnCancellation-CancellableContinuation
disposeOnCancellation%AndroidVersion
toSharedAndroidVersionAndroidVersion
getFeatureLevelAndroidVersion
getApiString#VariantOutputConfiguration
baseName"VariantOutputConfiguration
dirName#VariantOutputConfiguration
fullNameCollection
joinToStringCollection
getFilterName$VariantOutputConfiguration
getFilter5NestedComponentCreationConfig
getMainTargetSdkVersionKComponentCreationConfig
warnAboutAccessingVariantApiValueForDisabledFeatureApkCreationConfig
isTestApk&JavaCompile
recordAnnotationProcessorsJavaCompile
checkReleaseFlag,JavaCompile
configureAnnotationProcessorPath'AnnotationProcessorInfo
toProcessorInfo6JavaCompile
configurePropertiesForAnnotationProcessingJavaCompile
configureProperties8ComponentCreationConfig
getFlavorNamesWithDimensionNamesFileChange
toSerializable)InputChanges
getChangesInSerializableFormIterable
toSerializableChangeType
toSerializableCxxAbiModel
createFolderLayoutTarget
findRuntimeFilesString
toArtifactTypeSynchronizeFile
encodeFileFingerPrint
encodeEncodedFileFingerPrint
decodeEncodedSynchronizeFile
decodeNativeBuildConfigValueMini
lintFile
fingerPrintFile
writeTextIfDifferentFile
containsExactTextComparison
areSameFileOrContentCxxModuleModel
toJsonStringCxxAbiModel
writeJsonToFileCxxAbiModel
toJsonStringCxxCmakeAbiModel
toJsonStringCxxVariantModel
toJsonStringCxxAbiModel
lookup'CxxCmakeModuleModel
minimumCmakeVersion*CxxVariantModel
prefabPackageDirectoryList.CxxVariantModel
prefabPackageConfigurationListCxxVariantModel
prefabClassPath*CxxVariantModel
predictableRepublishFolderCxxVariantModel
cppFlagsCxxVariantModel
cFlags!PrefabPublication
copyAsSingleAbi"PrefabPublication
copyAsHeaderOnly1PrefabPublication
copyWithLibraryInformationAdded/PrefabPublicationType
readPublicationFileOrNull*PrefabPublicationType
writePublicationFile)PrefabPublicationType
publicationFileFromCxxModuleModel
moduleName&CxxModuleModel
buildSystemNameForTasks,CxxModuleModel
determineUsedStlFromArguments*CxxModuleModel
determineUsedStlForNdkBuild+CxxModuleModel
intermediatesParentDirSuffix CxxModuleModel
buildSettingsFileCxxModuleModel
refsFolderCxxModuleModel
makeFileFolderCxxModuleModel
ndkMajorVersion'CxxModuleModel
determineUsedStlForCmakeCxxModuleModel
determineUsedStlCxxModuleModel
ndkMaxPlatformCxxModuleModel
cmakeGeneratorCxxModuleModel
buildSystemTagCxxModuleModel
ndkMinPlatform)CxxModuleModel
predictableRepublishFolderCxxModuleModel
ndkMinorVersion CxxModuleModel
cmakeSettingsFile+CxxAbiModel
jsonGenerationLoggingRecordFile(CxxAbiModel
metadataGenerationStdoutFileCxxAbiModel
createNinjaCommandCxxAbiModel
ninjaBuildFile(CxxAbiModel
shouldGeneratePrefabPackages"CxxAbiModel
ninjaBuildLocationFile#CxxAbiModel
compileCommandsJsonFileCxxAbiModel
cxxBuildHashKeyFileCxxAbiModel
modelOutputFile$CxxAbiModel
getBuildCommandArguments CxxAbiModel
buildIsPrefabCapable&CxxAbiModel
predictableRepublishFolder+CxxAbiModel
additionalProjectFilesIndexFileCxxAbiModel
is64Bits!CxxAbiModel
symbolFolderIndexFileCxxAbiModel
objFolder*CxxAbiModel
metadataGenerationTimingFolderCxxAbiModel
ninjaLogFileCxxAbiModel
modelMetadataFolder&CxxAbiModel
compileCommandsJsonBinFileCxxAbiModel
jsonFileCxxAbiModel
logsFolder)CxxAbiModel
metadataGenerationCommandFileCxxAbiModel
isDeprecatedCxxAbiModel
isDefaultCxxAbiModel
clientQueryFolderCxxAbiModel
bitnessCxxAbiModel
clientReplyFolderCxxAbiModel
configurationHashCxxAbiModel
prefabConfigFileCxxAbiModel
ninjaDepsFileCxxAbiModel
minSdkVersionCxxAbiModel
cmakeServerLogFileCxxAbiModel
altCpuArchitectureCxxAbiModel
platformCxxAbiModel
cpuArchitectureCxxAbiModel
miniConfigFileCxxAbiModel
nameCxxAbiModel
buildFileIndexFile$CxxAbiModel
redirectedCxxBuildFolderCxxAbiModel
platformCode(CxxAbiModel
metadataGenerationStderrFile(CxxAbiModel
lastConfigureFingerPrintFileEncodedDependenciesKey
decodeCompilation
encodeObjectFileCacheEvent
encodeObjectFileKey
encodeEncodedCompilation
decode"EncodedObjectFileCacheEvent
decodeEncodedObjectFileKey
decodeDependenciesKey
encodeMessageDigest
updateMessageDigest
toBase36EncodedLoggingMessage
decodeLoggingMessage
textLoggingMessage
encodeList
toJsonStringCxxAbiModel
executeProcessExecuteProcessCommand
logResultExecuteProcessCommand
execute)ExecuteProcessCommand
processErrorMessage"SettingsConfiguration
toJsonStringSettings
toJsonStringExecuteProcess
encodeEncodedExecuteProcess
decode'Settings
expandInheritEnvironmentMacrosSettings
getConfigurationCxxAbiModel
resolveMacroValue4BuildSettingsConfiguration
getEnvironmentVariableMap"CxxAbiModel
getNdkMetaSettingsJson$CxxAbiModel
getAndroidGradleSettings&CxxAbiModel
getSettingsFromCommandLine*CxxAbiModel
gatherSettingsFromAllLocations,SettingsConfiguration
withConfigurationsFrom&SettingsConfiguration
getVariableValueRevision
isCmakeForkVersionAbi
architectureAbi
bitness
Abi
tripleAbi
isFallbackAbiAbi
llvmTriple)CxxAbiModel
expandConfigurationHashMacrosCxxCmakeAbiModel
rewrite&CxxAbiModel
getAbiRewriteConfigurationCxxCmakeModuleModel
rewrite+CxxAbiModel
getNdkBuildCommandLineArguments2SettingsConfiguration
getCmakeCommandLineArguments2SettingsConfiguration
getSettingsFromConfiguration+CxxAbiModel
calculateConfigurationArguments"BuildSettingsConfiguration
rewriteCxxModuleModel
rewriteCxxAbiModel
rewriteFunction2
stringOrNull5CxxAbiModel
calculateConfigurationArgumentsExceptHashString
toFileEnvironmentVariable
rewriteCxxVariantModel
rewrite"CxxAbiModel
getNdkBuildCommandLine&CxxAbiModel
calculateConfigurationHashFunction2
fileOrNullFunction2
booleanOrNullCxxProjectModel
rewrite6ComponentCreationConfig
prefabConfigurePackageTaskName-ComponentCreationConfig
prefabPackageTaskNameList
toConfigurationModel CxxAbiModel
rewriteWithLocationsEncodedCreateCxxModel
decode(EncodedConfigureInvalidationState
decode NativeModelBuilderOutcome
encode!ConfigureInvalidationState
encodeChangedFile
encode'EncodedNativeModelBuilderOutcome
decodeEncodedChangedFile
decodeCreateCxxModel
encode8ConfigureInvalidationState
shouldConfigureReasonMessages FileFingerPrint
compareToCurrent,ConfigureInvalidationState
softConfigureOkay*ConfigureInvalidationState
shouldConfigure9ConfigureInvalidationState
recordConfigurationFingerPrintMap
propertyAsListNativeBuildCreationConfig
ninja4NativeBuildCreationConfig
externalNativeNinjaOptionsMap
propertyAsSet?NativeBuildCreationConfig
getPrefabExperimentalPackagingOptions	Map
ninjaMap
propertyAsFileList
getCmakeListsFolderList
getCmakePropertyList
toMSBuildArgumentsList
onlyKeepPropertiesList
filterTypeList
getCmakeGenerator!List
onlyKeepCmakeServerArgumentsList
removeSubsumedArgumentsList
getMSBuildPropertyList
onlyKeepUnknownArgumentsList
toCmakeArgumentsList
getCmakeBinaryOutputPathString
toNdkBuildArgumentList
getPropertyList
removeCmakePropertyList
getCmakeBooleanPropertyString
toCmakeArgumentList
removeNdkBuildJobsList
getNdkBuildPropertyList
toStringListList
removeBlankPropertiesString
toMSBuildArgumentList
toNdkBuildArgumentsBuildTaskAttribution
encodeEncodedAttributionKey
decode#EncodedBuildTaskAttributions
decodeAttributionKey
encode"EncodedBuildTaskAttribution
decodeBuildTaskAttributions
encodeBuildTaskAttribution
type CxxAbiModel
createAttributionKeyMutableList
addTaskEventBuilder
collectTaskBuildTaskAttribution
nameAttributionKey
filenameAttributionKey
describe#MutableList
addProcessNameMetaEvent"MutableList
addThreadNameMetaEventMap
breadthFirstMap
ancestorsCodeShrinker
convertClassField
convertCompileOptions
convertLint
convertVectorDrawablesOptions
convertDefaultConfig
convertMap
convertResValuesAndroidResources
convertProductFlavor
convertApkSigningConfig
convertString
convertToExecutionDefaultAndroidSourceSet
convertMap
convertBuildConfigApiVersion
convertBuildType
convert%ResolvedArtifactResult
getVariantName7ResolvedArtifactResult
hasProjectTestFixturesCapability7ResolvedArtifactResult
hasLibraryTestFixturesCapability'AndroidGradlePluginProjectFlags
convertAny
setIfNotNullLibraryInfo
convertBooleanFlag
convertAndroidVersion
convertFile
convertProjectInfo
convertAndroidLibraryData
convertLibrary
convertSigningConfigImpl
convertTestInfo
convertLibraryType
convert"ComponentInfo
convertComponentInfo&ProjectComponentIdentifier
getIdString
List
asMapResolvedVariantResult
toKeyIterable
asMultiMap.ResolvedArtifactResult
isAndroidProjectLibraryResolvedArtifactResult
hasTypeArtifactCollection
asMap.TestComponentDslInfo
getTestComponentNamespace&ComponentDslInfo
initTestApplicationId-ArtifactCollection
asProjectSourceSetKeyedMap$ArtifactCollection
asProjectKeyedMap#ComponentType
toLintModelModuleTypeFileCollection
getRegularFilesArtifact
getOutputPathArtifact
getOutputDir!Artifact
getIntermediateOutputDirFileCollection
getDirectories"Artifact
getIntermediateOutputPathTaskContainer
registerTaskTaskProvider
letIfPresentTask
dependsOnCapability
convertToStringComponentIdentifier
toIdString!ResolvedArtifactResult
toIdStringBuilder
setSigningConfigurationBuilder
setSignerConfig!TaskProvider
configureTaskOutputsResolvedComponentResult
flattenConfiguration
toIdStrings"ResolvedComponentResult
toIdString+VariantAwareTask
configureVariantPropertiesBundle
convertBuilder
splitBy AssetPackBundleExtension
convertTask
cleanUpTaskOutputs%ResolvedArtifactResult
userFacingName6BundleLibraryClassesInputs
configureWorkerActionParams$BundleLibraryClassesInputs
configureConfiguration
toVersionMapIterable
associateIndexedDirectory
getOrderedFileTree#ResolutionResult
getPathToComponent$ResolutionResult
getModuleComponentsSequence
toImmutableListIterable
toImmutableSetMap
toImmutableMapIterable
toImmutableList KotlinCompile
addPluginClasspathKotlinCompile
addPluginOptionProperty
setDisallowChangesSetProperty
setDisallowChanges.ConfigurableFileCollection
fromDisallowChangesMapProperty
setDisallowChangesListProperty
setDisallowChanges TaskOperationResult
getTaskStateTestStatus
isPassedOrSkippedUtpRunnerConfig
shardName#UtpDependencies
resolveDependencies AnalysisResult
toPreviewResponseString
toAndroidTarget0BuildServiceRegistry
getLintParallelBuildServiceAapt2Input
registerAaptServiceAapt2Input
getErrorFormatModeAapt2Input
getAapt2ExecutableAapt2Input
useAapt2Input
getLeasingAapt2=AndroidLocationsProvider
getDefaultDebugKeystoreSigningConfig8AndroidLocationsProvider
getDefaultDebugKeystoreLocationString
optionalExeBuildConfigField
emitString
ensureSuffixArtifactType
getAttributesProperty
configureFrom*Capability
isLibraryTestFixturesCapability*Capability
isProjectTestFixturesCapabilityAndroidJarInput
initialize$BuildToolsExecutableInput
initializeNdkHandlerInput
initializeAndroidVersion
asDslResourceTable
entriesSequence#ResourceTable
nullOutEntriesWithIds ResourceStore
isJarPathReachableResourceStore
getResourceIdDexFileData
plusDexFile
compatibleWithZipOutputStream
putOutputStream
writeDmInputStream
readProfileVersionArtProfile
saveMemberParser
parseParametersParseable
parseIdentifierTypeParser
parseTypeClassParser
parseParseable
parseFqnMemberParser
parseMemberLineInputStream
readUInt32ByteBuffer
mutf8InputStream
readStringInputStream
readInputStream
readUInt16InputStream
readUIntByteBuffer
ushortOutputStream
writeUInt8OutputStream
writeUInt32OutputStream
writeUIntOutputStream
writeStringLong
toIntSaturatedOutputStream
writeUInt16OutputStream
writeCompressedInputStream
readUInt8String
utf8LengthInputStream
readCompressedByteArray
compressedByteBuffer
leb128ByteBuffer
ubyteFlags
parseFlags"RuleFragmentParser
parseMethodNameRuleFragmentParser
parseTarget"RuleFragmentParser
parseParametersProfileRule
toDexMethodString
withSnippet"RuleFragmentParser
parseReturnType-IdeaKotlinSerializationLogger
handleExceptionMutableMap
addZipChangesMutableMap
addFileChangeDexingType
isLegacyMultiDexMode StringCachingService
cacheString!KotlinTarget
isProducedFromPreset3KotlinTargetsContainerWithPresets
configureOrCreate"KotlinCommonCompilerOptions
usesK2Project
pm20ExtensionOrNullExplicitApiMode
toCompilerValueProject
createKotlinExtensionProject
kotlinJvmExtension Project
kotlinJvmExtensionOrNullProject
pm20ExtensionProject
multiplatformExtensionProject
kotlinExtensionOrNullProject
topLevelExtensionProject
kotlinExtension4KotlinTopLevelExtension
explicitApiModeAsCompilerArg$Project
multiplatformExtensionOrNullProject
topLevelExtensionOrNull<KotlinTargetContainerWithJsPresetFunctions
getExistingTarget5KotlinTargetContainerWithJsPresetFunctions
jsInternal+IdeaKpmProjectBuildingContext
IdeaKpmModuleIdeaKpmDependencyResolver
plus$IdeaKpmDependencyResolver
withEffect-IdeaKpmProjectBuildingContext
IdeaKpmPlatformExtras
kotlinDebugMutableExtras
kotlinDebug4Project
locateOrRegisterIdeaKpmBuildProjectModelTask!IdeaKpmDependencyTransformer
plus)IdeaKpmDependencyResolver
withTransformerCompanion
default2IdeaKpmProjectBuildingContext
buildIdeaKpmFragment-IdeaKpmProjectBuildingContext
IdeaKpmFragment1IdeaKpmProjectBuildingContext
buildIdeaKpmVariant/ComponentIdentifier
ideaKotlinBinaryCoordinates!Variant
createVariantArtifactView%ArtifactResolution
createArtifactView3PlatformFragment
createPlatformFragmentArtifactViewFragmentConstraint
not?IdeaKpmProjectModelBuilder
registerExtrasSerializationExtension,IdeaKpmProjectBuildingContext
IdeaKpmProjectFragmentConstraint
orFragmentConstraint
andNKotlinPm20ProjectExtension
configureIdeaKpmSpecialPlatformDependencyResolutionProject
resolveKlibKotlinTopLevelExtension
project5KotlinPm20ProjectExtension
ideaKpmProjectModelBuilder(GradleKpmModule
createExternalJvmVariant(GradleKpmVariantInternal
compilationData8AbstractKotlinCompile
nagUserFreeArgsModifiedOnExecutionTask
thisTaskProvider Task
cacheOnlyIfEnabledForKotlin,TaskWithLocalState
cleanOutputsAndLocalStateThrowable
hasOOMCause&Collection
filterKlibsPassedToCompilerFile
canKlibBePassedToCompiler*FileCollection
filterKlibsPassedToCompilerMutableList
addFileArgs*ListProperty
toSingleCompilerPluginOptions Provider
toCompilerPluginOptionsProject
registerTaskProject
locateOrRegisterTaskTaskContainer
locateTaskProject
locateTask4K2MultiplatformStructure
fragmentSourcesCompilerArgs4K2MultiplatformStructure
fragmentRefinesCompilerArgs.K2MultiplatformStructure
fragmentsCompilerArgsThrowable
stackTraceAsStringZipFile
listDescendantsZipFile
copyPartiallyPath
topRealPathProject
klibModuleName,Any
castIsolatedKotlinPluginClassLoaderAwareProject
whenKaptEnabled%Project
enableKgpDependencyResolution!ExtraPropertiesExtension
getOrPut#Project
getOrPutRootProjectPropertyFile
crc32ChecksumStringFile
crc32ChecksumAny
loadPropertyFromResourcesProject
probeRemoteFileLength(Project
findAppliedAndroidPluginIdOrNullLogger
lifecycleWithDurationConfiguration
markResolvableConfiguration
markConsumableGradle
projectCacheDir!Project
compositeBuildRootProject,Gradle
registerClassLoaderScopedBuildServiceMap
mergeWithAny
toSetOrEmptyProject
forAllAndroidVariants.Task
notCompatibleWithConfigurationCacheCompat-Project
readSystemPropertyAtConfigurationTimeAny
isProject
setupNativeCompilerTask
onlyIfCompat)AbstractArchiveTask
archivePathCompatibleTask
doNotTrackStateCompat-ArtifactCollection
getResolvedArtifactsCompat3LazyResolvedConfiguration
dependencyArtifactsOrNullProject
hasAndroidPluginProject
androidExtensionOrNullProject
androidExtensionString
asValidTaskNameString
clearAnsiColorString
decamelize/Configuration
addGradlePluginMetadataAttributesProject
addExtendsFromRelationAttributeContainer
toMap6KotlinCommonCompilerOptions
configureExperimentalTryK2&Project
warnExperimentalTryK2IsEnabledProject
future
Future
mapProject
lazyFutureCompletableFuture
completeKotlinPluginLifecycle
futureFuture
lenientIterable
toPathsArray Iterable
pathsAsStringRelativeToFile
relativeOrAbsoluteRegularFile
toUri$String
fileExtensionCasePermutationsFile
isJavaFileFile
isKotlinFile!File
absolutePathWithoutExtensionFile
relativeToRootFile
listFilesOrEmpty(NamedDomainObjectContainer
maybeRegister&NamedDomainObjectContainer
getOrCreate'Project
providerModeSystemPropertyValue7Project
runProjectConfigurationHealthCheckWhenEvaluatedProject
inLenientMode!Project
syncExceptionsAreNotEmpty*Project
runProjectConfigurationHealthCheckKotlinSourceSet
resolveMetadata'Project
createCinteropLibraryDependency#Project
resolveCInteropDependencies.Project
resolveNativeDistributionLibraryForIde(ObjectFactory
listPropertyWithConventionTask
outputFilesProvider&ObjectFactory
setPropertyWithLazyValueProject
filesProvider'ListProperty
chainedFinalizeValueOnRead(ObjectFactory
providerWithLazyConventionProvider
getValueProject
newFilePropertyProviderFactory
changingProject
setProperty"ObjectFactory
setPropertyWithValueProperty
chainedFinalizeValueProperty
chainedDisallowChanges%ObjectFactory
propertyWithNewInstance$ObjectFactory
propertyWithConventionProject
newProperty#Property
chainedFinalizeValueOnRead IdeDependencyResolver
withEffectSourceSetConstraint
andSourceSetConstraint
not$Project
kotlinIdeMultiplatformImport;IdeMultiplatformImport
registerExtrasSerializationExtensionSourceSetConstraint
or2Project
locateOrRegisterIdeResolveDependenciesTask.Project
kotlinIdeMultiplatformImportStatistics2IdeDependencyResolver
asAdditionalArtifactResolver4IdeDependencyResolver
withAdditionalArtifactResolverProject
ideaImportDependsOn#Project
prepareKotlinIdeaImportTask%IdeDependencyResolver
withTransformer*Project
kotlinIdeCompilerArgumentsResolverKotlinProjectExtension
targets-GradleKpmDependencyGraph
allDependencyModules+GradleKpmDependencyGraph
allDependencyNodes&Companion
ofVariantRuntimeDependencies Project
newDependencyFilesHolder+Companion
ofMetadataCompilationDependencies&Companion
ofVariantCompileDependenciesKpmFragment
disambiguateName&Companion
disambiguateNameOmittingMain$KpmFragment
unambiguousNameInProjectCompanion
disambiguateNameKpmModule
representsProjectProject
libsDirectoryProject
distsDirectoryProject
archivesNameProject
currentBuildIdGGradleKpmVariantPublishingConfigurator
configureSingleVariantPublishingHGradleKpmVariantPublishingConfigurator
configureNativeVariantPublicationHGradleKpmVariantPublishingConfigurator
configureSingleVariantPublicationGradleKpmFragment
path$GradleKpmFragment
containingVariantsGradleKpmModule
jvmKotlinPm20ProjectExtension
jvmGradleKpmVariant
ownModuleName.GradleKpmVariant
defaultSourceArtifactTaskName9GradleKpmCompilationData
pluginClasspathConfigurationName/Project
compilerPluginProviderForNativeMetadata4Project
compilerPluginProviderForPlatformCompilation"Project
compilerPluginDataProvider)Project
compilerPluginProviderForMetadataGradleKpmModule
isMain*GradleKpmModule
variantsContainingFragment GradleKpmModule
disambiguateName3GradleKpmModule
resolvableMetadataConfigurationNameConfiguration
configure GradleKpmModule
moduleCapability3MavenPublication
setupKotlinToolingMetadataIfNeeded5GradleKpmConfigurationSetup
withConfigurationProvider GradleKpmConfigurationSetup
plus-Project
metadataCompilationRegistryByModuleId&GradleKpmFragment
isNativeHostSpecific GradleKpmFragment
isNativeShared)GradleKpmConfigurationArtifactsSetup
plus(GradleKpmConfigurationRelationSetup
plus+ResolvedVariantResult
toKpmModuleIdentifier5ModuleComponentIdentifier
toSingleKpmModuleIdentifier+ComponentIdentifier
matchesModuleIdentifier!ComponentIdentifier
matchesModule.ResolvedComponentResult
toKpmModuleIdentifiers+ComponentIdentifier
matchesModuleDependency-ResolvedComponentResult
toKpmModuleDependency1ResolvedVariantResult
toSingleKpmModuleIdentifier3ResolvedComponentResult
toSingleKpmModuleIdentifier(ComponentSelector
toKpmModuleIdentifiers-ResolvedComponentResult
toKpmModuleIdentifier'ComponentSelector
toKpmModuleDependency,ResolvedVariantResult
toKpmModuleIdentifiers*GradleKpmConfigurationAttributesSetup
plusAttributeContainer
apply#GradleKpmVariant
outputsJarTaskName,GradleKpmConfigurationCapabilitiesSetup
plus7GradleKpmConfigurationCapabilitiesSetup
setCapabilitiesFramework
namePrefix.Project
registerEmbedAndSignAppleFrameworkTask*Project
registerAssembleAppleFrameworkTaskProject
appleFrameworkDirProject
XCFramework%Project
parentAssembleXCFrameworkTask'Project
registerAssembleXCFrameworkTask-Project
registerAssembleFatForXCFrameworkTaskProject
eraseIfDefaultProject
isXcodeTasksRequested Project
addBuildListenerForXcodeProject
useXcodeMessageStyle0ExternalKotlinTargetImpl
decoratedInstanceOrNull*ExternalKotlinTargetImpl
decoratedInstance.DecoratedExternalKotlinTarget
setupCompileTask/DecoratedExternalKotlinTarget
createCompilation)ExternalKotlinTargetImpl
setupApiElements7KotlinMultiplatformExtension
createExternalKotlinTarget-ExternalKotlinTargetImpl
setupRuntimeElements-ExternalKotlinTargetImpl
setupSourcesElements6PropertiesProvider
checkHmppFeatureFlagsForConsistency0Project
reportCommonMainDependsOnOtherSourceSetsPostConfigure
plusPreConfigure
plus0String
addAllDependenciesFromOtherConfigurations:KotlinTargetHierarchyDescriptor
buildKotlinTargetHierarchy5KotlinTargetHierarchyBuilderImpl
checkCyclicHierarchy/KotlinTargetHierarchyDescriptor
extendIfNotNullCompanion
orNull)KotlinCompilation
sourceSetTreeClassifier,InternalKotlinTarget
createMavenPublications9MavenPublication
addKotlinToolingMetadataArtifactIfNeeded3Configuration
configureSourcesPublicationAttributesKotlinTarget
internal*HasCompilerOptions
castCompilerOptionsType*KotlinCompilation
moduleNameForCompilationKotlinCompilation
isMain/InternalKotlinCompilation
castKotlinOptionsType"KotlinCompilation
disambiguateName&KotlinCompilation
associateWithClosureKotlinCompilation
isTestProject
baseModuleNameProject
javaSourceSetsKotlinTarget
disambiguateName.Project
buildAdhocComponentsFromKotlinVariants&Project
nativeUseEmbeddableCompilerJarIterable
publishableUsages4KotlinCompilationFactory
getOrCreateDefaultSourceSetKonanTarget
isCurrentHost KonanTarget
enabledOnCurrentHostCompositeMetadataArtifact
read1InternalKotlinCompilation
decoratedInstanceOrNull+InternalKotlinCompilation
decoratedInstanceKotlinCompilation
internal Dependency
toKpmModuleDependencyKpmBasicModule
fragmentByName-Project
setupGeneralKotlinExtensionParameters(Project
transformMetadataLibrariesForIde0ObjectFactory
transformMetadataLibrariesForBuild'Project
collectSourceSetMetadataOutputs6KotlinMultiplatformExtension
sourceSetsMetadataOutputs9KotlinMultiplatformExtension
cInteropMetadataOfSourceSets&KotlinTargetComponent
findUsageContext)Project
collectAllPlatformCompilationData"Project
allPlatformCompilationData+KotlinCompilation
toPlatformCompilationDataProject
collectAllProjectsData'ResolvedComponentResult
toProjectOrNullProject
allProjectsData2AttributeContainer
containsMultiplatformAttributes.MetadataDependencyResolution
projectDependencyCGranularMetadataTransformation
metadataDependencyResolutionsOrEmpty3ResolvedComponentResult
currentBuildProjectIdOrNull:KotlinMultiplatformExtension
platformCompilationSourceSetsProject
listProvider7InternalKotlinSourceSet
resolvableMetadataConfiguration;InternalKotlinSourceSet
resolvableMetadataConfigurationNameCInternalKotlinSourceSet
configureMetadataDependenciesConfigurations'Project
allCompileMetadataConfiguration?ProjectLayout
kotlinTransformedMetadataLibraryDirectoryForBuild,Project
kotlinCInteropLibraryDirectoryForIde?Project
kotlinTransformedCInteropMetadataLibraryDirectoryForIde7Project
kotlinTransformedMetadataLibraryDirectoryForIdeGProjectLayout
kotlinTransformedCInteropMetadataLibraryDirectoryForBuild<Project
locateOrRegisterMetadataDependencyTransformationTask)ComponentIdentifier
serializableUniqueKey%KotlinProjectStructureMetadata
toJson,KotlinProjectStructureMetadata
toXmlDocument(KotlinProjectStructureMetadata
serialize;KotlinMultiplatformExtension
kotlinProjectStructureMetadataNodeList
elementsCProject
kotlinMppDependencyProjectStructureMetadataExtractorFactory
Any
invoke)KotlinAndroidSourceSetConfigurator
onlyIf$AndroidBaseSourceSetName
variantTypeBaseVariant
type$Project
kotlinAndroidSourceSetLayoutProject
findAndroidSourceSet$KotlinSourceSet
androidSourceSetInfoProject
findKotlinSourceSet*KotlinSourceSet
androidSourceSetInfoOrNull1Project
compilationDependencyConfigurationByScope>ConfigurationContainer
sourceSetDependencyConfigurationByScope.KotlinSourceSet
checkForCircularDependsOnEdgesKotlinSourceSet
internal1InternalKotlinSourceSet
awaitPlatformCompilationsDProject
applyTransformationToLegacyDependenciesMetadataConfiguration.InternalKotlinSourceSet
metadataTransformationIterable
dependsOnClosure6KotlinMultiplatformExtension
findSourceSetsDependingOn KotlinSourceSet
disambiguateNameIterable
withDependsOnClosureProject
artifactTypeAttribute(Project
compatibilityConventionRegistrar!Project
isProjectIsolationEnabled Provider
usedAtConfigurationTime+Project
configurationTimePropertiesAccessorProject
cocoapodsBuildDirsString
toSetupBuildTaskNameFamily
toPodGenTaskNameFamily
platformLiteral%Project
getPodBuildSettingsProperties-KotlinMultiplatformExtension
supportedTargets$Family
toPodInstallSyntheticTaskName"String
toBuildDependenciesTaskName/PodBuildSettingsProperties
frameworkSearchPathsKotlinNativeTarget
toValidSDKString
splitQuotedArgsProject
getPodBuildTaskProvider6PodBuildSettingsProperties
frameworkHeadersSearchPaths&KotlinNativeArtifactConfig
withPodspecString
asValidFrameworkName&Project
registerVariantImplementationsAny
findExtensionAny
addExtension"ExtraPropertiesExtension
getOrNullAny
getExtensionAny
extraPropertiesAny
executeClosureProject
kotlinToolingVersionProject
getKotlinPluginVersionProject
runOnceAfterEvaluatedKotlinCompilationInfo
tcsOrNullKotlinCompilationInfo
tcsKotlinCompilationInfo
kpmOrNull BaseVariant
forEachJavaSourceDir+BaseVariant
forEachKotlinSourceDirectorySetBaseVariant
getJavaTaskProvider"BaseVariant
forEachKotlinSourceSetProject
whenEvaluated@Configuration
setupAsLocalTargetSpecificConfigurationIfSupportedProject
usageByNameProject
attributeValueByNameKotlinTarget
testTaskNameProject
categoryByName#Project
commonKotlinPluginClasspathConfiguration
usesPlatformOf:Configuration
setJavaTargetEnvironmentAttributeIfSupportedProject
launchInRequiredStageProperty
awaitFinalValue!KotlinPluginLifecycle
newProperty"Project
startKotlinPluginLifecycle-Project
newKotlinPluginLifecycleAwarePropertyProject
launchInStageProject
launch%Property
isKotlinPluginLifecycleAwareProject
kotlinPluginLifecycle/Property
findKotlinPluginLifecycleAwarePropertyStage
awaitSourceSet
clearJavaSrcDirs$AndroidGradlePluginVersion
compareTo$AndroidGradlePluginVersion
isAtLeast,Project
variantImplementationFactoryProvider$Project
variantImplementationFactory>Project
runMissingKotlinTargetsProjectConfigurationHealthCheck?Project
runAndroidSourceSetLayoutV1SourceSetsNotFoundDiagnosticMProject
runDisabledCInteropCommonizationOnHmppProjectConfigurationHealthCheck>Project
runMissingAndroidTargetProjectConfigurationHealthCheckKotlinLogger
kotlinInfoKotlinLogger
kotlinErrorKotlinLogger
logTimeKotlinLogger
kotlinDebugKotlinLogger
kotlinWarnJsBinary
executeTaskBaseName.KotlinJsIrOutputGranularity
toCompilerArgument KotlinPlatformType
fileExtensionTaskCollection
implementingSemVer
toVersionVersion
toSemVerString
foldDelimitersNpmRange
caretizeSingleVersionSet
intersectNpmRange
unionNpmRange
hasIntersectionNpmRange
intersectNpmRange
invertYarnEnv
asYarnEnvironmentNodeJsEnv
asNpmEnvironmentKotlinJsCompilation
npmProjectString
isFileVersionFile
isCompatibleArchive!Project
addNpmDependencyExtensionNpmDependency
toDeclaration-NpmDependencyDeclaration
uniqueRepresentationYarnResolution
toVersionStringProject
yarn)KotlinJsTargetDsl
calculateJsCompilerTypeString
jsQuotedFileHasher
calculateDirHashByteArray
toHexAppendable
appendConfigsFromDir(MutableList
addWasmExperimentalArguments$KotlinJvmTarget
registerKotlinJvmRun#KotlinJvmTarget
registerMainRunTask Project
kotlinArtifactsExtension(Project
registerKotlinArtifactsExtension.KotlinNativeArtifact
registerLinkFrameworkTask"Project
registerExportDependencies Project
registerLibsDependenciesCocoapodsDependency
schemeName Companion
createExecutionContext;KotlinMultiplatformExtension
forAllSharedNativeCompilations:KotlinMultiplatformExtension
forAllDefaultKotlinSourceSetsMutableList
addKey;KotlinNativeCompilation
cInteropDependencyConfigurationName6Project
locateOrCreateCInteropApiElementsConfiguration5Project
locateOrCreateCInteropDependencyConfigurationProject
commonizeCInteropTask2Project
isIntransitiveMetadataConfigurationEnabledProject
commonizeTask'Project
copyCommonizeCInteropForIdeTask&Project
isCInteropCommonizationEnabledProject
runCommonizerTask'Project
commonizeNativeDistributionTask-Project
isPlatformIntegerCommonizationEnabled.Project
isOptimisticNumberCommonizationEnabled-Project
cleanNativeDistributionCommonizerTaskCInteropProcess
toGist!Factory
fromAssociateCompilationsFactory
fromProject
commonizerLogLevel$Project
additionalCommonizerSettings9Project
setupCInteropCommonizerDependenciesForCompilation&Project
cinteropCommonizerDependencies1Project
setupCInteropCommonizerDependenciesForIde+Project
setupCInteropCommonizerDependenciesAProject
setupCInteropTransformCompositeMetadataDependenciesForIde0Project
getPropagatedCInteropDependenciesOrEmpty.Project
getPlatformCinteropDependenciesOrEmpty+Project
setupCInteropPropagatedDependencies!Project
getAllCInteropOutputFiles3Project
addIntransitiveMetadataDependencyIfPossibleFKotlinSharedNativeCompilation
getImplicitlyDependingNativeCompilations8AbstractCInteropCommonizerTask
commonizedOutputLibraries.AbstractCInteropCommonizerTask
outputDirectory8AbstractCInteropCommonizerTask
commonizedOutputDirectory&KotlinSourceSet
sharedCommonizerTarget KotlinSourceSet
commonizerTarget"KotlinCompilation
commonizerTarget4Project
collectAllSharedCommonizerTargetsFromProject2Project
collectAllSharedCommonizerTargetsFromBuildProject
isAllowCommonizer1KotlinMultiplatformExtension
nativeRootSourceSetsProject
addDependencies-Project
setupKotlinNativePlatformDependencies'Project
getOriginalPlatformLibrariesForBNativeDistributionCommonizerTask
getCommonizedPlatformLibrariesFor,Project
isNativeDependencyPropagationEnabled)Project
getNativeDistributionDependencies1Project
createCInteropMetadataDependencyClasspathKProject
createCInteropMetadataDependencyClasspathFromAssociatedCompilations:ChooseVisibleSourceSets
visibleSourceSetProvidingCInterops7Project
createCInteropMetadataDependencyClasspathForIdeHProject
createCInteropMetadataDependencyClasspathFromProjectDependenciesJProject
locateOrRegisterCInteropMetadataDependencyTransformationTaskForIde?CInteropMetadataDependencyTransformationTask
configureTaskOrder@KotlinSourceSet
cinteropMetadataDependencyTransformationTaskNameFKotlinSourceSet
cinteropMetadataDependencyTransformationForIdeTaskNameDProject
locateOrRegisterCInteropMetadataDependencyTransformationTaskJCInteropMetadataDependencyTransformationTask
onlyIfSourceSetIsSharedNative)Project
includeCommonizedCInteropMetadata.ExtensionAware
kotlinArtifactsPodspecExtensionProject
createFrameworkArtifact1Configuration
applyBinaryFrameworkGroupAttributes0KotlinMultiplatformExtension
createFatFrameworks*Framework
binaryFrameworkConfigurationNameProject
createFatFrameworkProject
addFrameworkArtifact7FrameworkGroupDescription
fatFrameworkConfigurationName#Framework
frameworkGroupDescriptionProject
findAndroidTarget2Project
createGenerateProjectStructureMetadataTaskProject
findMetadataCompilation0KotlinMetadataTarget
metadataCompilationsCreated'Project
isKotlinGranularMetadataEnabled!KotlinSourceSet
isNativeSourceSet-Project
isCompatibilityMetadataVariantEnabled!Project
filesWithUnpackedArchives5KotlinMetadataTarget
awaitMetadataCompilationsCreated5Project
shouldCompileIntermediateSourceSetsToMetadataProject
reportsDirProject
testResultsDir$TestTaskReports
configureConventionsKotlinTest
configureConventionsProject
testReportsDir)Project
includeKotlinToolingMetadataInApk KotlinTargetTestRun
testTaskNameType
finalInternalName.Project
registerBuildKotlinToolingMetadataTask GradleKpmVariant
jvmExtrasOrNullProject
buildProjectSettings$GradleKpmVariant
androidExtrasOrNull.GradleKpmModule
buildKotlinToolingMetadataTask(GradleKpmModule
getKotlinToolingMetadata&Project
buildKotlinToolingMetadataTaskGradleKpmVariant
jsExtrasOrNull*KotlinProjectExtension
buildProjectTargets#GradleKpmVariant
nativeExtrasOrNull+KotlinProjectExtension
buildProjectSettings/KotlinProjectExtension
getKotlinToolingMetadata#GradleKpmModule
buildProjectTargets6Project
buildKotlinToolingMetadataForMainKpmModuleTask6Project
buildKotlinToolingMetadataForAllKpmModulesTaskClassLoader
rootOrSelf!TaskWithLocalState
allOutputFilesServiceRegistry
operation ServiceRegistry
execWithProgress#ServiceRegistry
execWithErrorLoggerFile
ensureParentDirsCreated,CompilerPluginOptions
withWrappedKaptOptionsProject
isInIdeaSyncLogger
processLogMessageEKotlinTarget
excludeStdlibAndKotlinTestCommonFromPlatformCompilations"DependencyHandler
kotlinDependency'Configuration
allNonProjectDependenciesAConfigurationContainer
configureDefaultVersionsResolutionStrategy+Configuration
alignStdlibJvmVariantVersions KotlinTarget
addStdlibDependency/KotlinSourceSet
isRelatedToAndroidTestSourceSet6ConfigurationContainer
configureStdlibVersionAlignment%KotlinPlatformType
stdlibPlatformType(Project
configureStdlibDefaultDependency#Dependency
isKotlinDomApiDependency.Project
configureKotlinDomApiDefaultDependency&KotlinTarget
addKotlinDomApiDependency(DependencyHandler
kotlinDomApiDependency5KotlinCompilation
kotlinTestCapabilityForJvmSourceSet/KotlinTargetWithTests
findTestRunsByCompilation*KotlinTarget
configureKotlinTestDependency%Project
configureKotlinTestDependency%Dependency
isKotlinTestRootDependency"Configuration
getNamedDependencies.BaseVariant
annotationProcessorOptionProviders5BaseVariant
dataBindingDependencyArtifactsIfSupported&BaseVariant
annotationProcessorOptions&TaskProvider
kaptGenerateStubsTaskNameTaskProvider
kaptTaskName+Configuration
discoverScriptExtensionsFiles;DependencyHandler
registerDiscoverScriptExtensionsTransform?DependencyHandler
registerOnceDiscoverScriptExtensionsTransformCompanion
parseStringOrThrowSchemaVersion
isCompatibleList
toJsonArrayJsonObject
toJvmExtrasOrThrow JsonObject
toNativeExtrasOrThrow"JsonObject
toTargetMetadataOrThrow#JsonObject
toProjectSettingsOrThrowExtras
toJsonObjectNativeExtras
toJsonObjectJsExtras
toJsonObject"KotlinToolingMetadata
toJsonObject!JsonObject
toAndroidExtrasOrThrowCompanion
parseJsonOrThrowCompanion
parseJson"ProjectTargetMetadata
toJsonObjectJsonObject
getOrThrow(JsonObject
toTargetMetadataExtrasOrThrowJvmExtras
toJsonObjectJsonObject
toJsExtrasOrThrow"KotlinToolingMetadata
toJsonStringAndroidExtras
toJsonObjectProjectSettings
toJsonObject)JsonObject
toKotlinToolingMetadataOrThrow3Project
maybeCreateCommonizerClasspathConfigurationKotlinLogger
logFinishProject
konanHomeProject
kotlinNativeCompilerJarProject
jvmArgs"Project
getKonanCacheOrchestrationProject
getKonanCacheKindProject
disableKonanDaemonProject
konanVersionIrElement
dump7IrMemberAccessExpression
getValueParameterNamesForDebugIrFile
shouldSkipDumpIrFile
dumpTreesFromLineNumberIrElement
remapTypes.SymbolTable
declareSimpleFunctionWithOverridesIrType
dumpKotlinLikeIrTypeArgument
dumpKotlinLikeIrElement
dumpKotlinLikeTypeRemapper
withinScope%CompilerConfiguration
irMessageLoggerArray
transformInPlaceMutableList
transformInPlaceList
transformIfNeededMutableList
transformFlat0IrDeclarationContainer
transformDeclarationsFlatMutableList
transformSubsetFlatMutableList
replaceInPlace'ReferenceSymbolTable
withReferenceScopeSymbolTable
withScopeSymbolTable
allUnboundIrType
isFunctionTypeOrSubtype(IrClassifierSymbol
isClassWithNamePrefixIrType
isFunctionOrKFunctionIrType
isKFunctionIrType
isUnsignedIrType
isInterfaceIrType
isExternalObject%IrType
isSuspendFunctionTypeOrSubtypeIrType
isTypeFromKotlinPackageIrClass
getAllSuperclasses#IrClassifierSymbol
isFunctionMarkerIrType
substitute$IrClassifierSymbol
isSuspendFunctionIrType
superTypesIrType
isAnnotationIrClassifierSymbol
isFunctionIrType
isKSuspendFunction%IrClassifierSymbol
isKSuspendFunction#IrType
isSuspendFunctionOrKFunction#IrType
getPrimitiveArrayElementTypeIrType
isFunctionIrType
isFunctionMarker"IrClassifierSymbol
isClassWithNameIrType
isThrowableIrType
isTypeParameterIrClassifierSymbol
isKFunctionIrType
isSuspendFunction-TypeParameterDescriptor
originalTypeParameter%ParameterDescriptor
varargElementTypeParameterDescriptor
isNoinline!ParameterDescriptor
isCrossinline%IrFactory
createIrClassFromDescriptor#ParameterDescriptor
indexOrMinusOne IrElement
deepCopySavingMetadata,IrOverridableDeclaration
resolveFakeOverrideIrSimpleFunction
targetIrDeclaration
isFakeOverride2IrOverridableDeclaration
resolveFakeOverrideOrNullIrFunction
target(Collection
collectAndFilterRealOverrides-IrOverridableDeclaration
collectRealOverridesIrDeclaration
isReal!IrElement
patchDeclarationParentsIrElement
deepCopyWithSymbols#IrFunction
isInlineArrayConstructorIrDeclaration
moduleIrClass
getPropertyDeclarationIrClassSymbol
getPropertySetter!IrConstructorCall
annotationClass!IrDeclaration
isAnonymousFunction*IrClassifierSymbol
isArrayOrPrimitiveArrayIrSymbol
hasEqualFqNameIrClassSymbol
getSimpleFunctionIrClass
getPropertySetterIrClassSymbol
getPropertyGetterIrDeclaration
fileEntryIrDeclaration
getNameWithAssertList
findAnnotation)IrDeclaration
isJvmInlineClassConstructorIrFunction
isReal$IrDeclaration
nameForIrSerializationIrDeclaration
isAnonymousObjectIrClass
packageFqNameIrFunction
isSuspendIrDeclaration
isGetter IrDeclarationParent
kotlinFqNameIrDeclaration
isSetterFile
lineStartOffsetsIrValueParameter
isVararg"IrOverridableDeclaration
overrides-IrConstructorCall
isAnnotationWithEqualFqNameIrDeclaration
isLocalIrDeclaration
isAccessor#IrDeclaration
isTopLevelDeclarationIrFileEntry
lineStartOffsetsIrClass
companionObjectIrConstructor
constructedClassIrDeclaration
isPropertyField,IrDeclarationParent
fqNameForIrSerialization$IrDeclarationWithName
hasEqualFqName IrDeclaration
isPropertyAccessorAppendable
appendIterableWith#DescriptorRenderer
renderDescriptorIrScript
renderScriptFqnIrFunction
safeReturnTypeIrType
renderTypeInnerIrVariable
renderVariableFlags!IrTypeArgument
renderTypeArgument$IrConstructor
renderConstructorFlagsIrFunction
renderTypeParameters(StringBuilder
renderAsAnnotationArgument&IrDeclaration
renderOriginIfNonTrivialIrClass
renderClassFqn&IrClassifierSymbol
renderClassifierFqnIrType
renderTypeWithRendererAny
runTrimEndIrVariable
normalizedName)IrTypeAbbreviation
renderTypeAbbreviation&IrTypeParameter
renderTypeParameterFqnIrField
renderFieldFlagsIrTypeArgument
renderIrElement
renderIrType
renderIrClass
renderClassFlags(IrDeclaration
renderDeclarationParentFqnIrProperty
renderPropertyFlags*IrSimpleFunction
renderSimpleFunctionFlags:IrLocalDelegatedProperty
renderLocalDelegatedPropertyFlagsIrFunction
renderReturnType*IrValueParameter
renderValueParameterFlagsIrSimpleType
render StringBuilder
renderAsAnnotation IrTypeAlias
renderTypeAliasFlags"IrDeclaration
renderDeclarationFqn$IrTypeAliasSymbol
renderTypeAliasFqnIrType
originalKotlinTypeIrTypeAbbreviationBuilder
build IrTypeAbbreviationImpl
toBuilderIrSimpleType
buildSimpleTypeIrSimpleType
toBuilder#IrSimpleTypeBuilder
buildSimpleType'IrSimpleTypeBuilder
buildTypeProjection#IrClassifierSymbol
isSubtypeOfClassIrType
isStrictSubtypeOfClass"IrType
toArrayOrPrimitiveArrayTypeIrType
isNullable)IrClassifierSymbol
isStrictSubtypeOfClassIrType
isSubtypeOfIrType
isBoxedArrayIrType
getArrayElementTypeIrClassifierSymbol
superTypesIrType
isSubtypeOfClassIrType
classifierOrNullIrType
withNullability%IrClassifierSymbol
typeWithParametersIrTypeArgument
typeOrNullIrSimpleType
withNullabilityIrType
makeNotNullIrType
classFqNameIrClassSymbol
createTypeIrType
removeAnnotationsIrType
mergeNullabilityIrType
makeNullableIrClassifierSymbol
defaultTypeIrTypeParameter
defaultTypeIrClassifierSymbol
typeWithIrClassSymbol
starProjectedType!IrClass
typeConstructorParametersIrType
classOrNullIrClass
typeWithIrType
classifierOrFailIrType
toKotlinTypeIrType
addAnnotationsIrType
getClass$IrClassifierSymbol
typeWithArgumentsOutputStream
useCodedOutputFile
useCodedInputIfExistsFile
ifExistsFile
useCodedOutputHash128Bits
toProtoStream4CrossModuleReferences
crossModuleReferencesHashForIC CodedInputStream
skipIdSignature"CodedOutputStream
writeIdSignature CodedInputStream
readIdSignature)KotlinSourceFileMutableMap
addNewMetadata"KotlinSourceFileMap
flatSignaturesKotlinSourceFileMap
toMutableIrType
isByteIrType
isCharIrType
isDoubleArrayIrType
isStringIrType
getUnsignedType$IrClassifierSymbol
isClassWithFqNameIrType
isUnsignedTypeIrType
isShortIrType
isUByteIrType
isIntIrType
isCollection(IrType
isDoubleOrFloatWithoutNullabilityIrType
isIterableIrType
isUIntIrType
isComparableIrType
isNullableAnyIrSimpleType
isMarkedNullableIrType
isStringClassTypeIrType
isUShortIrType
isDoubleIrType
isNullableClassTypeIrType
isCharSequenceIrType
isByteArrayIrType
isNullableArrayIrType
isSequenceIrType
isShortArrayIrType
isKClassIrType
isUnitIrType
isNullableContinuationIrType
isNothingIrType
isNullableNothingIrType
isArrayIrType
isLongArrayIrType
isIntArrayIrType
isNumberIrType
isKotlinResult!IrClass
hasFqNameEqualToSignatureIrType
isNullableStringIrType
isMarkedNullableIrType
isBooleanArrayIrType
isFloatArrayIrType
isCharArrayIrType
isFloatIrType
isNotNullClassTypeIrType
isPrimitiveTypeIrType
isLong!IrType
getPrimitiveOrUnsignedTypeIrType
isAnyIrType
isNullablePrimitiveTypeIrType
isClassTypeIrType
isULongIrType
isBooleanIrDeclaration
addRootsToIrField
isConstant.RuntimeDiagnostic
unreachableDeclarationMethodIrField
isKotlinPackageIrDeclaration
fqNameForDceDumpCollection
filterDescendantsOfIrClassSymbol
sizeConstructorIrClassSymbol
iteratorIrClassSymbol
subSequenceIrClassSymbol
sizePropertyIrClassSymbol
setFunctionIrClassSymbol
getFunctionIrClassSymbol
hashCodeFunctionIrClassSymbol
lengthPropertyHashMap
addMutableMap
addWithPredicateIrDeclaration
fileOrNullIrDeclaration
parentAsClass&IrOverridableDeclaration
allOverriddenIrClass
isSubclassOf!IrDeclarationParent
isFacadeClassIrClass
addFakeOverrides!IrDeclaration
isMemberOfOpenClassIrClassSymbol
constructors)IrAnnotationContainer
copyAnnotationsWhen6IrMemberAccessExpression
copyTypeAndValueArgumentsFromIrClass
fields/IrMemberAccessExpression
copyValueArgumentsFromIrStatementOrigin
isLambdaIrClass
isFinalClassBoolean
toIntIrExpression
remapReceiver&ReferenceSymbolTable
referenceFunction,IrFunction
isExternalOrInheritedFromExternalIrClass
isAnonymousObjectIrFunction
isHashCodeIrValueDeclaration
isImmutable&IrClass
addSimpleDelegatingConstructorIrFunction
isEquals2IrFunctionAccessExpression
getArgumentsWithSymbols3IrPossiblyExternalDeclaration
isEffectivelyExternal"IrFunction
copyValueParametersFromIrClass
isNonCompanionObjectIrExpression
isFalseConst.IrFunctionAccessExpression
typeSubstitutionMap,IrTypeParametersContainer
classIfConstructor&IrDeclarationContainer
findDeclarationIrDeclaration
isFileClass"IrFunction
explicitParametersCountIrProperty
originalPropertyIrClass
defaultConstructorIrBody
statements!IrExpression
coerceToUnitIfNeededIdSignature
isCompositeIrExpression
isIntegerConst.IrAttributeContainer
extractRelatedDeclarationIrFunction
isToStringIrDeclaration
file"IrFunction
addExplicitParametersToIrClass
isClassInt
previousOffset"IrTypeParameter
copySuperTypesFrom%IrMemberAccessExpression
getArguments(ReferenceSymbolTable
referenceClassifierIrFunction
isMethodOfAnyIrFunction
allParametersCount#IrExpression
implicitCastIfNeededTo"IrFunction
isValueClassTypedEqualsIrFunction
originalFunction(IrFunction
copyParameterDeclarationsFromIrFunction
allParametersIrConst
shallowCopy)IrDeclarationWithName
fqNameWhenAvailable%IrMemberAccessExpression
addArgumentsIrExpression
isNullConst0IrMutableAnnotationContainer
copyAnnotationsFromIrType
remapTypeParameters'IrValueParameter
createStubDefaultValueIrClass
isEnumClassIrClass
invokeFun/IrMemberAccessExpression
getTypeSubstitutionMapIrExpression
isTrueConstIrClass
isAnnotationClassIrClass
defaultTypeIrExpression
isTrivialIrClass
isObject0IrFunctionAccessExpression
passTypeArgumentsFromIrDeclaration
isTopLevel"IrConstructor
constructedClassType'IrTypeParameter
copyToWithoutSuperTypesIrClass
primaryConstructor#IrClass
createParameterDeclarations0IrTypeParametersContainer
copyTypeParametersFrom/IrFunctionAccessExpression
usesDefaultArguments&IrFactory
createSpecialAnnotationClass"IrFunction
isFakeOverriddenFromAnyIrElement
setDeclarationsParentIrExpression
shallowCopyIrFunction
explicitParametersIrClass
functionsIrSimpleFunction
isOverridableIrExpression
isConstantLikeIrClassSymbol
fields'IrFunctionReference
typeSubstitutionMap%IrAnnotationContainer
copyAnnotations&IrFunction
copyValueParametersToStatic*IrFunction
createDispatchReceiverParameter IrDeclaration
getPackageFragmentIrBuiltIns
getKFunctionType IrValueParameter
hasDefaultValue,IrTypeParametersContainer
copyTypeParametersIrClass
isInterfaceIrClassSymbol
functions.IrMemberAccessExpression
getAllArgumentsWithIr&IrDeclarationContainer
simpleFunctionsIrCall
isSuspend?IrClass
createImplicitParameterDeclarationWithWrappedDescriptorIrClass
constructors!IrDeclarationContainer
properties#IrDeclaration
isEffectivelyExternalIrConstructorCall
isAnnotationIrDeclaration
parentClassOrNullIrProperty
isSimplePropertyIrSymbol
isSuspendIrFunction
allTypeParameters;IrSimpleFunction
copyAndRenameConflictingTypeParametersFrom%IrFunction
copyReceiverParametersFromIrFunctionReference
isSuspendIrFunction
isOverridableIrClass
isEnumEntry#IrFunction
isOverridableOrOverridesIrDeclarationContainer
addChild+IrFactory
createStaticFunctionWithReceiversIrCall
isSuperToAny+IrMemberAccessExpression
getArgumentsWithIrIrElement
getPackageFragmentIrExpression
shallowCopyOrNull IrDeclaration
hasInterfaceParentIrDeclaration
isFromJavaIrValueParameter
copyTo5JsCommonBackendContext
getOrCreateGetInstanceFunction;JsCommonBackendContext
fixReferencesToConstructorParametersIrClass
enumEntriesIrEnumEntry
getTypeList
toArrayLiteralIrExpression
isGetUnit'JsIrBackendContext
buildInitDeclaration*JsIrBackendContext
buildFactoryDeclaration+JsIrBackendContext
buildConstructorDelegateIrTypeParameter
toIrType*JsIrBackendContext
buildConstructorFactoryIrElement
containsCallsTo%IrFunctionAccessExpression
isInitCallIrDeclaration
isInitFunction)IrDeclaration
isEs6ConstructorReplacement0IrDeclaration
isEs6PrimaryConstructorReplacement;IrFunctionAccessExpression
isSyntheticDelegatingReplacement&IrWhen
isBoxParameterDefaultResolutionIrValueParameter
isBoxParameterIrFunction
boxParameter+IrDeclaration
isSyntheticPrimaryConstructorIrProperty
isForLazyInit#IrDeclaration
correspondingProperty%IrDeclaration
isCompatibleDeclaration(IrDeclaration
propertyWithPersistentSafe IrDeclaration
withPersistentSafe+IrDeclaration
isPlacedInsideInternalPackage.IrFunction
shouldBeConvertedToPlainConstructorIrType
asStringIrClassifierSymbol
asStringIrTypeArgument
asStringIrType
getClassRefJsIrProgramFragment
serializeTo%IrValueDeclaration
isDispatchReceiver2JsCommonBackendContext
findUnitGetInstanceFunctionIrBody
prependFunctionCallIrFunction
hasStableJsName#IrFunction
isEqualsInheritedFromAnyIrDeclaration
hasStaticDispatch&IrDeclaration
isImportedFromModuleOnlyIrFunction
realOverrideTarget#IrSimpleFunction
realOverrideTarget6IrDeclarationWithName
getFqNameWithJsNameWhenAvailableIrClass
isInstantiableEnum(IrFunctionAccessExpression
typeArguments#IrReturn
isTheLastReturnStatementIn'IrFunctionSymbol
isUnitInstanceFunction#IrDeclaration
parentEnumClassOrNullJsIrBackendContext
getVoidIrDeclaration
isExportedMemberIrClass
jsConstructorReference!IrDeclaration
isExportedInterfaceIrDeclaration
isExportedClass)IrFunctionAccessExpression
valueArguments IrConstructor
hasStrictSignatureIrType
eraseGenerics#IrFunction
isLoweredSuspendFunction(IrValueParameter
isContinuationParameter'IrValueParameter
isStringArrayParameterNameTable
dump,IrDeclarationWithName
nameIfPropertyAccessorInt
toJsIdentifierChar
mangleIfNot+IrDeclarationWithName
getJsNameOrKotlinName&IrAnnotationContainer
isJsNativeSetter&IrAnnotationContainer
isJsExportIgnore3IrOverridableDeclaration
dfsOverridableJsNameOrNull&IrAnnotationContainer
isJsNativeInvokeIrAnnotationContainer
getJsName(IrAnnotationContainer
isJsImplicitExport7IrDeclarationWithName
getJsNameForOverriddenDeclaration$IrAnnotationContainer
getJsQualifier"IrConstructorCall
associatedObject#IrAnnotationContainer
getDeprecated!IrAnnotationContainer
getJsModule IrAnnotationContainer
isJsExport&IrAnnotationContainer
isJsNativeGetter-IrClass
isAssociatedObjectAnnotatedAnnotation#IrAnnotationContainer
hasJsPolyfill.IrConstructorCall
getSingleConstStringArgument#IrAnnotationContainer
isJsNonModuleIrDeclaration
isExportedIrFunction
isStaticMethod-IrOverridableDeclaration
isOverriddenExported.IrDeclaration
isExportedImplicitlyOrExplicitly)DescriptorVisibility
toExportedVisibility;IrOverridableDeclaration
isAllowedFakeOverriddenDeclarationList
joinTypeScriptFragmentsList
toTypeScriptList
toTypeScriptFragmentFile
copyModificationTimeFromFile
asSourceMappingUrlModuleKind
extension)IrSimpleFunction
overriddenStablePropertyJsStatement
isSimpleSuperCallJsFunction
escapedIfNeed*IrOverridableDeclaration
overridesExternal5IrSimpleFunction
isAccessorOfOverriddenStableProperty%IrSimpleFunction
shouldExportAccessor,JsStatement
renameImportedSymbolInternalName-CrossModuleTransitiveExport
getRequireEsmNameIrField
safeNameList
makeRefString
safeModuleNameIrModuleFragment
safeNameJsInvocation
pureIfPossibleIrClass
canUseSuperRef3IrDeclarationWithName
originalNameForUseInSourceMap IrElement
getStartSourceLocationJsNode
withSourceIrExpression
isVoidGetterIrExpression
checkOnNullabilityJsStatement
asBlockJsLocation
withEmbeddedSource*IrMemberAccessExpression
validWithNullArgsJsNode
addSourceInfoIfNeedIrFunction
varargParameterIndexIrWhen
toJsNodeMutableMap
addIfNotNullMutableMap
prefixOpMutableMap
withTranslatedArgsMutableMap
binOpMutableMap
postfixOp2GeneratorContext
generateModuleFragmentWithPluginsKotlinLibrary
jsOutputNameKotlinLibrary
moduleNameKtSourceFile
toIoFileOrNull*KotlinLibrary
serializedIrFileFingerprints$CompilerConfiguration
resolverLogger'KotlinLibrary
serializedKlibFingerprint Map
getUniqueNameForEachFragment(CompilerConfiguration
expectActualLinker)IncrementalDataProvider
getSerializedData-CompilerConfiguration
incrementalDataProviderKotlinLibrary
isBuiltIns0KlibMetadataIncrementalSerializer
serializeScope(String
parseSerializedIrFileFingerprintsList
joinIrFileFingerprints%JsCommonBackendContext
sourceMapsInfoBackendContext
lazy2/CompilerConfiguration
setupPartialLinkageConfig*CompilerConfiguration
partialLinkageConfig(IrStatement
isPartialLinkageRuntimeError#ClassLoweringPass
runOnFilesPostfix2DeclarationContainerLoweringPass
runOnFilesPostfixList
toCompilerPhase#NamedCompilerPhase
toModuleLoweringIrSymbol
isPublicApiIrElementBuilder
setSourceRange%IrGeneratorContextInterface
constTrue"IrGeneratorContextInterface
andand%IrGeneratorContextInterface
whenComma IrGeneratorContextInterface
oror&IrGeneratorContextInterface
constFalse"IrGeneratorContextInterface
eqeqeq&IrGeneratorContextInterface
equalsNull%IrGeneratorContextInterface
constNull&IrGeneratorContextInterface
elseBranchScope
createTmpVariableIrBuilderWithScope
irGetObjectIrBuilderWithScope
irWhile#IrGeneratorWithScope
buildStatementIrBuilderWithScope
irBreakIrBuilderWithScope
irDoWhileIrBuilderWithScope
irContinue%IrStatementsBuilder
createTmpVariableIrFunction
addValueParameterIrFactory
buildValueParameterIrFactory
buildPropertyIrFactory
addFunctionIrFactory
buildFunIrClass
addPropertyIrFactory
buildClassIrFactory
buildFunction*IrTypeParametersContainer
addTypeParameterIrProperty
addGetterIrProperty
addBackingFieldIrClass
addFieldIrFactory
buildTypeParameterIrFactory
buildFieldIrClass
addFunctionIrFactory
buildConstructorIrProperty
addDefaultGetterIrClass
addConstructorIrElement
transformChildrenVoidIrElement
acceptVoidIrElement
acceptChildrenVoid0IrDeclarationWithVisibility
isEffectivelyPrivate&IrSimpleFunction
isOverridableFunction"IrOverridableMember
typeParametersIrProperty
typeParameters%IrSimpleFunction
hasExtensionReceiver(IrSimpleFunction
compiledValueParameters+IrDeclaration
isOverridableMemberOrAccessorIrOverridableMember
returnType IrProperty
isOverridableProperty)IrOverridableMember
isPrivateToThisModule$IrSimpleFunction
hasDispatchReceiver"IrProperty
compiledValueParametersIrProperty
isInline4IrSimpleFunctionSymbol
toIrBasedDescriptorIfPossibleIrVariable
toIrBasedDescriptor&IrErrorDeclaration
toIrBasedDescriptorIrEnumEntry
toIrBasedDescriptorIrType
toIrBasedKotlinType#IrTypeParameter
toIrBasedDescriptor,IrScriptSymbol
toIrBasedDescriptorIfPossibleIrClass
toIrBasedDescriptorIrField
toIrBasedDescriptorIrTypeAlias
toIrBasedDescriptor+IrClassSymbol
toIrBasedDescriptorIfPossibleIrProperty
toIrBasedDescriptor!IrConstructor
toIrBasedDescriptor,IrLocalDelegatedProperty
toIrBasedDescriptor$IrValueParameter
toIrBasedDescriptor$IrSimpleFunction
toIrBasedDescriptor3IrTypeParameterSymbol
toIrBasedDescriptorIfPossibleIrFunction
toIrBasedDescriptor!IrDeclaration
toIrBasedDescriptor.IrPropertySymbol
toIrBasedDescriptorIfPossible.KotlinBuiltIns
kSuspendFunctionClassDescriptor&KotlinBuiltIns
functionClassDescriptor'KotlinBuiltIns
kFunctionClassDescriptor-KotlinBuiltIns
suspendFunctionClassDescriptorIrConst
copyWithOffsetsIrGetValue
copyWithOffsetsIrBlockImpl
addIfNotNullIrBlockImpl
inlineStatement&IrStatementOrigin
isAssignmentOperator0IrStatementOrigin
isAssignmentOperatorWithResult.IrMemberAccessExpression
copyTypeArgumentsFrom0IrMemberAccessExpression
checkArgumentSlotAccess$IrFunctionReference
isWithReflectionIrVararg
addElementIrExpression
implicitCastTo$IrMemberAccessExpression
putArgument IrDynamicOperatorExpression
left&IrFunctionAccessExpression
putArgumentIrExpression
isUnchanging&CallableDescriptor
typeParametersCountIrExpression
hasNoSideEffectsIrVararg
putElement!IrStringConcatenation
addArgument!IrDynamicOperatorExpression
right(IrContainerExpression
isTransparentScope+IrFunctionReference
isAdapterWithReflectionIrBuilderWithScope
irTryIrBuilderWithScope
irBoolean)IrBuilderWithScope
irRawFunctionReferenceIrBuilderWithScope
irIs.IrBuilderWithScope
irDelegatingConstructorCallIrBuilderWithScope
irIfThenElse IrBuilderWithScope
irReturnFalseIrBuilderWithScope
irGetField&IrBuilderWithScope
irFunctionReferenceIrBuilderWithScope
irReturnTrueIrBuilderWithScope
irSetIrBuilderWithScope
irStringIrBuilderWithScope
irLongIrBuilderWithScope
irSetField%IrBuilderWithScope
irEqeqeqWithoutBoxIrBuilderWithScope
irBlockIrBuilderWithScope
irWhen$IrBuilderWithScope
irIfThenMaybeElseIrBuilderWithScope
irNotIsIrBuilderWithScope
irCallOpIrBuilderWithScope
irCallIrBuilderWithScope
irVararg"IrBuilderWithScope
irConstantArrayIrBuilderWithScope
parent#IrBuilderWithScope
irGetObjectValueIrStatementsBuilder
irTemporaryIrBuilderWithScope
irReturnIrBuilderWithScope
irFalseIrBuilderWithScope
irBranchIrBuilderWithScope
irCharIrBuilderWithScope
irExprBodyIrBuilderWithScope
irEqeqeq&IrBuilderWithScope
irConstantPrimitiveIrBuilderWithScope
irIfNullIrBuilderWithScope
irEquals$IrBuilderWithScope
irCallConstructorIrBuilderWithScope
irConcatIrBuilderWithScope
irLetSIrBuilderWithScope
irNullIrBuilderWithScope
irComposite#IrBuilderWithScope
irConstantObjectIrBuilderWithScope
irNotEquals!IrBuilderWithScope
irImplicitCastIrBuilderWithScope
irElseBranchIrBuilderWithScope
irReturnUnitIrBuilderWithScope
irEqualsNullIrBuilderWithScope
irGet%IrBuilderWithScope
irIfThenReturnTrueIrBuilderWithScope
irTrueIrBuilderWithScope
irAsIrBuilderWithScope
irIntIrBuilderWithScope
irUnit"IrBuilderWithScope
irSamConversionIrBuilderWithScope
typeOperatorIrBuilderWithScope
irBlockBody&IrBuilderWithScope
irIfThenReturnFalse$IrBuilderWithScope
irReinterpretCast,IrConstructorCall
getConstructorTypeArgumentConstructorTypeArguments
setClassTypeArguments
set&IrConstructorCall
getClassTypeArgument$IrConstructorCall
outerClassReceiver'IrConstructorCall
getClassTypeArguments,IrConstructorCall
putConstructorTypeArgument&IrConstructorCall
putClassTypeArgument1IrConstructorCall
getConstructorTypeArgumentIndex-IrConstructorCall
getConstructorTypeArguments)IrConstructorCall
classTypeArgumentsCount
State
wrap	List
wrapClass
isObjectState
isSubtypeOfState
hasTheSameFieldsWithState
isUnitState
asIntState
mustBeHandledAsReflectionState
asStringOrNullState
checkNullabilityState
isNullState
asStringState
asBooleanOrNullState
asBooleanThrowable
handleUserException!CallStack
pushCompoundInstructionCallStack
pushSimpleInstructionIrBuiltIns
irIfNullThenElseAny
toIrConstList
wrapWithBlockBodyIrConst
toConstantValueIrFunction
createReturnIrFunction
createCallAny
toIrConstOrNullIrFunction
createGetField#IrConstructor
createConstructorCall&IrFunctionAccessExpression
shallowCopy IrBuiltIns
emptyArrayConstructor%IrValueDeclaration
createTempVariableIrBuiltIns
irEqualsIrClass
createGetObject!IrValueDeclaration
createGetValueIrBuiltIns
copyArgsIrFunction
checkCastAny
specialToStringForJsIrClass
isSubclassOfThrowableIrClass
internalName/IrValueParameter
getDefaultWithActualParameters%IrFunction
getArgsForMethodInvocation!IrFunction
getCapitalizedFileNameIrFunction
getExtensionReceiver/IrAnnotationContainer
getEvaluateIntrinsicValueIrEnumEntry
toState5IrFieldAccessExpression
accessesTopLevelOrObjectField!IrClass
getOriginalPropertyByNameState
unsignedToStringIrElement
fqNameList
toPrimitiveStateArray IrFunction
hasFunInterfaceParent:IrFunctionAccessExpression
getFunctionThatContainsDefaults)IrFunction
getFirstNonInterfaceOverridden/IrFunction
isAccessorOfPropertyWithBackingField1IrInterpreterEnvironment
loadReifiedTypeArgumentsIrType
getOnlyName(IrFunctionAccessExpression
getVarargType(IrExpression
isAccessToNotNullableObjectIrType
getTypeIfReified*IrFunctionAccessExpression
getThisReceiverIrConst
toPrimitiveIrFunction
getLastOverriddenIrFunction
getReceiverIrFunction
getDispatchReceiver IrExpression
handleAndDropResult!IrClass
inlineClassRepresentationIrFile
nameIrFunction
putDefault#IrAttributeContainer
copyAttributes*IrClass
multiFieldValueClassRepresentationIrClass
addAllIrFunction
getIrValueParameterIrFunction
isPropertyAccessorIrClass
addMemberIrFile
path IrFunction
isStaticMethodOfClassIrClass
isMultiFieldValueClassIrClass
isSingleFieldValueClassIrStatement
transformStatementIrElement
deepCopyWithVariablesJsNode
extractLocationContext
isWrapFunctionIterable
extractReachableRootsContext
isDefineModuleContext
isTopLevelFunction(Context
isObjectGetOwnPropertyDescriptorContext
isObjectFunctionContext
isKotlinFunctionContext
isDefineInlineFunctionContext
isAmdDefineJsLocation
asStringNode
extractRootsImplContext
isObjectDefinePropertyChar
isES5IdentifierStartFull Char
isNotAllowedSimpleCharacterChar
isAllowedSimpleDigit"Char
isAllowedLatinLetterOrSpecialString
isValidES5IdentifierChar
isES5IdentifierStartChar
isES5IdentifierPartJsFunction
getInnerFunctionJsNode
fixForwardNameReferences!JsExpression
canHaveOwnSideEffectJsExpression
canHaveSideEffect JsExpression
transitiveStaticRefCollection
toIdentitySetSequence
toIdentitySet1JsExpression
checkNoInvocationsWithRecursiveKType-JsInvocation
checkDoesNotCreateRecursiveKType"JsNode
collectBreakContinueTargetsJsFunction
collectFreeVariables JsFunction
collectLocalVariablesJsNode
withParentsOfNodesJsNode
matchList
toStatementJsFunction
markInlineArgumentsChar
isWhitespaceOrComma StringBuilder
encodeForSignature/DeclarationDescriptor
isLexicallyInsideJsNativeNode
toJsAstJsName
staticRefJsNameRef
psiElementJsExpression
isSuspend&JsInvocation
callableReferenceReceiverJsExpression
typeJsFunction
coroutineMetadataJsInvocation
descriptorJsFunction
forcedReturnVariableJsFunction
forceStateMachine!JsExpressionStatement
exportedTag JsInvocation
isCallableReferenceHasMetadata
sideEffectsJsExpression
primitiveKClassJsNameRef
isInlineJsReturn
returnTargetJsExpression
kTypeWithRecursionJsName
localAliasJsInvocation
typeCheckHasMetadata
syntheticJsExpression
kTypeJsExpression
rangeJsNameRef
coroutineControllerJsFunction
isLocalJsParameter
hasDefaultValueJsInvocation
isInlineJsName
descriptorJsNameRef
coroutineReceiverJsName
specialFunctionJsNameRef
coroutineResultJsNameRef
descriptorJsExpression
isUnitJsInvocation
psiElementJsInvocation
boxingJsExpression
localAliasJsFunction
functionDescriptorJsName
importedJsNameRef
isJsCallJsVars
exportedPackage$JsFunction
isInlineableCoroutineBodyJsImportedModule
getRequireNameString
underlineAsHtmlString
underlineAsText$KtExpression
isConstantStringLiteralDeclarationDescriptor
findPsi!JsExpressionStatement
targetBlockJsDebugger
targetBlock*JsExpressionStatement
targetExceptionBlockJsDebugger
targetExceptionBlock!JsExpressionStatement
finallyPathJsDebugger
finallyPathTextOutput
addSourceMappingURL0JsBlock
replaceSpecialReferencesInSimpleFunction!JsExpression
isStateMachineResult"CoroutineBlock
collectTargetBlocks JsBlock
replaceSpecialReferences#List
replaceCoroutineFlowStatementsJsNode
collectNodesToSplitJsBlock
replaceLocalVariables+List
collectVariablesSurvivingBetweenBlocksCoroutineBlock
buildGraph"CoroutineBlock
collectFinallyPathsTranslationContext
aliasedNameJsExpression
nameTranslationContext
toShortJsArrayAccess
index
JsNode
anyTranslationContext
toLongJsConditional
testJsFunction
addParameterJsWhile
test'TranslationContext
invokeKotlinFunctionJsExpression
toInvocationWithTranslationContext
toCharTranslationContext
toByteJsConditional
otherwiseJsFunction
addStatementJsConditional
thenJsArrayAccess
array*TranslationContext
getPrecisePrimitiveTypeKotlinType
refineType4TranslationContext
getPrimitiveNumericComparisonInfo:FunctionDescriptor
hasOrInheritsParametersWithDefaultValue1TranslationContext
getPrecisePrimitiveTypeNotNull(TranslationContext
createCoroutineResult3FunctionDescriptor
hasOwnParametersWithDefaultValueList
splitToRanges)TranslationContext
addFunctionToPrototype*TranslationContext
addAccessorsToPrototypePsiElement
finalElement*TranslationContext
addFunctionButNotExport JsFunction
fillCoroutineMetadataUsageTracker
isCaptured6ReceiverParameterDescriptor
getNameForCapturedReceiver)UsageTracker
getNameForCapturedDescriptor(UsageTracker
hasCapturedExceptContaining%JsProgramFragment
normalizeImportTagsTranslationContext
createKTypeMap
buildReifiedTypeArgs.TranslationContext
translateAndAliasParameters5FunctionDescriptor
requiresExtensionReceiverParameter/IncrementalResultsConsumer
reportInlineFunction+FunctionDescriptor
getCorrectTypeParameters$TranslationContext
translateFunction)TranslationContext
wrapWithInlineMetadataHasName
getStaticRef!JsFunction
withCapturedParametersJsFunction
addDeclaration)TranslationContext
addFunctionDeclarationKtProperty
hasCustomSetter;TranslationContext
translateDelegateOrInitializerExpressionKtProperty
hasCustomGetterBTranslationContext
contextWithPropertyMetadataCreationIntrinsifiedMutableList
addGetterAndSetterSpecialFunction
ref&TranslationContext
getDispatchReceiverTranslationContext
getCallInfo!TranslationContext
createCallInfo*VariableAccessInfo
translateVariableAccess&VariableAccessInfo
additionalArgumentsResolvedCall
expectedReceiversResolvedCall
getReturnType&FunctionCallInfo
translateFunctionCallArgumentsInfo
argsWithReceiverVariableAccessInfo
variableNameCallInfo
calleeOwnerVariableAccessInfo
isGetAccess,VariableAccessInfo
constructAccessExpression&VariableAccessInfo
getAccessDescriptorCallInfo
isNative%VariableAccessInfo
variableDescriptorCallInfo
isSuperInvocationFunctionCallInfo
functionName.VariableAccessInfo
getAccessDescriptorIfNeededCallInfo
callableDescriptor"FunctionCallInfo
hasSpreadOperatorKotlinType
getKotlinTypeFqName$EffectiveVisibility
shouldBeExportedKotlinType
getJetTypeFqNameKotlinType
nameIfStandardType&DeclarationDescriptor
shouldBeExported'DeclarationDescriptor
isCoroutineLambda%ClassDescriptor
hasPrimaryConstructorAccessTarget
accessedDescriptorTypePredicate
expectedTypeForKotlinType
getSubtypesPredicateKotlinType
render!Pseudocode
getPseudocodeByElement!KtElement
getContainingPseudocodeInstruction
sideEffectFreeLabel
isJumpToError%KtDeclaration
getContainingPseudocode0Instruction
getPrimaryDeclarationDescriptorIfAny&Pseudocode
getElementValuesRecursivelyInstruction
calcSideEffectFreeList
hasUnknown;KtDeclaration
getDeclarationDescriptorIncludingConstructors%KtElement
getElementParentDeclaration,KtElement
containingDeclarationForPseudocode'PropertyDescriptor
getEffectiveModalityPseudocode
traversePseudocode
getInstructionsPseudocode
getStartInstruction#Instruction
getPreviousInstructions$Pseudocode
traverseIncludingDeadCodeInstruction
isStartInstructionPseudocode
getLastInstructionInstruction
getNextInstructions"Pseudocode
collectDataFromSubgraphPseudocode
collectDataList
createInsertionPlaceCompanion
resolve!K2JSCompilerArguments
granularity%CompilerConfiguration
jvmModularRoots(CompilerConfiguration
addJavaSourceRoots'CompilerConfiguration
addJavaSourceRoot0CompilerConfiguration
configureJdkClasspathRoots'CompilerConfiguration
jvmClasspathRoots$CompilerConfiguration
addJvmSdkRoots)CompilerConfiguration
addJvmClasspathRoot%CompilerConfiguration
javaSourceRoots*CompilerConfiguration
addJvmClasspathRoots$MappedByteBuffer
contentsToByteArrayAMappedByteBuffer
parseZip64CentralDirectoryRecordsNumberAndOffsetByteBuffer
getUnsignedShort&MappedByteBuffer
parseCentralDirectory<MappedByteBuffer
parseCentralDirectoryRecordsNumberAndOffsetJavaModule
getJavaModuleRoots-CliJavaModuleFinder
computeDefaultRootModules!Project
setupHighestLanguageLevel"VirtualFileSystem
findExistingRootVirtualFileSystem
findJarRoot%MainFunctionDetector
findMainFunctionBuilder
withModuleModule
getSourceFilesModuleBuilder
configureFromArgs)ConflictingJvmDeclarationsData
higherThan*CompilerConfiguration
configureSourceRoots2KotlinCoreEnvironment
toAbstractProjectEnvironment2GlobalSearchScope
toAbstractProjectFileSearchScope/AbstractProjectFileSearchScope
asPsiSearchScope+CompilerConfiguration
applyModuleProperties5VirtualFile
registerPluginsSuppliedExtensionsIfNeededList
forAllFilesCompilerConfiguration
report&KotlinCoreEnvironment
messageCollectorString
toSafeFqNameString
toSafeTopLevelClassId*CompilerConfiguration
configureModuleChunk1BaseDiagnosticsCollector
reportToMessageCollector8CompilerConfiguration
configureContentRootsFromClassPath8CompilerConfiguration
configureJdkHomeFromSystemProperty&CompilerConfiguration
configureJdkHome+CompilerConfiguration
configureStandardLibs(CompilerConfiguration
configureKlibPaths1CompilerConfiguration
configureAdvancedJvmOptions+KotlinCoreEnvironment
registerJavacIfNeeded;CompilerConfiguration
handleClosureGenerationSchemeArgument#CompilerConfiguration
isModularJava-CompilerConfiguration
addModularRootIfNotNull6CompilerConfiguration
configureJavaModulesContentRoots&CompilerConfiguration
messageCollector/CompilerConfiguration
setupJvmSpecificArguments'IReplStageHistory
firstMismatchFiltered$IReplStageHistory
firstMismatchWhileIReplStageHistory
firstMismatchString
replAddLineBreakString
replUnescapeLineBreaks#String
replRemoveLineBreaksInTheEndClassLoader
listAllUrlsAsFilesString
replEscapeLineBreaksString
replNormalizeLineBreaksList
ensureNotEmptyString
replOutputAsXmlString
replInputAsXml#URLClassLoader
listLocalUrlsAsFiles(AggregatedReplStageState
adjustHistoriesError
locationStringIterable
findMappingOutputFileCollection
writeAllToOutputFileCollection
writeAll*CompilerConfiguration
addKotlinSourceRoots)CompilerConfiguration
addKotlinSourceRoot'CompilerConfiguration
kotlinSourceRootsFreezable
frozenFreezable
copyOfFreezable
unfrozen,K2JSCompilerArguments
isPreIrBackendDisabled(K2JSCompilerArguments
isIrBackendEnabled>CommonCompilerArguments
setApiVersionToLanguageVersionIfNeededAny
copyValueIfNeeded"String
isDeprecatedArgfileArgumentString
deprecatedArgfilePath"Reader
consumeRestOfQuotedSequenceString
isArgfileArgumentReader
parseNextArgumentFile
expandReader
nextCharString
argfilePathArgument
isAdvancedArgument
resolvedDelimiter+CommonToolArguments
updateInternalArgumentsString
toBooleanLenientMessageCollector
toLogger.CompilerConfiguration
buildHmppModuleStructure,MessageCollector
reportArgumentParseProblems3MessageCollector
reportUnsafeInternalArgumentsIfAny2CompilerConfiguration
setupLanguageVersionSettings*CompilerConfiguration
setupCommonArgumentsKotlinCoreEnvironment
destDirString
offsetOf)GroupedKtSources
fileBelongsToModuleForLt$GroupedKtSources
isCommonSourceForLtJsScope
findOwnNameOrDeclareIterable
toPluginDescriptorsIterable
toPluginSet%XMLStreamReader2
consumeChildElements$XMLStreamReader
consumeChildElements+FirCallableSymbol
getJvmMethodNameIfSpecialPathNode
createsCycleOutputStream
encodingWithInputStream
decodingWith"Base64
platformEncodeIntoByteArray Base64
platformEncodeToByteArrayBase64
platformCharsToBytesBase64
platformEncodeToStringPath
appendLinesPath
inputStream
URI
toPath$SecureDirectoryStream
enterDirectoryPath
setOwner"Path
invariantSeparatorsPathStringPath
setPosixFilePermissionsPath
writeBytesPath
isHiddenPath
bufferedWriterPath
appendText!Path
createSymbolicLinkPointingToPath
readerPath
deleteExistingPath
createDirectoriesPath
readBytesPath
relativeToPath
notExistsPath
pathStringPath
setLastModifiedTimePath
relativeToOrSelf!SecureDirectoryStream
isDirectoryPath
copyToPath
setAttributePath
bufferedReaderPath
deleteRecursivelyImplPath
readAttributesPath
relativeToOrNullPath
isSameFileAsPath
absolutePath
isDirectoryPath
absolutePathStringPath
appendBytesPath
useLinesPath
readSymbolicLinkPath
getAttributeOnErrorResult
toFileVisitResultPath
forEachLinePath
existsPath
isRegularFilePath
createLinkPointingToPath
moveToPath
isSymbolicLinkPath
copyToRecursivelyPath
isReadablePath
fileSizePath
divPath
readLinesPath
fileStorePath
writerPath
listDirectoryEntriesPath
createDirectoryPath
forEachDirectoryEntryPath
createFilePath
fileAttributesViewPath
deleteIfExistsPath
getLastModifiedTime	Path
name	Path
walkPath
nameWithoutExtensionPath
getOwnerPath
extensionPath
fileAttributesViewOrNullPath
getPosixFilePermissionsPath
writeTextPath
visitFileTreePath
writeLinesPath
useDirectoryEntriesPath
isExecutablePath
deleteRecursively"CopyActionResult
toFileVisitResultPath
outputStreamPath
invariantSeparatorsPathPath
createParentDirectoriesPath
isWritable!SecureDirectoryStream
handleEntryPath
readTextCloseable
closeFinallyCloseable
useFile
appendBytesFile
readLinesFile
bufferedWriterFile
relativeToOrSelfList
normalizeFile
rootNameFile
appendTextFile
invariantSeparatorsPathFile
outputStreamFile
readTextFile
writeBytes	File
walkFile
isRootedFile
readerFile
relativeToOrNullFile
endsWithFile
nameWithoutExtensionFile
relativeToFile
toComponentsFile
writerFile
copyTo	File
rootFile
writeTextFile
extensionFile
useLinesFile
subPathFile
toRelativeStringFile
bufferedReaderFile
toRelativeStringOrNullFilePathComponents
normalizeFile
resolveSiblingFile
inputStreamFile
startsWithFile
deleteRecursivelyFile
resolveFile
walkBottomUpFile
normalizeString
getRootLengthFile
forEachLineFile
readBytesFile
printWriterFile
copyRecursivelyFile
walkTopDownFile
forEachBlockByteArray
inputStreamInputStream
bufferedReaderOutputStream
writerOutputStream
bufferedString
byteInputStreamInputStream
readBytesInputStream
copyToBufferedInputStream
iteratorInputStream
readerInputStream
bufferedOutputStream
bufferedWriterURL
readBytesReader
copyToReader
useLinesURL
readTextReader
bufferedReader
forEachLineString
readerBufferedReader
lineSequenceWriter
bufferedReader
readTextReader
readLinesOptional
toListOptional
toSetOptional
toCollectionOptional
getOrDefaultOptional
asSequenceOptional
getOrNullOptional
getOrElseMatchGroupCollection
getChar
lowercaseCharChar
uppercaseCharInt
digitToChar	Char
plusChar
isJavaIdentifierStartChar
isDefinedChar
isTitleCaseChar
isJavaIdentifierPartChar
isUpperCaseChar
isSurrogateChar
directionalityChar
digitToIntChar
isLetterOrDigitChar
toTitleCaseChar
titlecaseChar
isLetterChar
toLowerCaseChar
isDigitChar
categoryChar
isWhitespaceChar
isLowerCaseChar
lowercaseChar
digitToIntOrNullChar
isIdentifierIgnorableChar
equalsChar
isISOControlChar
uppercaseChar
titlecaseCharChar
toUpperCaseChar
isHighSurrogateChar
isLowSurrogate	Float
ulpDouble
IEEEremFloat
withSignFloat
roundToIntInt
signFloat
nextUpDouble
nextDownFloat
absoluteValue
Float
signDouble
signDouble
roundToLong	Long
sign	Float
powFloat
roundToLongDouble
roundToIntDouble
withSignDouble
nextUpDouble
absoluteValueFloat
nextDownFloat
nextTowards
Double
powInt
absoluteValueLong
absoluteValue
Double
ulpDouble
nextTowardsFloat
IEEEremAutoCloseable
closeFinallyIterable
toIntMatcher
findNextMatcher
matchEntireMatchResult
rangeKClass
javaObjectTypeKClass
javaAny
javaClassKClass
javaClassKClass
javaPrimitiveTypeClass
kotlinAnnotation
annotationClassArray
isArrayOfEnum
declaringJavaClassUByte
toHexStringString
hexToUShortUShort
toHexStringULong
toHexStringString
hexToULongString
hexToUByteString
hexToUIntString
hexToUByteArrayUInt
toHexStringUByteArray
toHexStringString
toUIntULong
toStringString
toUByteOrNullString
toUShortString
toUByteString
toULongUInt
toStringUByte
toStringString
toUIntOrNullString
toUShortOrNullString
toULongOrNullUShort
toStringChar
titlecaseImplShort
toHexStringString
hexToIntInt
toHexStringString
hexToByteString
checkNewLineAtString
decimalFromHexDigitAtString
hexToByteArrayString
hexToShortString
hexToLongImplLong
toHexStringImplString
checkHexLengthString
checkContainsAtByte
toHexStringString
hexToLongLong
toHexStringDuration
toKotlinDurationDuration
toJavaDurationDurationUnit
shortNameTimeUnit
toDurationUnitDurationUnit
toTimeUnitTimeSource
measureTimedValueMonotonic
measureTimeTimeSource
measureTimeMonotonic
measureTimedValueLong
isSaturatedRandom
asKotlinRandomRandom
asJavaRandomRandom
nextLongInt
takeUpperBitsRandom
nextIntRandom
nextUBytesRandom
nextUIntRandom
nextULongULongRange
containsUByte
coerceInULongProgression
lastULong
coerceAtMostULong
coerceInUIntProgression
reversedUByte
untilUIntProgression
firstULong
until
UInt
untilULongRange
randomOrNullUByte
coerceAtMostUShort
coerceAtMostUIntProgression
lastOrNullUIntRange
containsUIntRange
randomOrNullUByte
downToUIntProgression
stepUByte
coerceAtLeastUIntRange
randomULongProgression
reversedUShort
coerceInULongProgression
lastOrNullULongProgression
firstUShort
downToUShort
coerceAtLeastUInt
downToUInt
coerceInUIntProgression
lastULongRange
randomUIntProgression
firstOrNullULong
downToUShort
untilUInt
coerceAtLeastULongProgression
stepUInt
coerceAtMostULong
coerceAtLeastULongProgression
firstOrNullLong
nanosecondsLong
microseconds	Int
timesString
substringWhileDouble
hoursInt
secondsString
skipWhileInt
daysInt
toDurationInt
minutesLong
minutesDouble
toDurationDouble
minutesDouble
microsecondsDouble
daysDouble
secondsLong
secondsLong
milliseconds	Long
daysDouble
nanoseconds
Long
hoursInt
millisecondsInt
microsecondsLong
toDuration	Int
hoursDouble
millisecondsInt
nanosecondsDouble
timesByte
coerceAtLeastShort
coerceAtLeastDouble
toShortExactOrNullDouble
toLongExactOrNullDouble
coerceInCharRange
contains
Char
untilLongProgression
lastOrNullIntProgression
firstOrNullComparable
coerceAtLeastByte
coerceAtMostShort
coerceInDouble
rangeToInt
toShortExactOrNullInt
coerceAtMostFloat
toIntExactOrNullLong
toByteExactOrNullCharProgression
firstOrNullCharRange
randomLong
coerceInDouble
coerceAtLeast
Int
downToCharProgression
lastCharProgression
stepLongProgression
lastLongProgression
firstOrNullFloat
toLongExactOrNullLong
downToLongProgression
stepLongProgression
reversedFloat
rangeUntilDouble
coerceAtMostInt
coerceAtLeastInt
toByteExactOrNullLong
toShortExactOrNullCharRange
randomOrNullByte
downToCharProgression
firstFloat
toByteExactOrNullLongProgression
firstIntProgression
reversedIntProgression
last
Byte
untilShort
untilFloat
coerceInIntProgression
lastOrNullIntProgression
stepIntRange
randomOrNullComparable
coerceAtMostComparable
rangeToIntRange
randomCharProgression
lastOrNullFloat
toShortExactOrNullShort
coerceAtMostShort
downToFloat
coerceAtLeastIntRange
containsFloat
coerceAtMostDouble
toByteExactOrNullComparable
rangeUntilDouble
toIntExactOrNullCharProgression
reversedLong
coerceAtMost	Int
untilLongRange
randomOrNullIntProgression
firstLongRange
containsChar
downToLongRange
randomShort
toByteExactOrNullByte
coerceInFloat
rangeTo
Long
untilLong
coerceAtLeastComparable
coerceInDouble
rangeUntilInt
coerceInLong
toIntExactOrNullCharSequence
chunkedCharSequence
toCollectionString
decapitalizeString
codePointAtCharSequence
indexOfAnyByteArray
decodeToStringCharSequence
groupByToCharSequence
mapIndexedToCharSequence
singleOrNullCharSequence
onEachString
trimEndString
takeCharSequence
replaceFirstString
equalsCharSequence
filterIndexedToCharSequence
associateByToCharSequence
dropWhileString
toCharArrayCompanion
formatCharSequence
randomCharSequence
onEachIndexedCharSequence
lastStringBuilder
appendlnCharSequence
endsWithString
replaceFirstCharSequence
anyCharSequence
maxWithCharSequence
elementAtOrNullString
substringAfterLastString
encodeToByteArrayCharSequence
associateWithCharSequence
flatMapToString
replaceAfterLastCharSequence
withIndexCharSequence
maxOfOrNullAppendable
appendlnCharSequence
toHashSetString
replaceIndentCharSequence
regionMatchesImplString
toFloatOrNullAppendable
appendCharSequence
substringCharSequence
groupByCharSequence
minWithOrNullCharSequence
getOrNullString
removeRangeCharSequence
maxOrNullString
replaceRangeCharSequence
filterNotToCharSequence
firstOrNullCharSequence
lastIndexOfAnyCharArray
concatToStringStringBuilder
deleteAtAppendable
appendElementCharSequence
runningReduceString
removeSuffixCharSequence
mapNotNullCharSequence
firstNotNullOfInt
toStringString
toBigIntegerCharSequence
isNotBlankCharSequence
maxWithOrNullCharSequence
isEmptyList
reindentCharSequence
lineSequenceStringBuilder
insertRangeString
partitionCharSequence
sumByCharSequence
removeSuffix CharSequence
mapIndexedNotNullToCharSequence
minOfOrNullString
dropWhileCharSequence
toMutableListString
replaceString
substringAfterCharSequence
linesCharSequence
mapIndexedNotNullCharSequence
iteratorString
internString
orEmptyCharSequence
isNullOrBlankCharSequence
hasSurrogatePairAtCharSequence
associateToString
toDoubleOrNullString
sliceCharSequence
singleCharSequence
scanString
toIntCharSequence
maxOfWithCharSequence
ifBlankString
codePointCountCharSequence
noneCharSequence
sliceCharSequence
minWithCharSequence
sumOfString
dropLastCharSequence
foldRightIndexedCharSequence
flatMapIndexedCharSequence
split!CharSequence
firstNotNullOfOrNullCharSequence
lastIndexString
toLongString
toByteCharSequence
randomOrNullCharSequence
trimCharSequence
findLastAnyOfString
toPatternString
replaceFirstCharCharSequence
associateCharSequence
reversedCharSequence
toSetCharSequence
sumByDoubleCharSequence
reduceRightCharSequence
foldRightCharSequence
reduceIndexedCharSequence
maxOfCharSequence
matchesCharSequence
trimEndShort
toStringString
filterIndexedStringBuilder
setCharSequence
mapCharSequence
foldCharSequence
findAnyOfCharSequence
flatMapString
toBigIntegerOrNullCharSequence
findString
toLowerCaseString
offsetByCodePointsCharSequence
padStartStringBuilder
toCharArrayString
nativeIndexOfString
trimMarginCharSequence
rangesDelimitedByCharSequence
toSortedSetCharSequence
dropCharSequence
maxStringBuilder
clearCharSequence
replaceCharSequence
minOfWithCharSequence
removePrefixCharSequence
subSequenceStringBuilder
appendLineCharSequence
dropLastWhileCharSequence
lastIndexOfCharSequence
reduceRightOrNull(CharSequence
contentEqualsIgnoreCaseImplString
prependIndent CharSequence
reduceIndexedOrNullCharSequence
minOrNullCharSequence
getOrElseCharSequence
foldIndexedString
nativeLastIndexOfString
endsWithString
trimIndentCharSequence
indexOfString
toUpperCaseString
startsWithCharSequence
zipCharSequence
padEndString
replaceBeforeCharSequence
filterIndexedCharSequence
commonSuffixWithCharSequence
maxOfWithOrNullCharSequence
minByCharSequence
elementAtOrElseCharSequence
runningFoldString
filterNotString
uppercaseString
toFloatString
dropLastWhileCharSequence
windowedSequenceString
padEndString
capitalizeString
contentEqualsString
toShortCharSequence
reduceRightIndexedString
reversedCharSequence
associateWithToCharSequence
contentEqualsImplCharSequence
startsWithCharSequence
toListCharSequence
minOfWithOrNullCharSequence
dropLastString
padStartLong
toStringCharSequence
maxByStringBuilder
deleteRangeString
trimStartCharSequence
takeWhilePattern
toRegexString
takeLastCharSequence
flatMapIndexedToCharSequence
isBlankCharSequence
forEachCharSequence
repeat Companion
CASE_INSENSITIVE_ORDERCharSequence
takeCharSequence
isNotEmptyCharSequence
associateByCharSequence
scanIndexed!CharSequence
runningReduceIndexedCharSequence
minCharSequence
takeLastWhileCharSequence
runningFoldIndexedString
replaceBeforeLastString
substringBeforeString
formatString
toBooleanCharSequence
findLastStringBuilder
setRangeString
subSequenceCharSequence
mapNotNullToString
lowercaseCharSequence
commonPrefixWithString
toDoubleCharSequence
reduceOrNullCharSequence
removeSurroundingCharSequence
groupingByCharSequence
filterString
takeLastWhileCharSequence
regionMatchesString
replaceIndentByMarginCharSequence
firstCharSequence
filterToCharSequence
elementAtString
trimString
takeWhileCharSequence
maxByOrNullString
toIntOrNullAppendable
appendRangeCharSequence
asIterableCharSequence
splitToSequenceCharSequence
windowedString
toBooleanStrictOrNullCharSequence
ifEmptyCharSequence
containsString
codePointBeforeString
removeSurroundingString
dropString
replaceAfterString
regionMatchesString
toByteOrNullCharSequence
allCharSequence
chunkedSequenceString
toShortOrNullCharSequence
removeRangeString
toLongOrNullCharSequence
filterNotString
toRegexCharSequence
asSequenceCharSequence
isNullOrEmptyString
toByteArrayString
toBigDecimalCharSequence
contentEqualsCharSequence
indexOfLastCharSequence
minByOrNullCharSequence
countCharSequence
forEachIndexedCharSequence
lastOrNullCharSequence
replaceRange%CharSequence
reduceRightIndexedOrNullCharSequence
mapToString
toBigDecimalOrNullCharSequence
takeLastStringBuilder
appendString
indentWidthString
toBooleanStrictCharSequence
reduceString
substringBeforeLastCharSequence
zipWithNextCharSequence
indicesCharSequence
partitionStringBuilder
appendRangeCharSequence
trimStartCharSequence
minOfCharSequence
mapIndexedString
filterString
removePrefixByte
toStringString
compareToCharSequence
indexOfFirstKClass
qualifiedOrSimpleNameKType
computeJavaTypeKTypeProjection
javaTypeCopySpec
filterPluginAware
applyVcsMapping
fromObjectFactory
mapPropertyContentFilterable
filterProject
containerProject
task ObjectConfigurationAction
pluginExtensionContainer
createExtensionContainer
configureExtensionContainer
addBuildCacheConfiguration
remote1BuildCacheConfiguration
registerBuildCacheService#ComponentMetadataHandler
withModuleComponentMetadataHandler
allDependencyHandler
project,PolymorphicDomainObjectContainer
maybeCreate'PolymorphicDomainObjectContainer
create)PolymorphicDomainObjectContainer
registerTaskContainer
createTaskContainer
register$NamedDomainObjectCollection
withType!NamedDomainObjectCollection
namedLongStream
toListDoubleStream
asSequenceDoubleStream
toListStream
asSequenceLongStream
asSequenceSequence
asStreamStream
toListIntStream
asSequenceIntStream
toListLock
withLockReentrantReadWriteLock
readReentrantReadWriteLock
writeThreadLocal
getOrSet-BaseContinuationImpl
getStackTraceElementImpl/BaseContinuationImpl
getDebugMetadataAnnotation3BaseContinuationImpl
getSpilledVariableFieldMappingBaseContinuationImpl
getLabelElement
getPolymorphicElementElement
minusPolymorphicKeyMap
getOrDefaultSuspendFunction1
startCoroutine Continuation
resumeWithException SuspendFunction1
createCoroutine SuspendFunction0
createCoroutineContinuation
resumeSuspendFunction0
startCoroutine)SuspendFunction0
wrapWithContinuationImpl-SuspendFunction0
createCoroutineUnintercepted4SuspendFunction2
startCoroutineUninterceptedOrReturn4SuspendFunction1
startCoroutineUninterceptedOrReturnContinuation
intercepted-SuspendFunction1
createCoroutineUnintercepted)SuspendFunction2
wrapWithContinuationImpl4SuspendFunction0
startCoroutineUninterceptedOrReturn)SuspendFunction1
wrapWithContinuationImplArray
resetAtArray
subarrayContentEqualsArray
subarrayContentHashCodeArray
resetRangeArray
subarrayContentToString!Array
copyOfUninitializedElementsTimer
scheduleAtFixedRateTimer
scheduleSequence
associateToSequence
maxOfWithOrNullSequence
flattenIterator
asSequenceSequence
dropSequence
filterSequence
firstOrNullSequence
elementAtOrElseSequence
scanIndexedSequence
firstNotNullOfSequence
asIterableSequence
averageSequence
indexOfFirstSequence
plusSequence
runningReduceSequence
toSortedSetSequence
minOfOrNullSequence
filterIndexedToSequence
anySequence
minusSequence
sortedWithSequence
maxSequence
forEachIndexedSequence
minOfWithOrNullSequence
minOfSequence
filterIndexedSequence
countSequence
lastSequence
filterNotNullToSequence
associateWithSequence
toHashSetSequence
filterNotToSequence
dropWhileSequence
groupByToSequence
associateByToSequence
onEachIndexedSequence
associateSequence
mapIndexedNotNullSequence
firstSequence
groupBySequence
chunkedSequence
sortedDescendingSequence
forEachSequence
singleSequence
findLastSequence
maxOrNullSequence
minByOrNullSequence
flatMapSequence
takeSequence
maxWithSequence
onEachSequence
shuffledSequence
associateBySequence
flatMapToSequence
minOfWithSequence
runningFoldSequence
mapIndexedNotNullToSequence
reduceOrNullSequence
filterToSequence
mapSequence
mapIndexedToSequence
reduceSequence
ifEmptySequence
minWithSequence
reduceIndexedSequence
plusElementSequence
toMutableSetSequence
scanSequence
sumOfSequence
toMutableListSequence
singleOrNullSequence
partitionSequence
allSequence
joinToSequence
maxBySequence
maxWithOrNullSequence
maxOfWithSequence
distinctSequence
requireNoNullsSequence
containsSequence
lastIndexOfSequence
filterIsInstanceToSequence
mapIndexedSequence
minBySequence
filterNotSequence
toCollectionSequence
firstNotNullOfOrNullSequence
elementAtSequence
asSequenceSequence
sortedSequence
flatMapIndexedToSequence
reduceIndexedOrNullSequence
mapToSequence
sumByDoubleSequence
filterNotNullSequence
toSetSequence
filterIsInstanceEnumeration
asSequenceSequence
orEmptySequence
lastOrNullSequence
runningFoldIndexedSequence
sortedBySequence
minSequence
toListSequence
noneSequence
maxOfSequence
sumBySequence
elementAtOrNullSequence
maxOfOrNullSequence
sortedByDescendingSequence
associateWithToSequence
findSequence
foldIndexedSequence
joinToStringSequence
unzipSequence
zipWithNextSequence
minWithOrNullSequence
zipSequence
withIndexSequence
windowedSequence
flatMapIndexedSequence
takeWhileSequence
runningReduceIndexedSequence
distinctBySequence
mapNotNullToSequence
mapNotNullSequence
groupingBySequence
indexOfLastSequence
foldSequence
minOrNullSequence
constrainOnceSequence
indexOfSequence
maxByOrNullSequence
minusElementMutableMap
getValueMutableMap
setValueGrouping
foldToGrouping
aggregateGrouping
eachCountGrouping
reduceToGrouping
eachCountToGrouping
reduceGrouping
foldGrouping
aggregateToMutableMap
mapValuesInPlaceSet
minusElementSet
orEmptySet
optimizeReadOnlySet	Set
minusSet
plusSet
plusElementCollection
toUIntArrayCollection
toUByteArrayCollection
toULongArrayCollection
toUShortArraySequence
windowedSequenceLazy
getValueLong
toUIntDouble
toUIntShort
toUInt
Int
toUIntFloat
toUIntByte
toUIntByte
inv	Short
invByte
xorByte
and	Short
and	Short
xorShort
orByte
orLong
toUByteShort
toUByteInt
toUByteByte
toUByteTriple
toListAny
toPair
toListShort
toULongLong
toULongByte
toULongInt
toULongDouble
toULongFloat
toULongLong
toUShortByte
toUShortShort
toUShortInt
toUShortAny
hashCodeKProperty0
isInitialized	Char
codeComparable
compareToResult
getOrElseResult
throwOnFailure
Result
mapAny
runCatchingResult
getOrDefaultResult
recoverCatchingResult
recoverResult
getOrThrowResult
mapCatchingResult
onFailureResult
onSuccessResult
foldThrowable
stackTraceThrowable
addSuppressedThrowable
suppressedExceptionsThrowable
stackTraceToStringThrowable
printStackTraceAny
runAny
letAny
takeUnless
Any
takeIfAny
also	Any
applyDeepRecursiveFunction
invokeComparator
thenComparatorComparator
reversedComparator
thenDescendingComparator
thenComparator
thenByDescendingComparator
thenByUShort
takeHighestOneBitULong
takeLowestOneBitUShort
takeLowestOneBitULong
rotateLeftUByte
countLeadingZeroBitsULong
countTrailingZeroBitsUShort
rotateRightULong
countLeadingZeroBitsUShort
countTrailingZeroBitsUByte
countTrailingZeroBitsUByte
countOneBitsUShort
countOneBitsULong
rotateRightUByte
rotateLeftUInt
rotateRightUByte
takeLowestOneBitUByte
rotateRightUInt
takeHighestOneBitUByte
takeHighestOneBitULong
takeHighestOneBitUInt
countOneBitsUInt
takeLowestOneBitULong
countOneBitsUInt
countLeadingZeroBitsUShort
rotateLeftUInt
rotateLeftUShort
countLeadingZeroBitsUInt
countTrailingZeroBits	Map
maxOfMap
noneMap
anyMap
maxByOrNullMap
mapNotNullTo	Map
minOfMap
minWithOrNullMap
withDefault
Map
onEachMap
getOrImplicitDefaultMutableMap
putAllMap
optimizeReadOnlyMapMap
containsMap
minOfOrNullMap
allMutableMap
minusAssignMap
plus	Map
toMapMap
asSequenceMap
flatMapToMap
filterToMap
toSingletonMapOrSelfArray
toMapConcurrentMap
getOrPutMap
toPropertiesMap
getOrElseMap
iteratorMap
getOrElseNullableMutableMap
iteratorEntry
toPairMap
maxWithOrNullMap
maxOfWithMap
maxOfWithOrNullMap
forEachMap
firstNotNullOfOrNullMap
filterNotToMap
toSortedMapMap
toSingletonMap
Map
filterMap
mapKeysToMap
filterValuesMap
toMutableMapMap
flatMapMap
filterNotMap
asIterable	Map
minByMap
isNotEmptyMap
minByOrNullMutableMap
setMap
filterKeys	Map
minusMap
orEmptySequence
toMapMap
mapKeysMap
minOfWithOrNullMap
maxOfOrNullMap
maxWithMutableMap
withDefaultMap
firstNotNullOfMap
mapNotNull
Map
toListMap
containsValueMutableMap
plusAssignMap
minWithEntry
component1Entry
component2Map
onEachIndexedIterable
toMapMap
minOfWith	Map
countMap
isNullOrEmptyMap
map	Map
mapToMap
getMap
containsKeyMap
mapValuesMutableMap
removeMap
mapValuesTo	Map
maxByKProperty1
getValueKMutableProperty0
setValueKProperty0
getValueKMutableProperty1
setValueInt
rotateLeftInt
countOneBitsByte
takeHighestOneBitBigInteger
timesShort
countTrailingZeroBitsInt
modShort
countLeadingZeroBitsInt
takeLowestOneBitBigInteger
rem	Float
modDouble
isInfiniteByte
countOneBitsLong
takeHighestOneBitCompanion
fromBitsBigDecimal
remShort
countOneBitsLong
rotateRightBigInteger
invFloat
toBigDecimalDouble
toRawBitsLong
takeLowestOneBitByte
countTrailingZeroBitsLong
rotateLeftBigDecimal
divBigInteger
divByte
mod
Double
modShort
rotateRightInt
countTrailingZeroBitsLong
toBigDecimalBigDecimal
plus	Short
modBigInteger
unaryMinusByte
floorDivFloat
isNaNBigInteger
plusBigDecimal
incInt
takeHighestOneBitInt
countLeadingZeroBitsLong
toBigIntegerLong
countTrailingZeroBitsDouble
isFiniteBigInteger
incByte
rotateLeftFloat
toRawBitsBigInteger
toBigDecimalInt
rotateRightBigInteger
shlShort
floorDivLong
countOneBitsInt
floorDivLong
floorDivFloat
isInfiniteShort
takeLowestOneBitBigInteger
xorDouble
isNaNLong
countLeadingZeroBitsByte
takeLowestOneBitBigInteger
orShort
rotateLeftBigDecimal
timesBigDecimal
unaryMinusBigDecimal
minusInt
toBigDecimalShort
takeHighestOneBitByte
countLeadingZeroBitsFloat
toBitsBigInteger
minusLong
modBigInteger
shrBigInteger
andDouble
toBigDecimalBigDecimal
decFloat
isFiniteInt
toBigIntegerByte
rotateRightBigInteger
decDouble
toBits"Severity
toCompilerMessageSeverityCollection
toByteArrayIterator
forEachList
lastOrNullIterable
mapNotNullList
elementAtOrElseIterable
anyIterable
minWithIterable
filterIsInstanceIterable
minOrNullIterable
maxOfOrNullList
orEmptyIterable
intersectList
reduceRightOrNullIterable
takeWhileIterable
sortedWithIterable
countIterable
maxByOrNullMutableList
removeFirstOrNullCollection
containsAllCollection
toShortArrayMutableCollection
removeIterable
scanList
takeLastCollection
plusElementIterable
filterIndexedIterable
reduceIndexedOrNull
List
sliceIterable
minOfWithIterable
lastOrNullIterable
runningFoldIndexedIterable
elementAtOrElseArray
copyToArrayOfAnyList
component5Iterable
associateList
indexOfLastIterable
minOfOrNullList
component3Iterable
singleIterable
reduceCollection
plusIterable
reduceOrNullIterable
mapIterable
minByOrNullEnumeration
iteratorIterable
filterIterable
associateWithToMutableCollection
plusAssignCollection
isNotEmptyIterable
takeIterable
flatMapIndexedList
getOrNullCollection
toMutableListList
binarySearchByIterable
maxOfWithMutableList
sortByIterable
indexOfIterable
partitionIterable
forEachIterable
filterNotNullIterable
mapIndexedList
lastIndexOfList
component1Iterable
minByIterable
indexOfFirstList
dropLastIterable
flatMapIterable
elementAtList
singleArray
asCollectionCollection
randomList
component2List
reduceRightIndexedOrNullIterable
plusList
requireNoNullsIterable
sortedDescendingMutableList
removeLastMutableList
fillIterable
groupByMutableIterable
removeAllIterable
asSequenceIterable
associateByToIterable
sortedMutableList
asReversedIterable
noneIterator
withIndexIterable
reduceIndexedIterable
plusElementIterator
iteratorIterable
associateWithIterable
filterIndexedToCollection
isNullOrEmptyMutableList
sortByDescendingIterable
subtractMutableList
sortDescendingList
findLastMutableCollection
minusAssignIterable
filterNotIterable
dropWhileIterable
dropIterable
firstOrNullIterable
minusIterable
groupingByList
reduceRightIndexedIterable
findIterable
firstNotNullOfOrNull%Iterable
convertToListIfNotCollectionIterable
foldIterable
collectionSizeOrNullIterable
zipIterable
asIterableIterable
toMutableSetList
asReversedMutableList
sortIterable
singleOrNullCollection
toLongArrayList
elementAtIterable
filterToIterable
runningReduceCollection
toFloatArrayIterable
scanIndexedIterable
elementAtOrNullIterable
groupByToMutableCollection
retainNothingList
reversePositionIndexList
reverseIteratorIndexIterable
chunkedIterable
indexOfLastIterable
associateToIterable
reversedList
dropLastWhileIterable
toListIterable
joinToStringIterable
toCollectionCollection
toBooleanArrayList
elementAtOrNullIterable
flatMapIndexedToIterable
onEachIndexedIterable
requireNoNullsList
indexOfMutableList
filterInPlaceList
firstOrNullIterable
containsIterable
unzipIterable
foldIndexed	List
lastIterable
runningReduceIndexedEnumeration
toList Iterable
collectionSizeOrDefaultIterable
averageCollection
toIntArrayIterable
maxOfIterable
toSortedSetIterable
maxWithOrNullIterable
withIndexIterable
lastIndexOfList
reverseElementIndexMutableIterable
filterInPlaceCollection
indicesIterable
filterIsInstanceToIterable
minOfMutableCollection
addAllIterable
toSetList
getOrElseIterable
mapIndexedToIterable
maxCollection
toDoubleArrayIterable
firstIterable
unionIterable
toMutableListMutableList
removeIterable
sortedByDescendingIterable
findLastIterable
flattenIterable
minWithOrNullIterable
sumByDoubleIterable
zipWithNextMutableList
removeLastOrNullMutableList
retainAllIterable
onEachIterable
maxByList
binarySearchIterable
lastIterable
minusElementIterable
mapToIterable
runningFoldIterable
sumOfMutableIterable
retainAllList
singleOrNullMutableList
reverseIterable
firstNotNullOfCollection
toCharArrayMutableCollection
retainAllMutableList
removeFirstIterable
minOfWithOrNullIterable
forEachIndexedCollection
countList
optimizeReadOnlyListIterable
mapIndexedNotNullToIterable
filterNotNullToList
reduceRightList
foldRightIndexedIterable
joinToIterable
allList
component4MutableList
sortWithMutableCollection
removeAll
List
firstIterable
toHashSetIterable
sortedByIterable
sumByIterable
mapNotNullToList
foldRightCollection
randomOrNullIterable
maxOfWithOrNullIterable
maxOrNullIterable
minIterable
windowedIterable
distinctIterable
maxWithIterable
associateByCollection
orEmptyIterable
filterNotToMutableList
removeAllIterable
distinctByIterable
flatMapToList
lastIndexList
takeLastWhileIterable
mapIndexedNotNullULongArray
maxOfOrNullUIntArray
reduceRightUByteArray
minByULongArray
minWithUIntArray
filterIndexedUByteArray
foldIndexedUIntArray
filterUShortArray
elementAtULongArray
forEachIndexedUShortArray
mapUShortArray
maxOfWithULongArray
associateWithUShortArray
forEachIndexedUIntArray
mapToUIntArray
mapUIntArray
indexOfLastUIntArray
sumByDoubleULongArray
dropWhileUIntArray
getOrNullULongArray
copyIntoUIntArray
dropLastWhileULongArray
contentHashCodeUIntArray
flatMapIndexedToUByteArray
copyOfUByteArray
reduceOrNull!UShortArray
sortedArrayDescendingULongArray
scanUShortArray
copyOfRangeUShortArray
contentToStringUIntArray
sumOfUIntArray
indexOfUByteArray
maxWithOrNullUByteArray
runningReduceIndexedUIntArray
lastOrNullULongArray
takeULongArray
toTypedArrayUShortArray
filterUShortArray
minOfULongArray
withIndexUShortArray
reverseUShortArray
takeULongArray
firstUIntArray
sortedArrayULongArray
maxOrNullULongArray
reduceUIntArray
findLastUByteArray
elementAtOrNullULongArray
getOrNullUShortArray
foldRightIndexedUIntArray
lastUShortArray
foldIndexedUByteArray
groupByUIntArray
reduceOrNullUIntArray
reduceULongArray
takeLastWhileUByteArray
zipUByteArray
onEachIndexedUIntArray
plusUShortArray
takeLastWhileUIntArray
mapIndexedToUShortArray
reduceUByteArray
findLastUByteArray
randomOrNullUByteArray
reduceUIntArray
mapIndexedArray
toULongArrayUByteArray
runningReduceUIntArray
withIndexUByteArray
firstUIntArray
toTypedArrayUByteArray
maxOfWithUShortArray
singleOrNull UShortArray
runningReduceIndexedShortArray
asUShortArrayUShortArray
firstUByteArray
filterIndexedULongArray
copyOfULongArray
findUIntArray
sortUShortArray
maxUByteArray
minByOrNullULongArray
foldRightIndexedUByteArray
indexOfULongArray
sliceArrayUShortArray
findLastUShortArray
filterIndexedUIntArray
maxOfWithOrNullUShortArray
forEachUIntArray
reduceIndexedArray
toUShortArrayUShortArray
takeLastUIntArray
runningReduceIndexedULongArray
singleOrNullIntArray
asUIntArrayUShortArray
getOrElseUShortArray
flatMapToUShortArray
findULongArray
lastOrNullUByteArray
noneUIntArray
forEachIndexedUByteArray
mapIndexedToUByteArray
plusUIntArray
zipUShortArray
associateWithUShortArray
toTypedArrayUIntArray
sortedDescendingUIntArray
scanIndexedUShortArray
contentHashCodeULongArray
maxOfWithOrNullUIntArray
copyOfULongArray
minOfWithUByteArray
copyOfRangeUByteArray
minOfUShortArray
component2UByteArray
minWithOrNullULongArray
indexOfFirstULongArray
maxWithUShortArray
reduceOrNullUIntArray
dropWhileUIntArray
minByUByteArray
foldRightIndexedUByteArray
minOfWithOrNullUIntArray
filterNot#ULongArray
reduceRightIndexedOrNullUByteArray
takeLastULongArray
mapIndexedArray
toUByteArrayUShortArray
minOfWithULongArray
reduceOrNullUShortArray
reduceIndexedUShortArray
foldRightUIntArray
toIntArrayUByteArray
allUShortArray
minWithUByteArray
mapToUShortArray
indexOfFirstULongArray
foldRightUShortArray
flatMapUIntArray
sliceUIntArray
onEachIndexedUByteArray
getOrElseUShortArray
maxWithUShortArray
firstOrNullUByteArray
sortedULongArray
minOrNullULongArray
dropLastWhileUShortArray
runningFoldIndexedUIntArray
copyIntoUShortArray
component4UShortArray
component5UIntArray
indexOfFirst UByteArray
sortedArrayDescendingULongArray
onEachULongArray
contentEqualsULongArray
sumByDoubleULongArray
associateWithToUShortArray
component3UByteArray
sumOfUByteArray
component5ULongArray
anyUByteArray
associateWithToUShortArray
onEachUByteArray
minOrNullUShortArray
sliceArrayUByteArray
lastIndexULongArray
reduceRightUShortArray
maxOfOrNullUShortArray
minByUIntArray
associateWithULongArray
lastIndexOfUIntArray
firstOrNullUShortArray
countUShortArray
minByOrNullUByteArray
minOfWithULongArray
asLongArrayUIntArray
getOrElseUShortArray
getOrNullUIntArray
minOrNullUIntArray
shuffleUIntArray
firstULongArray
minOfWithOrNullUShortArray
sliceUShortArray
dropWhileUByteArray
maxByOrNullULongArray
reduceRightIndexedUIntArray
groupByULongArray
copyOfRangeUByteArray
foldULongArray
maxWithOrNullUByteArray
dropUShortArray
groupByToArray
toUIntArrayUIntArray
minOfWithOrNullUByteArray
copyIntoULongArray
runningFoldUByteArray
associateWithULongArray
runningFoldIndexedUIntArray
noneUIntArray
minOfWithUIntArray
binarySearchUIntArray
foldUIntArray
dropUIntArray
associateWithToByteArray
asUByteArrayUByteArray
lastULongArray
flatMapIndexedUShortArray
zipUIntArray
random#UByteArray
reduceRightIndexedOrNullUByteArray
foldRightShortArray
toUShortArrayULongArray
reduceIndexedOrNullUIntArray
lastIndexULongArray
sortUIntArray
asListUIntArray
foldRightUIntArray
takeLastUShortArray
sortUIntArray
reduceRightOrNullUByteArray
shuffleULongArray
filterULongArray
filterNotUShortArray
maxOfWithOrNullUByteArray
maxUShortArray
onEachIndexedUShortArray
mapIndexedUByteArray
reduceIndexedOrNullUShortArray
reduceRightOrNullUShortArray
takeWhileUShortArray
contentEqualsUByteArray
minOfOrNullULongArray
minOfULongArray
filterToULongArray
fillUIntArray
maxOfUByteArray
sortedArrayULongArray
sortedArrayUIntArray
reduceRightIndexedUByteArray
maxOfByteArray
toUByteArrayUShortArray
minOfWithOrNullULongArray
sumULongArray
sortDescendingUIntArray
sliceArrayUByteArray
singleOrNullUByteArray
reversed$UShortArray
reduceRightIndexedOrNullUIntArray
randomOrNull ULongArray
sortedArrayDescendingUShortArray
sortedDescendingUShortArray
mapIndexedToUByteArray
mapUShortArray
fillUShortArray
associateWithToULongArray
maxByOrNullUByteArray
sliceULongArray
randomUShortArray
indicesUIntArray
maxULongArray
reduceIndexedUIntArray
minByOrNullUShortArray
scanIndexedULongArray
mapIndexedToULongArray
forEachULongArray
minULongArray
groupByToUIntArray
component4ULongArray
sliceULongArray
filterNotToUIntArray
minWithUByteArray
sumByDoubleULongArray
asListUIntArray
component3UIntArray
component5UShortArray
indexOfUIntArray
dropLastUShortArray
flatMapIndexedToUByteArray
minUByteArray
filterIndexedToULongArray
runningReduceIndexedUIntArray
component2UShortArray
mapToULongArray
indexOfUByteArray
asListUIntArray
foldIndexedUShortArray
singleUShortArray
noneUShortArray
asListULongArray
flatMapToULongArray
firstOrNullULongArray
onEachIndexedUByteArray
reduceRightULongArray
noneUByteArray
dropLastULongArray
binarySearchULongArray
filterIndexedToUByteArray
flatMapUByteArray
getOrNullUShortArray
indexOfLastUByteArray
sumUByteArray
minWithUByteArray
withIndexUByteArray
reverseUIntArray
contentEqualsUIntArray
anyUShortArray
withIndexUByteArray
contentEqualsUByteArray
reversedArrayULongArray
maxULongArray
allUShortArray
anyULongArray
runningReduceUShortArray
asShortArrayUShortArray
sumByDoubleUByteArray
indexOfLastUIntArray
asIntArrayUShortArray
maxOrNullUByteArray
sumByUShortArray
reduceRightUShortArray
binarySearchUByteArray
maxByULongArray
countUIntArray
reverseUShortArray
dropLastUShortArray
sumOfUIntArray
flatMapIndexedUShortArray
maxOfUIntArray
filterTo"UIntArray
reduceRightIndexedOrNullULongArray
foldULongArray
maxOfWithUIntArray
reversedUShortArray
foldULongArray
reversedUByteArray
fillULongArray
dropUByteArray
reduceRightOrNullUShortArray
flatMapIndexedUShortArray
plusUByteArray
filterToUIntArray
flatMapUShortArray
dropUShortArray
filterToUShortArray
runningFoldUShortArray
sortedUIntArray
minOfOrNullUByteArray
singleULongArray
component5ULongArray
indicesUShortArray
filterIndexedToUByteArray
lastOrNullUIntArray
reversedArrayUByteArray
mapIndexedUIntArray
onEachULongArray
plusULongArray
component4UIntArray
minOfUShortArray
sumByUShortArray
lastIndexOfUByteArray
sliceArrayULongArray
maxOfULongArray
sumByUByteArray
runningFoldUIntArray
reduceIndexedOrNullUShortArray
reversedArrayUIntArray
takeUShortArray
filterNotToULongArray
minOfOrNullUShortArray
sortDescendingUByteArray
sortDescendingULongArray
foldIndexedUIntArray
runningFoldIndexedUShortArray
lastIndexULongArray
flatMapIndexedToULongArray
lastIndexUByteArray
sortedDescendingUIntArray
sortDescendingUByteArray
lastIndexOfULongArray
zipUIntArray
singleUByteArray
filterNotUIntArray
fillUIntArray
foldRightIndexedULongArray
singleUByteArray
takeULongArray
sortedDescendingULongArray
maxByUByteArray
dropWhileUByteArray
countULongArray
dropLastUByteArray
elementAtOrElseUIntArray
minUIntArray
runningReduceUByteArray
maxOfWithOrNullULongArray
getOrElseUByteArray
component3UByteArray
flatMapIndexedToUShortArray
minULongArray
sumOfUShortArray
maxByOrNullUIntArray
maxByULongArray
indexOfLastUByteArray
component2UByteArray
takeWhileLongArray
asULongArrayUShortArray
sumUByteArray
scanUByteArray
takeLastWhileUByteArray
randomUByteArray
reduceIndexedUByteArray
filterNotToUShortArray
allUShortArray
lastOrNullUByteArray
component4UShortArray
copyIntoUIntArray
elementAtULongArray
contentToStringUShortArray
maxByULongArray
component1UByteArray
component1ULongArray
takeWhileUIntArray
allULongArray
filterIndexedUShortArray
randomUByteArray
onEachULongArray
toLongArrayUByteArray
flatMapIndexedUIntArray
minWithOrNullUByteArray
runningFoldIndexedUByteArray
findUIntArray
maxOfWithULongArray
sortedULongArray
component3ULongArray
elementAtOrElseUShortArray
filterNotUShortArray
component1IntArray
toUIntArrayULongArray
reduceRightOrNullUByteArray
toTypedArrayUByteArray
toByteArrayULongArray
scanIndexedULongArray
findLastUShortArray
groupByUByteArray
reduceRightIndexedUByteArray
forEachUShortArray
reduceRightIndexedUIntArray
maxWithUByteArray
sortUShortArray
minWithOrNullUIntArray
maxOfOrNullUIntArray
sortedArrayDescendingUByteArray
elementAtUByteArray
asByteArrayUByteArray
forEachIndexedUIntArray
sumULongArray
mapToUIntArray
filterNotToUShortArray
runningReduceUIntArray
countUIntArray
takeWhileUByteArray
maxOfOrNullUByteArray
maxWithULongArray
mapUShortArray
shuffleUShortArray
minOfOrNullUIntArray
forEachUShortArray
maxWithOrNullUIntArray
contentToStringULongArray
elementAtOrNullUShortArray
dropLastWhileUShortArray
copyOfUIntArray
contentHashCodeULongArray
randomOrNullULongArray
minWithOrNullUIntArray
maxOrNullUIntArray
sortedUShortArray
lastULongArray
minByOrNullULongArray
shuffleUIntArray
findUByteArray
filterUIntArray
maxWithOrNullUIntArray
filterIndexedToUIntArray
indicesUShortArray
minOrNullULongArray
flatMapUShortArray
randomOrNullUShortArray
elementAtOrElseUIntArray
elementAtOrElseUIntArray
takeLastWhileUShortArray
elementAtOrNullUByteArray
indexOfFirstULongArray
lastUIntArray
singleOrNullUShortArray
reduceIndexedOrNullLongArray
toULongArrayUByteArray
firstOrNullUIntArray
maxByOrNullUByteArray
indicesUIntArray
sumByUByteArray
binarySearchULongArray
component2UIntArray
copyOfRangeUByteArray
maxOrNullUIntArray
groupByToUByteArray
flatMapToUByteArray
scanIndexedUIntArray
runningFoldUShortArray
reversedUIntArray
component1ULongArray
reversedArrayUIntArray
elementAtOrNullULongArray
takeLastUByteArray
dropLastWhileUByteArray
contentToStringUByteArray
anyUIntArray
flatMapToUByteArray
contentHashCodeUShortArray
sortedArrayULongArray
elementAtUIntArray
scanUShortArray
toShortArrayULongArray
minByUIntArray
lastIndexOfUShortArray
scanULongArray
reverseULongArray
groupByUByteArray
groupByToDoubleArray
indexOfFirstByteArray
associateToFloatArray
forEachLongArray
associateArray
maxWithByteArray
sumOfFloatArray
reversedShortArray
maxByByteArray
toMutableListShortArray
maxOrNullArray
orEmptyBooleanArray
dropByteArray
scanIndexedByteArray
maxWithOrNullCharArray
isEmptyDoubleArray
getOrElseBooleanArray
foldByteArray
asSequenceFloatArray
runningFoldIndexedShortArray
sliceIntArray
partitionLongArray
intersectShortArray
joinToArray
copyOfRangeImplByteArray
binarySearchCharArray
binarySearchByteArray
mapToDoubleArray
sortArray
copyOfRangeFloatArray
filterToIntArray
firstArray
copyIntoArray
firstNotNullOfOrNullArray
elementAtOrNullIntArray
minByOrNullDoubleArray
maxOfOrNullCharArray
lastIndexByteArray
joinToStringCharArray
joinToStringDoubleArray
subtractLongArray
minOfOrNullFloatArray
maxByOrNullLongArray
associateWithBooleanArray
foldIndexedByteArray
flatMapFloatArray
findShortArray
asListByteArray
getOrElseDoubleArray
filterIndexedToShortArray
asIterableByteArray
indexOfLastBooleanArray
takeLastWhileCharArray
minOrNullArray
reduceIndexedCharArray
maxByteArray
flatMapIndexedIntArray
contentEqualsCharArray
allCharArray
dropLastWhileArray
intersectBooleanArray
unionByteArray
partitionBooleanArray
maxOfWithOrNullLongArray
toSet
Array
noneShortArray
containsShortArray
sumByBooleanArray
randomIntArray
associateBy!Array
contentDeepToStringInternalIntArray
copyOfArray
firstLongArray
minOrNullIntArray
distinctIntArray
firstOrNullCharArray
associateLongArray
filterIndexedToArray
containsFloatArray
lastFloatArray
groupByTo
Array
dropLongArray
binarySearch
Array
foldLongArray
asIterableFloatArray
toTypedArrayBooleanArray
flatMapIntArray
flatMapFloatArray
contentToStringByteArray
component1ShortArray
flatMapIndexedDoubleArray
lastIndexOfLongArray
withIndexShortArray
takeCharArray
sumOfCharArray
toSortedSetBooleanArray
minOfOrNullLongArray
joinToStringFloatArray
subtractShortArray
fillByteArray
filterByteArray
filterNotBooleanArray
filterIndexedByteArray
onEachIndexedDoubleArray
runningFoldArray
contentHashCodeByteArray
sortedArrayFloatArray
singleOrNullIntArray
groupByToCharArray
runningReduceIndexedDoubleArray
minByteArray
sortDescendingCharArray
toMutableListArray
mapIndexedCharArray
minOfOrNullArray
lastIndex!BooleanArray
runningReduceIndexedByteArray
runningReduceShortArray
onEachIndexed	Array
anyIntArray
forEachIndexedBooleanArray
minOfCharArray
filterDoubleArray
flatMapIndexedToShortArray
sumIntArray
joinToStringFloatArray
toCollectionIntArray
sortedArrayDescendingByteArray
sumByArray
toBooleanArrayArray
takeLastWhileArray
joinToStringDoubleArray
takeIntArray
sortedArray
shuffleBooleanArray
reduceIndexedFloatArray
scanDoubleArray
forEachShortArray
runningReduceDoubleArray
reverseByteArray
component4BooleanArray
elementAtLongArray
plusFloatArray
averageArray
contentDeepHashCodeArray
binarySearchDoubleArray
flatMapLongArray
findLastShortArray
copyOfRangeImplCharArray
copyIntoFloatArray
reduceOrNullIntArray
binarySearchArray
withIndexArray
associateDoubleArray
minOfWithCharArray
intersectFloatArray
asListLongArray
lastIndexCharArray
filterNotToArray
forEachIndexedDoubleArray
joinToCharArray
indexOfLongArray
findArray
filterCharArray
foldRightIndexedFloatArray
groupByFloatArray
reverseBooleanArray
minByShortArray
countShortArray
toMutableListDoubleArray
associateByToByteArray
sortedWithByteArray
maxOfFloatArray
dropLastBooleanArray
dropWhileByteArray
sliceIntArray
copyIntoCharArray
foldIndexedByteArray
plusShortArray
mapToShortArray
associateWithFloatArray
toListShortArray
onEachBooleanArray
reduceDoubleArray
containsShortArray
indexOfFirstFloatArray
lastIndexDoubleArray
asListCharArray
minOfCharArray
runningReduceBooleanArray
distinctByteArray
elementAtOrElseShortArray
distinctIntArray
reverseByteArray
minByDoubleArray
copyOfRangeDoubleArray
fillShortArray
reverseDoubleArray
reduceIndexedOrNullIntArray
singleOrNullCharArray
contentToStringFloatArray
intersectByteArray
maxByByteArray
contentToStringBooleanArray
sumOfByteArray
toListFloatArray
filterNotLongArray
singleFloatArray
indicesLongArray
toSortedSetShortArray
sumOfArray
sortedDescendingByteArray
firstOrNullShortArray
randomFloatArray
flatMapDoubleArray
reversedArrayFloatArray
asIterableShortArray
maxOfArray
sortedArrayDescendingDoubleArray
maxOfWithOrNullCharArray
mapIndexedLongArray
filterBooleanArray
forEachIndexedShortArray
sortArray
minWithDoubleArray
forEachIndexedCharArray
reduceRightIndexedIntArray
countBooleanArray
filterIndexedToDoubleArray
minWithOrNullByteArray
component3CharArray
associateWithToLongArray
firstBooleanArray
joinToStringFloatArray
plusCharArray
minWithFloatArray
minOrNullArray
firstOrNullDoubleArray
anyBooleanArray
withIndexCharArray
unionArray
countBooleanArray
component5Array
toListBooleanArray
sortedByDescendingDoubleArray
filterIndexedBooleanArray
isNotEmptyBooleanArray
filterNotToByteArray
distinctShortArray
flatMapBooleanArray
getOrNull FloatArray
sortedArrayDescendingIntArray
indexOfFloatArray
minWithOrNullArray
maxByLongArray
sumByDoubleBooleanArray
foldRightShortArray
scanIndexedCharArray
forEachIndexedArray
sortWithCharArray
dropLongArray
isEmptyFloatArray
toSetByteArray
foldRightIndexedByteArray
minOfWithFloatArray
sortedArrayBooleanArray
scanArray
sortByDescendingIntArray
lastIndexDoubleArray
indicesCharArray
foldLongArray
runningFoldIndexedIntArray
minOfWithArray
filterIndexedLongArray
lastLongArray
sumBooleanArray
distinctByShortArray
indexOfLastBooleanArray
reverseByteArray
lastIndexByteArray
countDoubleArray
filterNotIntArray
copyOfRangeLongArray
reduceRightArray
minByOrNullBooleanArray
maxByOrNullCharArray
reversedArrayFloatArray
mapIndexedToBooleanArray
groupByLongArray
indexOfArray
sortedByteArray
groupByLongArray
sortedByFloatArray
reversedArrayFloatArray
minOfOrNullByteArray
minByOrNullBooleanArray
maxOfBooleanArray
zipCharArray
associateWithBooleanArray
anyShortArray
runningFoldIndexedArray
reduceRightIndexedCharArray
onEachArray
minOrNullIntArray
maxByByteArray
averageIntArray
asIterableFloatArray
associateToDoubleArray
dropLast
Array
scanFloatArray
toMutableSetByteArray
singleOrNullByteArray
sortedCharArray
singleShortArray
partitionBooleanArray
indexOfFirstFloatArray
associateWithLongArray
allFloatArray
elementAtOrElseCharArray
minDoubleArray
randomFloatArray
partitionArray
unzipCharArray
groupByToDoubleArray
minByFloatArray
foldRightIndexedByteArray
component2BooleanArray
contentEqualsShortArray
filterNotLongArray
elementAtOrNullIntArray
getOrElseByteArray
reverseLongArray
reversedArrayByteArray
dropLastWhileLongArray
partitionDoubleArray
partitionCharArray
noneShortArray
firstOrNullArray
minWithOrNullFloatArray
containsArray
sumByIntArray
sliceArrayBooleanArray
maxByByteArray
contentHashCodeShortArray
flatMapToCharArray
scanBooleanArray
takeWhileIntArray
toMutableListBooleanArray
sumByDoubleFloatArray
dropLastWhileIntArray
sortedArrayArray
onEachDoubleArray
minOrNullShortArray
zipBooleanArray
sliceFloatArray
maxOrNullBooleanArray
intersectFloatArray
withIndexDoubleArray
takeWhileBooleanArray
takeLastByteArray
sortedArrayDescendingLongArray
sortDescendingDoubleArray
dropCharArray
singleOrNullDoubleArray
maxLongArray
onEachDoubleArray
foldBooleanArray
lastBooleanArray
reduceRightDoubleArray
intersectIntArray
sortDescendingBooleanArray
indexOfLastIntArray
randomOrNullDoubleArray
associateShortArray
forEachIndexedByteArray
minOrNullFloatArray
filterIndexedLongArray
maxByOrNullArray
averageArray
associateByToArray
associateToLongArray
minWithCharArray
sortedDescendingBooleanArray
associateIntArray
associateFloatArray
forEachIndexedShortArray
groupByToDoubleArray
takeLastWhileIntArray
reduceRightIndexedShortArray
maxArray
groupByLongArray
sortedArrayIntArray
zipDoubleArray
sortedByDescendingBooleanArray
minOfWithOrNullDoubleArray
sumOfCharArray
reduceIndexedOrNullIntArray
lastIndexOfIntArray
averageBooleanArray
indicesFloatArray
countCharArray
foldRightShortArray
joinToStringLongArray
runningFoldBooleanArray
onEachByteArray
takeLastIntArray
sliceShortArray
mapIndexedFloatArray
binarySearchDoubleArray
sortedShortArray
plusShortArray
minByOrNullBooleanArray
copyOfShortArray
isNotEmptyCharArray
getOrElseIntArray
associateWithToShortArray
maxOfWithCharArray
flatMapIntArray
asSequenceCharArray
asIterableCharArray
flatMapIndexedToFloatArray
firstOrNullShortArray
minOfOrNullLongArray
getOrElseLongArray
distinctBooleanArray
runningFoldIndexedIntArray
takeShortArray
allArray
randomOrNullCharArray
fillBooleanArray
find#ShortArray
reduceRightIndexedOrNullShortArray
indicesDoubleArray
indexOfIntArray
intersectShortArray
reversedArrayLongArray
reverseByteArray
sortLongArray
reduceIndexedOrNullIntArray
onEachIndexedFloatArray
filterNotToShortArray
minBy
Array
findArray
flatMapToDoubleArray
firstOrNullCharArray
sortedByDescendingFloatArray
toMutableListDoubleArray
foldRightIndexedCharArray
sliceLongArray
takeCharArray
reversedIntArray
maxOrNullIntArray
containsArray
mapTo
Array
fillShortArray
lastOrNullLongArray
foldRightFloatArray
associateByCharArray
elementAtOrNullDoubleArray
copyOfLongArray
mapIndexedBooleanArray
toSortedSetLongArray
toListIntArray
runningReduceLongArray
reduceRightOrNullShortArray
asSequenceCharArray
elementAtByteArray
foldIndexedIntArray
mapFloatArray
noneCharArray
reduceRightOrNullArray
minOfWithArray
filterNotNullToArray
forEachFloatArray
reduceLongArray
reduceRightIndexedCharArray
getOrNullIntArray
mapToShortArray
groupByDoubleArray
runningFoldIndexedShortArray
toHashSetArray
toFloatArrayShortArray
elementAtOrElseArray
mapIndexedNotNullToFloatArray
minArray
filterIndexedToFloatArray
findLastShortArray
minOfIntArray
takeWhileByteArray
indicesByteArray
containsIntArray
groupByByteArray
isEmptyCharArray
indexOfFirstIntArray
lastIntArray
forEachCharArray
dropWhileIntArray
toSortedSetIntArray
flatMapIndexedToLongArray
asSequenceCharArray
contentHashCodeLongArray
dropShortArray
associateByFloatArray
mapIndexedIntArray
component3ShortArray
filterToLongArray
indexOfFirstIntArray
minWithOrNullShortArray
filterShortArray
averageIntArray
sumByDoubleArray
runningFoldIndexedBooleanArray
contains"LongArray
reduceRightIndexedOrNullByteArray
sortedByDescendingShortArray
reduceRightIndexedLongArray
reduceOrNullFloatArray
minOfWithShortArray
filterNotToByteArray
forEachIndexedIntArray
sortedDescendingFloatArray
associateIntArray
filterIndexedByteArray
takeArray
filterIsInstanceToIntArray
reduceRightIntArray
copyOfRangeImplLongArray
lastOrNullByteArray
dropWhileIntArray
sortDoubleArray
sumByDoubleArray
singleIntArray
minOfWithOrNullBooleanArray
lastOrNullBooleanArray
component4ShortArray
reduceArray
singleOrNullArray
reversedArray
maxOfWithCharArray
maxByLongArray
foldBooleanArray
isEmptyCharArray
flatMapIndexedBooleanArray
mapToByteArray
maxByOrNullLongArray
unionByteArray
sliceArrayCharArray
lastOrNullFloatArray
reduceRightOrNull%BooleanArray
reduceRightIndexedOrNullShortArray
distinctByFloatArray
indexOfLastDoubleArray
filterToBooleanArray
reversedArrayFloatArray
sumByShortArray
minOfWithLongArray
zipIntArray
anyDoubleArray
groupByToBooleanArray
sortedWithFloatArray
asSequenceArray
joinToLongArray
copyIntoBooleanArray
toHashSetFloatArray
onEachIndexedByteArray
unionBooleanArray
groupByToFloatArray
associateByToArray
toHashSetArray
asListLongArray
dropWhileLongArray
randomOrNullCharArray
sortedWithArray
filterNotToIntArray
reduceIndexedFloatArray
shuffleIntArray
toHashSetShortArray
elementAtOrNullLongArray
maxBooleanArray
filterIntArray
singleLongArray
minOfWithOrNullBooleanArray
maxWithOrNullIntArray
reduceLongArray
copyOfRangeFloatArray
minOfFloatArray
zipFloatArray
takeWhileLongArray
scanIndexedArray
reverseBooleanArray
noneDoubleArray
maxOrNullCharArray
reverseByteArray
sumByteArray
singleCharArray
isNotEmptyBooleanArray
asListCharArray
elementAtOrElseDoubleArray
toHashSetDoubleArray
reduceShortArray
foldShortArray
dropCharArray
containsBooleanArray
firstOrNullDoubleArray
withIndexLongArray
reversedFloatArray
maxOfWithOrNullLongArray
maxOfWithOrNullBooleanArray
joinToCharArray
lastIndexOfArray
associateByIntArray
associateByToCharArray
associateToLongArray
getOrNullByteArray
randomOrNullArray
contentEqualsByteArray
maxOfOrNullShortArray
takeWhileArray
plusElementLongArray
isNotEmptyArray
foldRightIndexedCharArray
mapToShortArray
anyLongArray
maxWithOrNullLongArray
component5FloatArray
minOfWithOrNullBooleanArray
copyOfRangeImplFloatArray
associateWithToIntArray
allShortArray
contentToStringLongArray
copyOfRangeImplIntArray
indexOfFirstFloatArray
fillArray
sliceArray
maxOrNullIntArray
indexOfLastShortArray
copyOfCharArray
distinctArray
filterIsInstanceIntArray
dropLastWhileLongArray
foldIndexedFloatArray
reduceIndexedFloatArray
indexOfFloatArray
randomOrNullArray
flatMapBooleanArray
dropLastFloatArray
runningReduceIndexedDoubleArray
minOfArray
groupByToCharArray
runningFoldIndexedArray
onEachIndexedShortArray
component5BooleanArray
flatMapIndexedToCharArray
maxWithOrNullShortArray
toMutableSet
Array
lastShortArray
contentHashCodeBooleanArray
maxOfWithCharArray
takeLastWhileShortArray
associateToArray
lastIndexOfShortArray
mapIndexedToArray
sumOfLongArray
distinctByShortArray
filterIndexedToFloatArray
copyIntoByteArray
dropLastShortArray
subtractByteArray
indexOfFirstArray
takeWhileShortArray
sortedByteArray
runningFoldIndexedFloatArray
anyIntArray
sumOfLongArray
flatMapByteArray
toStringBooleanArray
component2LongArray
maxByBooleanArray
flatMapToArray
distinctIntArray
minByteArray
firstDoubleArray
flatMapIndexedArray
sortByBooleanArray
associateWithToLongArray
elementAt	Array
sumByteArray
runningFoldCharArray
toListShortArray
takeLastWhileLongArray
sortCharArray
plusDoubleArray
sumByDoubleIntArray
findIntArray
maxOfWithIntArray
component1ShortArray
maxWithOrNullDoubleArray
toSortedSetLongArray
forEachIndexedArray
toMutableListDoubleArray
sliceArrayLongArray
maxOfOrNullByteArray
copyOfRangeFloatArray
singleShortArray
isEmptyArray
contentDeepToStringImplLongArray
associateWithToDoubleArray
reduceRightDoubleArray
maxByOrNullCharArray
filterIndexedByteArray
randomFloatArray
maxOfOrNullIntArray
elementAtBooleanArray
randomOrNullBooleanArray
reversedIntArray
maxOfWithOrNullCharArray
asSequenceBooleanArray
getOrElseIntArray
runningReduceIndexedIntArray
maxWithByteArray
filterIndexedToCharArray
randomDoubleArray
lastLongArray
takeWhileArray
associateWithIntArray
unionCharArray
indicesIntArray
dropLastDoubleArray
findShortArray
singleShortArray
lastIndexOfArray
minOfByteArray
reversedLongArray
randomShortArray
maxWithCharArray
groupByLongArray
associateByByteArray
toSortedSetLongArray
firstOrNullBooleanArray
reduceOrNullFloatArray
flatMapToShortArray
runningFoldIntArray
reversedArrayFloatArray
sortArray
randomCharArray
takeWhileShortArray
reduceRightShortArray
takeLastFloatArray
component3Array
contentDeepEqualsFloatArray
copyOfRangeImplDoubleArray
sortedWithShortArray
toCollectionShortArray
sumByDoubleLongArray
mapToArray
unionByteArray
maxOfWithIntArray
shuffleFloatArray
toHashSetFloatArray
sortedArray
reduceRightIndexedOrNullDoubleArray
component4ByteArray
dropFloatArray
component1LongArray
minByOrNullFloatArray
sumOfShortArray
withIndexLongArray
takeLastWhileFloatArray
component5ShortArray
singleOrNullIntArray
onEachBooleanArray
asIterableBooleanArray
filterTo"ByteArray
reduceRightIndexedOrNullDoubleArray
component2BooleanArray
minWithLongArray
sumOfByteArray
elementAtDoubleArray
sortedArrayArray
asSequenceFloatArray
flatMapIndexedByteArray
foldLongArray
groupByCharArray
distinctByLongArray
indicesLongArray
sortedArrayDescending#FloatArray
reduceRightIndexedOrNullDoubleArray
foldRightLongArray
averageBooleanArray
filterNotBooleanArray
maxWithByteArray
maxWithIntArray
filterNotToDoubleArray
sumShortArray
minWithOrNullIntArray
flatMapToByteArray
subtractDoubleArray
shuffleCharArray
component1CharArray
associateByLongArray
noneByteArray
noneDoubleArray
singleOrNullShortArray
findLastFloatArray
runningFoldCharArray
reduceFloatArray
mapToFloatArray
contentHashCode!IntArray
reduceRightIndexedOrNull DoubleArray
runningReduceIndexedArray
indexOfFirstFloatArray
maxOfWithDoubleArray
toTypedArrayLongArray
maxOrNullShortArray
associateIntArray
reversedCharArray
component2BooleanArray
firstByteArray
sumByDoubleDoubleArray
maxOfWithByteArray
filterIndexedShortArray
reduceIndexedOrNullIntArray
minOfShortArray
maxOfOrNullShortArray
toTypedArrayFloatArray
minWithByteArray
reduceShortArray
maxOfWithOrNullArray
contentToStringArray
distinctByIntArray
foldRightIndexedBooleanArray
mapIndexedToShortArray
filterIndexedLongArray
minByShortArray
sortedWithByteArray
reduceRightBooleanArray
allShortArray
shuffleShortArray
reduceOrNullIntArray
minOfOrNullDoubleArray
indexOfLastFloatArray
allArray
minOfOrNullByteArray
mapIndexedArray
dropLastWhileShortArray
component4ShortArray
minArray
component1DoubleArray
flatMapToArray
flatMapIndexedToDoubleArray
sortedDescendingFloatArray
lastIndexOfFloatArray
component4DoubleArray
minWithCharArray
filterIndexedToIntArray
foldIndexedByteArray
toSetArray
sliceArrayArray
mapNotNullToBooleanArray
associateWithIntArray
minByBooleanArray
partitionFloatArray
copyOfRangeDoubleArray
component3Collection
toTypedArrayFloatArray
reduceRightIndexedShortArray
foldRightIndexedDoubleArray
sortedByCharArray
zipFloatArray
contentEqualsIntArray
minWithByteArray
minWithOrNullLongArray
anyArray
minByArray
flattenFloatArray
sortedWithArray
reduceArray
component5Array
foldIndexedFloatArray
distinctArray
toByteArrayArray
reversedArrayFloatArray
copyOfLongArray
sortedWithDoubleArray
maxByArray
groupingByCharArray
flatMapToArray
reduceIndexedOrNullCharArray
maxOrNullDoubleArray
scanIndexedShortArray
toSetDoubleArray
sliceBooleanArray
toSetByteArray
takeLastWhileFloatArray
sortedByDescendingByteArray
reduceIndexedCharArray
dropLastByteArray
runningReduceIndexedFloatArray
reduceRightBooleanArray
fillArray
contentDeepToStringFloatArray
runningReduceShortArray
reduceRightOrNullDoubleArray
maxWithOrNullCharArray
indexOfLastFloatArray
maxArray
mapNotNullCharArray
anyCharArray
findLastByteArray
getOrNullDoubleArray
plusShortArray
component2DoubleArray
findLastShortArray
component1FloatArray
indexOfFirstLongArray
joinToLongArray
asListBooleanArray
toMutableSetDoubleArray
takeLastCharArray
sliceArrayByteArray
minOfOrNullBooleanArray
contentHashCodeCharArray
minOfWithOrNullShortArray
findIntArray
foldRightLongArray
component1
Array
plusShortArray
component3Array
component2CharArray
forEachCharArray
minWithOrNullShortArray
minOrNullBooleanArray
maxOfOrNullArray
dropLastFloatArray
maxOfCharArray
component5ByteArray
associateByToLongArray
minShortArray
runningReduceIndexedCharArray
component3LongArray
contentToStringDoubleArray
dropLastWhileLongArray
sliceDoubleArray
toCollectionIntArray
dropWhileBooleanArray
toMutableListBooleanArray
sliceArrayBooleanArray
plusCharArray
maxOfWithDoubleArray
countShortArray
dropLastLongArray
component3Array
sortedArrayWith ShortArray
sortedArrayDescendingDoubleArray
binarySearchArray
sortDescendingIntArray
filterIntArray
associateWithIntArray
mapIndexedIntArray
component4FloatArray
sliceBooleanArray
toCollectionLongArray
minOfCharArray
firstLongArray
forEachArray
component4ByteArray
copyOf	Array
maxLongArray
associateToArray
filterNotDoubleArray
joinToStringCharArray
minByOrNullLongArray
maxOfIntArray
takeLastCharArray
copyOfRangeImplLongArray
filterNotFloatArray
distinctByShortArray
sortedByDoubleArray
scanFloatArray
minByBooleanArray
elementAtOrNullArray
toShortArrayDoubleArray
runningReduceByteArray
foldRightArray
requireNoNullsArray
findLastBooleanArray
associateByByteArray
reduceOrNullLongArray
minWithOrNullArray
isNullOrEmptyArray
takeLastFloatArray
sortDescendingArray
reduceRightOrNullDoubleArray
foldIndexedLongArray
containsCharArray
toHashSetDoubleArray
contentToStringBooleanArray
subtractIntArray
distinctByArray
copyOfArray
runningReduceArray
sortedByDescendingDoubleArray
contentHashCodeByteArray
scanFloatArray
mapCharArray
scanIndexedCharArray
takeFloatArray
reduceIndexedOrNullLongArray
foldRightIndexedCharArray
takeLastDoubleArray
filterBooleanArray
runningFoldByteArray
mapLongArray
filterIndexedArray
toIntArrayCharArray
component4IntArray
toListBooleanArray
shuffleByteArray
shuffleBooleanArray
copyOfRangeIntArray
noneBooleanArray
toTypedArrayArray
elementAtOrElseFloatArray
sumByDoubleCharArray
firstOrNullByteArray
filterToIntArray
findLastArray
flatMapIndexedShortArray
scanDoubleArray
randomOrNull BooleanArray
reduceIndexedOrNullBooleanArray
minOfWithArray
isEmptyFloatArray
toSortedSetBooleanArray
elementAtOrElseCharArray
maxOfWithOrNullByteArray
maxLongArray
mapIndexedToDoubleArray
maxWithFloatArray
maxWithIntArray
component5LongArray
elementAtOrElseIntArray
getOrNullIntArray
withIndexArray
component3FloatArray
sortedByDoubleArray
reduceRightOrNullCharArray
randomOrNullShortArray
randomOrNullBooleanArray
onEachIndexedBooleanArray
lastIndexOfFloatArray
elementAtOrNullArray
indexOfLastIntArray
maxByOrNullIntArray
dropIntArray
foldArray
indexOfLongArray
component2LongArray
toMutableSetDoubleArray
component1BooleanArray
foldRightIndexedShortArray
intersectBooleanArray
lastIndexCharArray
joinToDoubleArray
elementAtOrNullIntArray
sumByLongArray
associateByToCharArray
toMutableSetByteArray
findDoubleArray
onEachArray
contentDeepEqualsImplIntArray
maxWithOrNullIntArray
scan	Array
mapFloatArray
lastOrNullBooleanArray
reduceRightOrNullArray
mapIndexedNotNullByteArray
toCollectionCharArray
sortedBooleanArray
reduceRightIndexedDoubleArray
mapToIntArray
elementAtOrElseArray
elementAtByteArray
anyByteArray
mapIndexedToArray
toLongArrayDoubleArray
copyOfRangeImplShortArray
contentEqualsDoubleArray
zipIntArray
runningFoldIndexedCharArray
minOfWithLongArray
dropLastCharArray
mapIndexedToDoubleArray
toSetByteArray
intersectFloatArray
takeLastArray
partitionArray
filterNotNullCharArray
shuffleShortArray
reversedArray
sumByDoubleIntArray
runningFoldBooleanArray
contentToStringFloatArray
joinToStringByteArray
takeWhileDoubleArray
reduceIndexedByteArray
lastShortArray
flatMapIndexedToCharArray
subtractArray
maxOfFloatArray
dropWhileLongArray
singleOrNullArray
reduceOrNullByteArray
copyOfRangeImplIntArray
isEmptyIntArray
reduceOrNullLongArray
onEachIndexedFloatArray
isNotEmptyArray
indicesShortArray
foldIndexedByteArray
elementAtOrNullCharArray
toCollectionByteArray
asIterableBooleanArray
findLastDoubleArray
mapIndexedShortArray
binarySearchDoubleArray
filterNotToShortArray
toListByteArray
reversedArrayLongArray
toTypedArrayLongArray
contentHashCodeBooleanArray
copyIntoIntArray
sortedByLongArray
lastIndexOfByteArray
onEachIntArray
maxByteArray
toTypedArrayArray
runningReduceIndexedDoubleArray
lastOrNullArray
scanIndexedBooleanArray
countFloatArray
filterIndexedToCharArray
maxWithIntArray
flatMapIndexedDoubleArray
associateByCharArray
countLongArray
runningReduceFloatArray
sliceArrayByteArray
contentEqualsArray
firstNotNullOfByteArray
associate
Array
sortShortArray
sortedDescendingLongArray
copyOfIntArray
maxOfOrNullIntArray
asListShortArray
forEachBooleanArray
indexOfByteArray
indexOfByteArray
sortedBy
Array
takeShortArray
associateWithToShortArray
copyOfRangeLongArray
filterToDoubleArray
mapShortArray
minOfWithOrNullShortArray
firstCharArray
lastDoubleArray
copyIntoFloatArray
getOrNullLongArray
shuffleFloatArray
maxByBooleanArray
toListIntArray
randomIntArray
fillCharArray
sortedArrayDescendingLongArray
flatMapToCharArray
reduceOrNullDoubleArray
associateWithToByteArray
allBooleanArray
mapIndexedIntArray
reduceRightOrNullDoubleArray
groupByBooleanArray
scanIndexedByteArray
reduceRightIndexedShortArray
mapDoubleArray
noneLongArray
maxOfWithDoubleArray
averageIntArray
associateToLongArray
toCollectionCharArray
partitionByteArray
withIndexArray
toCollectionLongArray
flatMapIndexedCharArray
sumByFloatArray
sumDoubleArray
minByOrNullFloatArray
filterFloatArray
foldRightArray
foldRightCharArray
filterNotByteArray
fillArray
toSortedSetFloatArray
dropFloatArray
foldDoubleArray
elementAtOrElseIntArray
isNotEmptyLongArray
mapByteArray
toMutableSetDoubleArray
maxOfArray
subtractCharArray
contentEqualsIntArray
minOrNull	Array
zipBooleanArray
takeDoubleArray
minOfWithOrNullDoubleArray
distinctShortArray
sortedByDescendingArray
reduceRightDoubleArray
reduceOrNullArray
maxWithOrNullCharArray
sortDoubleArray
toListIntArray
sortedByDescendingArray
getOrElseCharArray
toTypedArrayBooleanArray
associateByToCharArray
asListArray
asIterableLongArray
indexOfLastDoubleArray
isNotEmptyBooleanArray
sortedByBooleanArray
associateToArray
toDoubleArrayLongArray
sortedByDescending!DoubleArray
sortedArrayDescendingCharArray
maxOfOrNullByteArray
reduceIndexedOrNullFloatArray
randomLongArray
minOfWithDoubleArray
associateWithDoubleArray
lastIndexLongArray
component4FloatArray
minByOrNullCharArray
onEachIndexedBooleanArray
asSequenceByteArray
copyIntoLongArray
runningReduceIndexedFloatArray
firstDoubleArray
dropWhileByteArray
joinToShortArray
lastIndexByteArray
toHashSet	Array
minDoubleArray
asSequenceCharArray
sumByDoubleLongArray
contentEqualsArray
maxOfOrNullIntArray
lastOrNullShortArray
indexOfIntArray
toMutableSetLongArray
toHashSetBooleanArray
forEachCharArray
reduceRightByteArray
lastOrNullByteArray
forEachByteArray
maxOfWithOrNullByteArray
associateWithToArray
sortedWithArray
toMutableSetCharArray
maxOfByteArray
zipCharArray
withIndex	Array
all"CharArray
reduceRightIndexedOrNullByteArray
minFloatArray
scanIndexedArray
getOrNullDoubleArray
unionDoubleArray
toMutableListArray
singleBooleanArray
flatMapIndexedIntArray
takeLastWhileIntArray
toCollectionLongArray
sumByIntArray
subtractShortArray
foldRightShortArray
associateByToLongArray
dropLastWhileDoubleArray
associateToShortArray
sortDescendingByteArray
associateByArray
mapIndexedToByteArray
minOfWithOrNullFloatArray
foldIndexedFloatArray
isEmptyCharArray
sortDescendingLongArray
sliceArrayLongArray
scanCharArray
runningFoldDoubleArray
reversedIntArray
reduceIndexedOrNullBooleanArray
dropLastWhileArray
maxOfWithOrNullShortArray
getOrElseIntArray
mapIndexedToBooleanArray
component3IntArray
filterNotCharArray
mapIntArray
component2ByteArray
associateWithCharArray
copyOfRangeArray
dropWhileFloatArray
getOrElseArray
contentDeepHashCodeImplFloatArray
unionByteArray
isNotEmptyByteArray
component5LongArray
groupByToByteArray
filterNotToLongArray
maxWithLongArray
reduceCharArray
sortedByArray
sortedByIntArray
scanIndexedShortArray
reduceIndexedBooleanArray
minWithOrNullShortArray
toSortedSetArray
lastOrNullBooleanArray
component1IntArray
elementAtOrNull$DoubleArray
reduceRightIndexedOrNullCharArray
toSetByteArray
asListShortArray
noneDoubleArray
getOrNullBooleanArray
singleLongArray
subtractIntArray
sortedWithBooleanArray
singleOrNullShortArray
minWithFloatArray
maxWithOrNullFloatArray
takeLongArray
takeLastArray
toSetByteArray
distinctByDoubleArray
sortDescendingFloatArray
elementAtLongArray
flatMapIndexedToByteArray
lastIndexOfDoubleArray
toMutableSetDoubleArray
reduceRightIndexedDoubleArray
isEmptyLongArray
toMutableListBooleanArray
mapShortArray
getOrNullArray
toCharArrayFloatArray
takeLastWhileArray
sortedArrayShortArray
lastIntArray
sumDoubleArray
allIntArray
maxOfArray
runningFoldFloatArray
onEachShortArray
maxByOrNullBooleanArray
runningReduceIntArray
plusDoubleArray
firstArray
associateWithToArray
minOfWithOrNullIntArray
toSetLongArray
sortedArray
filterToCharArray
reduceIndexedLongArray
fillDoubleArray
distinctByByteArray
minWithLongArray
countShortArray
elementAtFloatArray
flatMapIndexedToIntArray
joinToCharArray
maxByOrNullShortArray
sliceArrayShortArray
unionCharArray
associateByToByteArray
flatMapIndexedToIntArray
indicesCharArray
filterToDoubleArray
component5FloatArray
sortedDescendingCharArray
copyOfDoubleArray
elementAtCharArray
sortedArrayByteArray
reduceRightOrNullShortArray
dropWhileDoubleArray
mapIndexedToDoubleArray
contentEqualsShortArray
dropLastWhileShortArray
copyIntoLongArray
filterNotToByteArray
flatMapToDoubleArray
asIterableByteArray
maxOrNullCharArray
findByteArray
sortedDescendingBooleanArray
minByOrNullFloatArray
component2Array
isNotEmptyIntArray
filterIndexedToCharArray
minByBooleanArray
sumByShortArray
sortedArrayByteArray
minOfLongArray
reduceIndexedDoubleArray
onEachIndexedByteArray
groupByToFloatArray
joinToByteArray
findLastDoubleArray
minOfOrNullIntArray
toTypedArrayLongArray
sortedDescendingIntArray
contentToStringArray
maxByOrNullIntArray
filterToIntArray
contentHashCodeProfiler
withMeasureThreadMXBean
threadUserTimeThreadMXBean
threadCpuTimeString
orDefaultString
trimQuotesIterable
distinctStringsDigestIterable
findWithTransform#DaemonOptions
runFilesPathOrDefault#DaemonJVMOptions
memorywiseFitsIntoIterable
filterExtractPropsString
memToBytes(DaemonJVMOptions
updateMemoryUpperBounds!CompilerServicesFacadeBase
reportRepositoryHandler
extTaskContainer
dependenciesTaskContainer
tasksDependencyHandler
extTaskContainer
projectsTaskContainer
helpProject
libsLibrariesForLibs
extProject
extTaskContainer
buildEnvironmentTaskContainer
javaToolchainsTaskContainer
components!TaskContainer
dependentComponentsTaskContainer
modelTaskContainer
outgoingVariantsTaskContainer
properties&TaskContainer
kotlinDslAccessorsReportVersionCatalogsExtension
extProject
versionCatalogs
Any
unpackRenderedImage
writeImagePath
readImageInputStream
nonClosingOutputStream
nonClosingKProperty
qualifiedNameCache
retainAllCache
getAndUnwrapByteBuffer
readStringListsTableByteBuffer
readStringTableByteBuffer
seekSectionByteBuffer
readUTF8'ByteBuffer
positionAfterMagicAndVersionElement
subtagsElement
subtagNode
childrenIteratorElement
nextElement
iteratorElement
visitAttributesElement
textElement
subtagCountIterable
combineAsCamelCaseString
usLocaleCapitalize#String
tokenizeCommandLineToEscapedString
appendCapitalizedString
capitalizeAndAppendStringBuilder
appendCapitalizedString
usLocaleDecapitalizeString
tokenizeCommandLineToRawStringBuilder
appendCamelCaseString
toSystemLineSeparatorNodeList
forEachNamedNodeMap
forEachTaskCollection
withTypeObjectFactory
namedExtensionContainer
findByTypeExtensionContainer
getByTypeByteArray
toHexStringAppendable
appendLine%NamedDomainObjectProvider
extendsFromFile
isParentOfDomainObjectCollection
withTypeTaskCollection
namedObjectFactory
propertyProperty
setValueObjectFactory
setPropertyObjectFactory
listPropertyNamedDomainObjectContainer
testNamedDomainObjectContainer
main&NamedDomainObjectContainer
androidTestMutableList
addArgMutableList
addArgsMutableList
addArgIfNotNullProject
konanDistributionFile
listLibraryFilesProject
kotlinTestRegistry.Configuration
maybeAddTestDependencyCapabilityIrClass
getPropertyGetterIrClass
getSimpleFunction#IrAnnotationContainer
hasAnnotation#IrAnnotationContainer
getAnnotationIrType
isPrimitiveArrayIrType
isUnsignedArrayJsNode
computeScopesJsNode
resolveTemporaryNamesJsNode
resolveNamesScope
liftUsedNamesCharSequence
isUnderscore!FirClassSymbol
unsubstitutedScopeFirClass
unsubstitutedScope*FirNamedFunctionSymbol
overriddenFunctionsFirClassSymbol
isClassList
hasAnnotationPair
component1Pair
component2List
indexOfFirstMap
ifEmptyCollection
ifEmptyArray
ifEmpty%CompilerConfiguration
metadataVersionIterable
zipWithDefaultMutableMap
getOrPut IrTypeParameter
erasedUpperBoundIrType
erasedUpperBoundIrClass
classIdIrClass
getSingleAbstractMethodIrClass
superClassIrExpression
coerceToUnit,IrSimpleFunction
findInterfaceImplementationIrFunction
isStaticIrElement
getSourceLocation"IrValueParameter
isInlineParameterIrGeneratorWithScope
irBlock IrGeneratorWithScope
irComposite IrGeneratorWithScope
irBlockBodyIrBuilderWithScope
irIfThenIrBuilder
atKotlinLibrary
metadataVersionCollection
concatCompanion
createAny
errorMessageBLambdaWithTypeVariableAsExpectedTypeAtom
transformToResolvedLambdaMemberScope
findFirstFunctionKtLightMethod
checkIsMangledModuleDescriptor
kotlinLibrary!ModuleDescriptor
klibModuleOriginClass
classId%CallableDescriptor
explicitParameters+StringBuilder
renderIncompatibleClassScopes.StringBuilder
renderIncompatibilityInformationSequence
sumKType
javaTypeKClass
castKClass
safeCastObjectFactory
newInstanceKtElement
getResolvedCallLookupTracker
recordKModuleDescriptor
packageFragmentProviderForModuleContentWithoutDependencies#DeclarationDescriptor
extractFileId)FirCallableSymbol
firstOverriddenCallable9FirCallableSymbol
doesOverrideBuiltinWithDifferentJvmName:FirCallableSymbol
getOverriddenBuiltinWithDifferentJvmName.FirNamedFunctionSymbol
firstOverriddenFunction$FirCallableSymbol
isFromBuiltinClass FirSession
enhancedSymbolStorage.FirSession
javaAnnotationTypeQualifierResolver$ConeKotlinType
enhanceConeKotlinType*ConeSimpleKotlinType
enhanceInflexibleTypeConeKotlinType
enhance"ConeKotlinType
computeSubtreeSizesClassId
readOnlyToMutable)ConeClassifierLookupTag
enhanceMutabilityClassId
mutableToReadOnly FirSession
loadMemberAnnotationsFirSession
javaSymbolProviderFirSession
jvmDefaultModeState"FirSession
jvmDefaultModeComponent%FirSession
syntheticPropertiesStorageJavaClass
modalityList
createArrayOfCallJavaClass
hasMetadataAnnotationAny
createConstantOrError FirConstExpression
setProperTypeAny
createConstantIfAnyJavaClass
classKindJavaModifierListOwner
modalityJavaType
toFirJavaTypeRefFirTypeRef
resolveIfJavaTypeJavaType
toConeKotlinType+FirTypeRef
toConeKotlinTypeProbablyFlexibleClassId
toConeFlexibleType3JavaClassifierType
toConeKotlinTypeForFlexibleBoundJavaType
toFirResolvedTypeRefJavaType
toConeTypeProjection<JavaClassifierType
argumentsMakeSenseOnlyForMutableContainer'ConeTypeProjection
mapToCanonicalString,FirSession
collectAllDependentSourceSessions&ConeClassLikeType
mapToCanonicalString.FirSession
collectAllDependentSourceSessionsTo1ConeClassLikeType
mapToCanonicalNoExpansionString-PsiClassStubImpl
addSupertypesReferencesListsFirRegularClass
packFlags#ConeKotlinType
mapToCanonicalStringConeClassLikeType
toFirClassList
asReversedFrozenJavaType
render&JavaAnnotationArgument
toFirExpression+JavaAnnotationOwner
convertAnnotationsToFirList
mapJavaTargetArguments-FirAnnotationContainer
setAnnotationsFromJava/JavaAnnotationArgument
mapJavaRetentionArgument&JavaValueParameter
toFirValueParameter Iterable
convertAnnotationsToFir"JavaAnnotation
toFirAnnotationCall'FirImplicitBuiltinTypeRef
withNewSource,ConeSimpleKotlinType
unwrapDefinitelyNotNull"ConeTypeProjection
createArrayTypeConeKotlinType
arrayElementType!ConeKotlinType
createOutArrayType!ConeKotlinType
isPotentiallyArray&ConeKotlinType
isArrayOrPrimitiveArray ConeKotlinType
varargElementTypeFirSession
typeComponentsFirSession
typeApproximatorFirSession
typeContext!FirAnonymousFunction
receiverTypeConeKotlinType
isKClassTypeFirAnonymousFunction
returnTypeConeKotlinType
isKProperty!ConeKotlinType
isKMutableProperty.ConeTypeContext
isTypeMismatchDueToNullability%ConeTypeProjection
removeQuestionMarkFirSession
doUnifyConeTypeProjection
type#ConeTypeProjection
isStarProjection$ConeKotlinTypeProjection
replaceTypeConeKotlinType
toTypeProjection.ConeKotlinType
originalIfDefinitelyNotNullable#ConeKotlinType
lowerBoundIfFlexible$ConeIntersectionType
withAlternative(ConeKotlinType
renderReadableWithFqNames5ConeClassLikeType
replaceArgumentsWithStarProjectionsConeKotlinType
renderReadable!ConeKotlinType
renderForDebuggingConeKotlinType
isMarkedNullableConeKotlinType
containsConeKotlinType
hasErrorConeKotlinType
isNullableConeIntersectionType
mapTypesConeKotlinType
forEachType#ConeKotlinType
upperBoundIfFlexibleConeClassLikeType
withArgumentsCompanion
findCommonSuperType,ConeKotlinType
approximateIntegerLiteralType!FirClassifierSymbol
constructType)ConeClassLikeLookupTag
constructClassType FirClassLikeSymbol
constructType)FirClassSymbol
constructStarProjectedTypeClassId
toLookupTag%ConeClassifierLookupTag
constructTypeClassId
constructClassLikeTypeConeKotlinType
isStringConeKotlinType
isPrimitiveArrayConeKotlinType
isDoubleConeKotlinType
isUShort)ConeKotlinType
isBooleanOrNullableBoolean ConeKotlinType
isNullableNothingConeKotlinType
isUnit)ConeKotlinType
isNothingOrNullableNothingConeKotlinType
isULong"ConeKotlinType
isNonPrimitiveArrayConeKotlinType
isPrimitiveConeKotlinType
isNullableAnyConeKotlinType
isShortConeKotlinType
isEnumConeKotlinType
isByte-ConeKotlinType
isPrimitiveOrNullablePrimitiveConeKotlinType
isFloatConeKotlinType
isCharConeKotlinType
isArrayType ConeKotlinType
isNullableBoolean!ConeKotlinType
isAnyOfBuiltinType#ConeKotlinType
isCharOrNullableCharConeKotlinType
isNothing-ConeKotlinType
isThrowableOrNullableThrowable.ConeKotlinType
isPrimitiveNumberOrNullableTypeConeKotlinType
isAnyConeKotlinType
isBoolean3ConeKotlinType
isUnsignedTypeOrNullableUnsignedTypeConeKotlinType
isUnsignedTypeConeKotlinType
isLongConeKotlinType
isIntConeKotlinType
isUByte:ConeKotlinType
isIntegerTypeOrNullableIntegerTypeOfAnySizeConeKotlinType
isUIntConeKotlinType
isBuiltinTypeFirTypeRef
isBuiltinTypeFirTypeRef
coneTypeUnsafe/FirAnnotation
isExtensionFunctionAnnotationCallFirTypeRef
isNullableNothingConeClassLikeType
toConstKindFirTypeRef
canBeNullFirTypeRef
isUnitConeKotlinType
canBeNullFirExpression
isNullLiteral$List
dropExtensionFunctionAnnotationFirTypeRef
isBooleanFirTypeRef
coneTypeOrNull"FirFunctionTypeRef
parametersCount&FirTypeProjection
toConeTypeProjectionFirExpression
isStableSmartcastFirTypeRef
isNothingFirTypeRef
isEnum*ConeTypeParameterType
hasNotNullUpperBoundFirTypeRef
coneTypeSafeFirTypeRef
isAnyFirTypeRef
isIntFirTypeRef
isArrayTypeFirTypeRef
isMarkedNullableFirTypeRef
isStringFirTypeRef
isNullableAnyFirTypeRef
coneType;FirIntersectionTypeRef
isRightValidForDefinitelyNotNullableFirAnnotation
isOfTypeFirTypeRef
lookupTagBasedOrNull:FirIntersectionTypeRef
isLeftValidForDefinitelyNotNullableFirSession
functionTypeService ConeKotlinType
customAnnotationsConeAttributes
custom ConeAttributes
customAnnotations'FirSession
correspondingSupertypesCache!ConeAttributes
unsafeVarianceType$ConeAttributes
extensionFunctionType4ConeKotlinType
contextReceiversNumberForFunctionType(ConeAttributes
contextFunctionTypeParams"ConeAttributes
enhancedNullability"ConeKotlinType
hasContextReceivers%ConeAttributes
hasEnhancedNullability4ConeAttributes
contextReceiversNumberForFunctionTypeConeAttributes
noInfer%ConeKotlinType
hasEnhancedNullabilityConeAttributes
exact&ConeClassLikeType
findBaseInvokeSymbol%ConeKotlinType
isNotBasicFunctionType'ConeClassLikeLookupTag
functionTypeKindConeKotlinType
receiverType1ConeKotlinType
findSubtypeOfBasicFunctionTypeImpl#FirFunction
specialFunctionTypeKind$ConeKotlinType
contextReceiversTypes*ConeKotlinType
findContributedInvokeSymbol5ConeKotlinType
customFunctionTypeToSimpleFunctionType)ConeClassLikeLookupTag
isSomeFunctionType.ConeKotlinType
isSuspendOrKSuspendFunctionTypeConeKotlinType
functionTypeKind ConeTypeProjection
typeOrDefault*ConeKotlinType
isFunctionTypeWithPredicate2ConeKotlinType
valueParameterTypesWithoutReceivers!ConeKotlinType
isSomeFunctionType(ConeKotlinType
isFunctionOrKFunctionType"ConeKotlinType
isBasicFunctionType:ConeKotlinType
reflectFunctionTypeToNonReflectFunctionType&ConeKotlinType
isSubtypeOfFunctionType3ConeKotlinType
valueParameterTypesIncludingReceiver'ConeKotlinType
isNonReflectFunctionType-ConeKotlinType
findSubtypeOfBasicFunctionTypeConeKotlinType
returnType$ConeKotlinType
isReflectFunctionType,ConeKotlinType
createFunctionTypeWithNewKindNullableMap
getOrPutFirCache
containsFirLazyValue
getValueFirCache
getValueClassId
createConeTypeFirSession
firCachesFactoryFirCachesFactory
createCache+FirCachesFactory
createCacheWithPostCompute FirExtension
createTopLevelClass"FirExtension
createCompanionObjectFirExtension
createNestedClass#FirExtension
createTopLevelProperty!FirExtension
createMemberProperty#FirExtension
createTopLevelFunction!FirExtension
createMemberFunction"FirTypeParameter
eraseToUpperBound"FirCallableDeclaration
isSubtypeOf!FirTypeRef
hasEnhancedNullabilityConeKotlinType
withAttributes%ConeKotlinType
convertToNonRawVersion"FirTypeRef
isExtensionFunctionTypeConeKotlinType
canHaveSubtypes!List
eraseToUpperBoundsAssociatedConeKotlinType
isRaw!FirTypeRef
withReplacedReturnType%FirTypeRef
withoutEnhancedNullabilityConeKotlinType
withArgumentsList
getProjectionsForRawType/ConeTypeContext
makesSenseToBeDefinitelyNotNull#ConeKotlinType
toRegularClassSymbolConeKotlinType
withNullability&ConeClassLikeType
toRegularClassSymbol)FirDeclaration
visibilityForApproximationFirTypeRef
withReplacedConeTypeConeKotlinType
toSymbol%TypeCheckerProviderContext
equalTypes ConeTypeContext
captureArguments)ConeInferenceContext
intersectTypesOrNull,ConeTypeContext
captureFromArgumentsInternalConeClassLikeType
toClassSymbol*ConeInferenceContext
commonSuperTypeOrNull ConeKotlinType
eraseAsUpperBound%SimpleTypeMarker
eraseArgumentsDeeply#ConeKotlinType
toFirResolvedTypeRefKotlinTypeMarker
isSubtypeOf5ConeKotlinType
makeConeTypeDefinitelyNotNullOrNotNullConeClassLikeType
toSymbol-ConeTypeContext
captureFromExpressionInternalConeKotlinType
isSubtypeOf3ConeTypeContext
captureArgumentsForIntersectionType5FirConstructor
generateNoArgDelegatingConstructorCall,FirExtension
createDefaultPrivateConstructorFirExtension
createConstructor FirSession
dynamicMembersStorage'FirSession
generatedDeclarationsStorageFirSession
enumEntriesSupport3FirOverrideChecker
similarFunctionsOrBothProperties!FirTypeParameterSymbol
toConeTypeFirTypeParameterRef
toConeTypeFirTypeRef
isVoidStringBuilder
appendConeType FirFunction
computeJvmDescriptorFirFunction
computeJvmSignature1ConeKotlinType
computeJvmDescriptorRepresentation&FirSession
substitutionOverrideStorage<FirCallableDeclaration
multipleDelegatesWithTheSameSignature7FirCallableSymbol
multipleDelegatesWithTheSameSignatureFirSimpleFunction
isPublicInAnyFirValueParameter
hasTypeOf5FirCallableDeclaration
importedFromObjectOrStaticDataFirProperty
buildImportedCopy#FirSimpleFunction
buildImportedCopy"FirClassSymbol
declaredMemberScope FirSession
nestedClassifierScope&FirSession
declaredMemberScopeProvider1FirSession
declaredMemberScopeWithLazyNestedScopeFirSession
declaredMemberScopeRFirContainingNamesAwareScope
wrapNestedClassifierScopeWithSubstitutionForSuperType&FirSession
intersectionOverrideStorageFirCallableSymbol
withScope+ResultOfIntersection
isIntersectionOverride:ScopeSession
getOrBuildScopeForIntegerConstantOperatorType2FirSimpleFunction
isUnsignedWrappedIntegerOperator'FirBasedSymbol
isWrappedIntegerOperator6FirBasedSymbol
isWrappedIntegerOperatorForUnsignedType'FirDeclaration
isWrappedIntegerOperator3FirSimpleFunction
originalForWrappedIntegerOperator FirScope
getDeclaredConstructors'List
processOverriddenPropertiesAndSelf.FirTypeScope
processOverriddenFunctionsAndSelf/FirTypeScope
processOverriddenPropertiesAndSelf!FirScope
processClassifiersByNameFirScope
getSingleClassifierFirScope
getFunctionsFirScope
getPropertiesFirSession
overrideService'FirOverrideChecker
isOverriddenFunctionFirSession
firOverrideChecker/ConeClassLikeLookupTag
getNestedClassifierScopeFirSession
platformClassMapper1FirDeclarationAttributes
fakeOverrideSubstitution1FirContainingNamesAwareScope
processAllProperties0FirContainingNamesAwareScope
collectAllFunctions1FirContainingNamesAwareScope
collectAllProperties0FirContainingNamesAwareScope
processAllFunctions.FirSession
platformSpecificOverridabilityRules ConeKotlinType
scopeForSupertypeFirClass
scopeForClassImplFirSession
kotlinScopeProviderFirClass
scopeForClassFirSession
jvmTypeMapper4FirTypeScope
getDirectOverriddenMembersWithBaseScope'FirTypeScope
getDirectOverriddenMembers,FirTypeScope
doProcessAllOverriddenCallables'FirTypeScope
retrieveDirectOverriddenOf3FirTypeScope
processOverriddenPropertiesWithVisited*FirTypeScope
getDirectOverriddenProperties)FirTypeScope
getDirectOverriddenFunctionsList
processOverriddenFunctions(FirTypeScope
processOverriddenProperties2FirTypeScope
processOverriddenFunctionsWithVisited6FirTypeScope
getDirectOverriddenFunctionsWithBaseScope7FirTypeScope
getDirectOverriddenPropertiesWithBaseScope/FirTypeScope
processDirectlyOverriddenFunctions0FirTypeScope
processDirectlyOverriddenProperties List
processOverriddenProperties*FirTypeScope
processAllOverriddenCallablesMutableCollection
addOverridden'FirTypeScope
processOverriddenFunctionsFirProperty
copyToFreePropertyFirTypeRef
approximated'FirFunction
copyToFreeAnonymousFunction&FirPropertyAccessor
copyToFreeAccessor$ConeKotlinType
collectTypeParameters KtSourceElement
isChildOfForLoopKtSourceElement
operationTokenFirTypeRef
toIrTypeFirComparisonExpression
leftFirComparisonExpression
right*ConeKotlinType
getPrimitiveTypeOrSupertype;FirComparisonExpression
inferPrimitiveNumericComparisonInfo3ConeClassLikeType
promoteIntegerTypeToIntIfRequiredMutableList
toMutableOrEmptyList
toMutableOrEmpty'FirExtensionService
scriptConfigurators!FirCallableSymbol
toSymbolForCall FirResolvedQualifier
toLookupTagConstantValueKind
toIrConstKindFirConstExpression
toIrConst+FirVariableAssignment
getIrAssignmentOrigin/FirQualifiedAccessExpression
convertWithOffsets"KtSourceElement
convertWithOffsets3AbstractKtSourceElement
startOffsetSkippingComments/FirSession
createFilesWithGeneratedDeclarations(Fir2IrComponents
createTemporaryVariable!FirClass
getSuperTypesAsIrClassesFFirCallableDeclaration
contextReceiversForFunctionOrContainingPropertyFirElement
convertWithOffsets*FirCallableSymbol
unwrapCallRepresentative,FirProperty
processOverriddenPropertySymbolsFirClass
irOrigin-FirProperty
generateOverriddenAccessorSymbols7FirTypeScope
processOverriddenFunctionsFromSuperClassesFirReference
statementOrigin-FirProperty
generateOverriddenPropertySymbols2FirSimpleFunction
processOverriddenFunctionSymbols!FirConstExpression
getIrConstKindFirClassifierSymbol
toSymbolFirBasedSymbol
toSymbolForCallFirReference
toSymbolForCallIrType
isSamTypeFirStatement
convertWithOffsets0IrDeclarationParent
declareThisReceiverParameter/FirRegularClass
getIrSymbolsForSealedSubclasses3FirSimpleFunction
generateOverriddenFunctionSymbols<FirCallableSymbol
unwrapSubstitutionAndIntersectionOverrides?Fir2IrComponents
createTemporaryVariableForSafeCallConstruction+Fir2IrComponents
createSafeCallConstructionFirDeclaration
computeIrOrigin0Fir2IrComponents
computeValueClassRepresentation)IrActualizedResult
extractFirDeclarations8FirTypeScope
processOverriddenPropertiesFromSuperClassesCFGNode
lastPreviousNodeCFGNode
firstPreviousNode"KtWhenCondition
toFirWhenConditionArray
toFirWhenConditionCFGNode
previousNodeCountControlFlowGraph
orderNodesCFGNode
renderFirLoop
type,FirDeclaration
isLocalClassOrAnonymousObject4FirClassBuilder
ownerRegularClassTypeParametersCount$FirExpression
generateNotNullOrOther.FirCallableDeclaration
initContainingClassAttr*FirExpression
generateLazyLogicalOperation'FirExpression
generateContainsOperation+FirQualifiedAccessExpression
createSafeCall!IElementType
toFirOperationOrNull%FirTypeRef
convertToReceiverParameterString
parseCharacterIElementType
toFirOperation.FirPropertyBuilder
generateAccessorsByDelegateIElementType
toBinaryName"FirBlock
isContractPresentFirCheckList
filterUseSiteTarget*FirExpression
generateComparisonExpression$FirStatement
isContractBlockFirCheck.FirFunctionCall
toLegacyRawContractDescription'FirExpression
pullUpSafeCallIfNecessary&FirImplicitTypeRef
asReceiverParameter3FirClassBuilder
ownerRegularOrAnonymousObjectSymbol"FirExpression
createConventionCallIElementType
toUnaryNameFirExpression
checkReceiverStack
isNotEmptyStack
topOrNullStack
popOrNullStack
isEmptyFirElement
isEqualsToDataFlowVariable
eqDataFlowVariable
notEqDataFlowVariable
isSyntheticRealVariable
typeEqDataFlowVariable
isRealOperationStatement
impliesFirExpression
coneTypeFirElement
symbolTypeStatement
smartCastedTypeFirOperation
isEq-FirBasedSymbol
unwrapFakeOverridesIfNecessaryFirResolvable
symbolFirElement
unwrapElementKtConstantReference
toOperation$LogicSystem
approveContractStatementMutableMap
replaceVariableImplication
replaceVariableTypeStatement
toPersistentTypeStatement
toMutableStatement
replaceVariablePersistentList
replaceAll)FirControlFlowGraphReference
dataFlowInfo-FirControlFlowGraphReference
controlFlowGraph&FirCallableSymbol
hasExtensionReceiver5BodyResolveComponents
createExplicitReceiverForInvoke?BodyResolveComponents
createExplicitReceiverForInvokeByCallable0CallInfo
fakeSourceForImplicitInvokeCallReceiverCandidate
fullyAnalyzed%CheckerSink
reportDiagnosticIfNotNullCheckerSink
yieldIfNeedCheckerSink
yieldDiagnostic&BodyResolveComponents
isConcreteMember(BodyResolveComponents
getFunctionMembers(BodyResolveComponents
getPropertyMembers3BodyResolveComponents
resolveSupertypesByCalleeName5BodyResolveComponents
resolveSupertypesByPropertyName1BodyResolveComponents
findTypesForSuperCandidates0BodyResolveComponents
resolveSupertypesByMembers5BodyResolveComponents
resolveSupertypesForMethodOfAny*FirClassLikeDeclaration
fullyExpandedClass<PostponedArgumentsAnalyzerContext
addSubsystemFromExpressionFirResolvable
candidate0FirMemberDeclaration
getBackingFieldIfApplicableFirVisibilityChecker
isVisible#FirScope
getSingleVisibleClassifier"FirDeclaration
isInvisibleOrHidden.FirScope
processFunctionsAndConstructorsByName"FirScope
processConstructorsByName!FirScope
getFirstClassifierOrNull&FirSession
callConflictResolverFactory!FirSession
syntheticNamesProviderCandidate
prepareReceivers#Candidate
isJavaApplicableCandidate0CheckerSink
markCandidateForCompatibilityResolve&Candidate
findClosestMatchingReceivers(FirExpression
isSuperReferenceExpressionFirExpression
isSuperCall&ConeKotlinType
removeTypeVariableTypes7ControlFlowGraphBuilder
createEnterDefaultArgumentsNode6ControlFlowGraphBuilder
createAnonymousObjectEnterNode1ControlFlowGraphBuilder
createQualifiedAccessNode5ControlFlowGraphBuilder
createPostponedLambdaExitNode9ControlFlowGraphBuilder
createStringConcatenationCallNode3ControlFlowGraphBuilder
createElvisLhsIsNotNullNode:ControlFlowGraphBuilder
createDelegatedConstructorCallNode4ControlFlowGraphBuilder
createTryExpressionEnterNode3ControlFlowGraphBuilder
createTryMainBlockEnterNode/ControlFlowGraphBuilder
createSmartCastExitNode*ControlFlowGraphBuilder
createLoopExitNode7ControlFlowGraphBuilder
createWhenBranchResultEnterNode+ControlFlowGraphBuilder
createBlockExitNode2ControlFlowGraphBuilder
createFinallyBlockExitNode6ControlFlowGraphBuilder
createWhenBranchResultExitNode,ControlFlowGraphBuilder
createScriptExitNode+ControlFlowGraphBuilder
createLoopEnterNode3ControlFlowGraphBuilder
createCallableReferenceNode3ControlFlowGraphBuilder
createFinallyProxyEnterNode*ControlFlowGraphBuilder
createWhenExitNode3ControlFlowGraphBuilder
createTryExpressionExitNode9ControlFlowGraphBuilder
createWhenBranchConditionExitNode5ControlFlowGraphBuilder
createVariableDeclarationNode/ControlFlowGraphBuilder
createLoopBlockExitNode2ControlFlowGraphBuilder
createCheckNotNullCallNode5ControlFlowGraphBuilder
createEnterValueParameterNode:ControlFlowGraphBuilder
createWhenBranchConditionEnterNode6ControlFlowGraphBuilder
createExitDefaultArgumentsNode0ControlFlowGraphBuilder
createLocalClassExitNode3ControlFlowGraphBuilder
createLoopConditionExitNode2ControlFlowGraphBuilder
createTypeOperatorCallNode2ControlFlowGraphBuilder
createCatchClauseEnterNode0ControlFlowGraphBuilder
createInitBlockEnterNode5ControlFlowGraphBuilder
createFakeExpressionEnterNode/ControlFlowGraphBuilder
createBinaryOrEnterNode9ControlFlowGraphBuilder
createPropertyInitializerExitNode9ControlFlowGraphBuilder
createWhenSyntheticElseBranchNode3ControlFlowGraphBuilder
createResolvedQualifierNode0ControlFlowGraphBuilder
createLoopBlockEnterNode1ControlFlowGraphBuilder
createCatchClauseExitNode+ControlFlowGraphBuilder
createElvisExitNode.ControlFlowGraphBuilder
createExitSafeCallNode+ControlFlowGraphBuilder
createWhenEnterNode/ControlFlowGraphBuilder
createEnterSafeCallNode/ControlFlowGraphBuilder
createElvisRhsEnterNode.ControlFlowGraphBuilder
createBinaryOrExitNode6ControlFlowGraphBuilder
createEqualityOperatorCallNode.ControlFlowGraphBuilder
createFunctionCallNode;ControlFlowGraphBuilder
createWhenSubjectExpressionExitNode;ControlFlowGraphBuilder
createMergePostponedLambdaExitsNode2ControlFlowGraphBuilder
createTryMainBlockExitNode.ControlFlowGraphBuilder
createElvisLhsExitNode4ControlFlowGraphBuilder
createLoopConditionEnterNode=ControlFlowGraphBuilder
createAnonymousFunctionExpressionNode/ControlFlowGraphBuilder
createFunctionEnterNode,ControlFlowGraphBuilder
createBlockEnterNode1ControlFlowGraphBuilder
createConstExpressionNode/ControlFlowGraphBuilder
createBinaryAndExitNode<ControlFlowGraphBuilder
createBinaryAndEnterRightOperandNode0ControlFlowGraphBuilder
createThrowExceptionNode:ControlFlowGraphBuilder
createBinaryAndExitLeftOperandNode&ControlFlowGraphBuilder
createStubNode?ControlFlowGraphBuilder
createAnonymousObjectExpressionExitNode2ControlFlowGraphBuilder
createFinallyProxyExitNode7ControlFlowGraphBuilder
createSplitPostponedLambdasNode.ControlFlowGraphBuilder
createGetClassCallNode:ControlFlowGraphBuilder
createLocalFunctionDeclarationNode4ControlFlowGraphBuilder
createExitValueParameterNode+ControlFlowGraphBuilder
createClassExitNode.ControlFlowGraphBuilder
createFunctionExitNode,ControlFlowGraphBuilder
createClassEnterNode:ControlFlowGraphBuilder
createPropertyInitializerEnterNode0ControlFlowGraphBuilder
createBinaryAndEnterNode/ControlFlowGraphBuilder
createInitBlockExitNode7ControlFlowGraphBuilder
createFieldInitializerEnterNode8ControlFlowGraphBuilder
createDelegateExpressionExitNode4ControlFlowGraphBuilder
createVariableAssignmentNode6ControlFlowGraphBuilder
createComparisonExpressionNode3ControlFlowGraphBuilder
createFinallyBlockEnterNode9ControlFlowGraphBuilder
createBinaryOrExitLeftOperandNode;ControlFlowGraphBuilder
createBinaryOrEnterRightOperandNode&ControlFlowGraphBuilder
createJumpNode-ControlFlowGraphBuilder
createScriptEnterNode6ControlFlowGraphBuilder
createFieldInitializerExitNode"BodyResolveComponents
mapArguments2FirTypeParameter
getTypeParameterFromExpandedClass*Candidate
getExpectedTypeWithSAMConversionCandidate
resolveBlockArgumentFirExpression
isFunctional#Candidate
resolveArgumentExpression)Candidate
captureTypeFromExpressionOrNull+ConeKotlinType
hasSupertypeWithGivenClassIdFirExpression
getExpectedTypeCandidate
prepareCapturedType)FirExpression
namedReferenceWithCandidate(Candidate
resolvePlainExpressionArgumentCandidate
resolveArgument Candidate
resolveSubCallArgument"Candidate
resolvePlainArgumentTypeCandidate
prepareExpectedTypeHCallableReferenceAdaptation
needCompatibilityResolveForCallableReference!FirVariable
canBeMutableReferenceFirFunction
indexOf4BodyResolveComponents
getCallableReferenceAdaptation2ConeKotlinType
isBaseTypeForNumberedReferenceTypesConeKotlinType
isKCallableType#ConeKotlinType
isUnitOrFlexibleUnitFirExpression
index,FirDeclaration
hasBuilderInferenceAnnotationFirSession
inferenceComponentsCandidate
computeCompletionMode0Candidate
isFunctionForExpectTypeFromCastFeatureConeKotlinType
unwrap2FirFunction
isFunctionForExpectTypeFromCastFeature*FirResolvable
processCandidateIfApplicable/FirStatement
processAllContainingCallCandidatesCandidate
csBuilder%Candidate
preprocessCallableReference"Candidate
preprocessLambdaArgumentFirSession
firProvider1FirSymbolProvider
getClassDeclaredFunctionSymbols.FirSymbolProvider
getClassDeclaredConstructorsFirSession
symbolProviderSet
mayHaveTopLevelClassifier$FirSymbolProvider
getSymbolByTypeRef0FirSymbolProvider
getRegularClassSymbolByClassId1FirSymbolProvider
getClassDeclaredPropertySymbolsClassId
toSymbolIterable
flatMapToNullableSet-FirSymbolProvider
getClassDeclaredMemberScope%FirSession
dependenciesSymbolProviderFirProvider
getContainingFile ConeSubstitutor
substituteOrNull4ConeSubstitutor
replaceStubsAndTypeVariablesToErrorsConeSubstitutor
chain:BodyResolveComponents
computeRepresentativeTypeForBareTypeCFirClassLikeDeclaration
runContractAndBodiesResolutionForLocalClass*ReturnTypeCalculator
getTransformerCreator1ConeKotlinType
substituteAlternativesInPublicType%FirTypeRef
approximateDeclarationType#FirFunctionCall
getOriginalFunction9FirClassLikeDeclaration
collectLocalClassesNavigationInfo1FirClassLikeDeclaration
runAllPhasesForLocalClassFirSession
generatedClassIndexFirBlock
writeResultTypeFirExpression
resultType"ConstantValueKind
expectedConeType@FirClassLikeDeclaration
runCompanionGenerationPhaseForLocalClass8FirSession
compilerRequiredAnnotationEnhancementProviderOFirClassLikeDeclaration
runCompilerRequiredAnnotationsResolvePhaseForLocalClass FirContractDescriptionOwner
body+FirContractDescriptionOwner
valueParameters!FirContractDescriptionOwner
error(FirTypeRef
ensureResolvedTypeDeclaration,ConeKotlinType
ensureResolvedTypeDeclaration'FirDeclaration
hasOwnBodyOrAccessorBody)FirFunction
runContractResolveForFunction7FirClassLikeDeclaration
runContractResolveForLocalClass/FirCallableDeclaration
transformTypeToArrayType0FirValueParameter
transformVarargTypeToArrayType#FirSession
platformSupertypeUpdater.FirResolvePhase
createCompilerProcessorByPhase/FirExpression
unwrapAnonymousFunctionExpression4FirFunctionCall
replaceLambdaArgumentInvocationKinds8FirClassLikeDeclaration
runTypeResolvePhaseForLocalClass5FirClassLikeDeclaration
runStatusResolveForLocalClass.FirDeclaration
publishedApiEffectiveVisibility.FirBasedSymbol
publishedApiEffectiveVisibility=FirClassLikeDeclaration
runSupertypeResolvePhaseForLocalClassPersistentList
pushAllPersistentList
push+FirClassLikeDeclaration
typeParametersScopePersistentList
pushIfNotNull)FirRegularClass
resolveSupertypesInTheAir$ExpectedArgumentType
getExpectedTypeConeKotlinType
toExpectedTypeMIntegerLiteralAndOperatorApproximationTransformer
approximateIfIsIntegerConstFirSession
typeResolverCallableId
isIteratorCallableId
isIteratorNextCallableId
isKFunctionInvokeCallableId
isIteratorHasNextFirAnnotation
fqNameCallableId
isInvokeResolutionMode
expectedTypeFirDeclarationStatus
mode*ResolutionStageRunner
createErrorCandidate+ResolutionStageRunner
fullyProcessCandidateFirSession
qualifierResolver,BodyResolveComponents
createCurrentScopeList:FirCallableDeclaration
isMarkedWithImplicitIntegerCoercion5FirCallableSymbol
isMarkedWithImplicitIntegerCoercion)FirFunctionCall
hasExplicitValueArguments&ConeSimpleKotlinType
fullyExpandedType*ConeClassLikeType
fullyExpandedTypeNoCache ConeKotlinType
fullyExpandedType%ConeClassLikeType
directExpansionType&ConeClassLikeType
applyNullabilityFrom#ConeClassLikeType
fullyExpandedType%ConeClassLikeType
applyAttributesFrom#FirSession
defaultParameterResolverConeClassLikeType
classScopeClassId
defaultTypeConeKotlinType
scopeFirClassSymbol
defaultType%FirSmartCastExpression
smartcastScopeFirClass
defaultType,ConeClassLikeType
delegatingConstructorScope"ConeClassLikeType
obtainFirOfClass-FirConstructorSymbol
isTypeAliasedConstructorFirSimpleFunction
isEquals0FirClassLikeDeclaration
getContainingDeclarationFirTypeRef
firClassLikeList
toTypeProjections-FirConstructor
originalConstructorIfTypeAlias-FirExtensionService
samConversionTransformers"FirSimpleFunction
isPublicInObject-FirRegularClass
getSingleAbstractMethodOrNullCFirRegularClass
hasMoreThenOneAbstractFunctionOrHasAbstractProperty(FirRegularClass
computeSamCandidateNames)FirCallableDeclaration
resolvedIsAbstract2FirSimpleFunction
getFunctionTypeForAbstractMethod FirSession
samConstructorStorage/FirRegularClass
findSingleAbstractMethodByNames9FirTypeParameterRefsOwner
buildSubstitutorForSamTypeAlias.ConeClassLikeLookupTag
toFirRegularClassSymbol1Collection
findClassRepresentationThatIsSubtypeOf(ConeClassLikeLookupTag
toFirRegularClass0ConeClassLikeLookupTagImpl
bindSymbolToLookupTag)ConeKotlinType
withCombinedAttributesFrom ConeClassifierLookupTag
toSymbol*ConeKotlinType
withParameterNameAnnotationAConeTypeParameterLookupTag
findClassRepresentationThatIsSubtypeOfConeClassLikeLookupTag
toSymbol&FirSymbolProvider
getSymbolByLookupTag&ConeKotlinType
findClassRepresentation&ConeClassLikeLookupTag
toSymbolOrErrorFirSession
sourcesToPathsMapper%FirClassifierSymbol
collectSuperTypes FirClass
isThereLoopInSupertypes"ConeClassLikeType
isClassBasedTypeFirClassSymbol
isSubclassOf)ConeClassLikeType
computePartialExpansionFirClass
isSubclassOf$FirSession
registerResolveComponents#FirSession
registerCommonComponents,FirSession
registerCliCompilerOnlyComponents0FirSession
registerJavaSpecificResolveComponents'FirSession
registerCommonJavaComponents?FirSession
registerCommonComponentsAfterExtensionsAreConfiguredFirSession
registerModuleDataFirCallableSymbol
isExtensionOFirPropertyWithExplicitBackingFieldResolvedNamedReference
getNarrowedDownSymbolIBodyResolveComponents
transformDesugaredAssignmentValueUsingSmartcastInfo4BodyResolveComponents
buildResolvedQualifierForClass5FirAnonymousFunction
addReturnToLastStatementIfNeeded-FirAnonymousFunction
constructFunctionTypeRef$BodyResolveComponents
typeFromCallee,BodyResolveComponents
initialTypeOfCandidate;BodyResolveComponents
transformExpressionUsingSmartcastInfo!FirFunction
constructFunctionType%FirAnonymousFunction
shouldReturnUnit&BodyResolveComponents
typeForQualifier0FirSmartCastExpressionBuilder
applyResultTypeRef.FirFunction
getAsForbiddenNamedArgumentsTarget+FirExpression
isCallToStatementLikeFunction@BodyResolveComponents
transformQualifiedAccessUsingSmartcastInfo/FirNamedReferenceWithCandidate
toErrorReference)FirResolvedTypeRef
initialTypeOfCandidate/FirAnnotation
getCorrespondingClassSymbolOrNull;FirCheckedSafeCallSubject
propagateTypeFromOriginalReceiver,FirExpression
isIntegerLiteralOrOperatorCallFBodyResolveComponents
transformWhenSubjectExpressionUsingSmartcastInfo)FirCallableDeclaration
getContainingClass$FirPropertySymbol
isEffectivelyFinalConeKotlinType
isKindOfNothing$BodyResolveComponents
typeFromSymbolDFirSafeCallExpression
propagateTypeFromQualifiedAccessAfterNullCheck6FirAnnotationContainer
resolvedAnnotationsWithClassIds7FirAnnotationContainer
resolvedAnnotationsWithArguments(FirAnnotationContainer
isDefinitelyEmpty1FirAnnotationContainer
resolvedAnnotationClassIds:FirAnnotationContainer
resolvedCompilerRequiredAnnotations$List
resolveAnnotationsWithArguments.FirClass
lazyResolveToPhaseWithCallableMembers!FirDeclaration
lazyResolveToPhase"FirSession
lazyDeclarationResolver4FirClassSymbol
lazyResolveToPhaseWithCallableMembers!FirBasedSymbol
lazyResolveToPhase&FirDeclaration
lazyDeclarationResolver(FirDeclaration
isLexicallyInsideJsNative ControlFlowGraph
getNodesInOrderCFGNode
previousCfgNodesCFGNode
followingCfgNodesFirBasedSymbol
isExportedObjectFirBasedSymbol
isExternal*FirBasedSymbol
isEffectivelyExternalMember!FirBasedSymbol
isPredefinedObjectFirBasedSymbol
isNativeObjectFirBasedSymbol
isExpect FirBasedSymbol
isNativeInterfaceFirBasedSymbol
getJsName$FirBasedSymbol
isEffectivelyExternal8FirFunctionSymbol
isOverridingExternalWithOptionalParams FirBasedSymbol
getContainingFilePersistentMap
join#ControlFlowGraph
collectDataForNode+ControlFlowGraph
collectDataForNodeInternal4PropertyInitializationInfoData
checkPropertyAccessesFirDeclaration
evaluatedInPlace(FirPropertySymbol
requiresInitialization;Kind
doNotReportUninitializedVariableForClassInitializationCheckerContext
isJvm6%FirBasedSymbol
isCompiledToJvmDefault(DiagnosticReporter
reportIfHasAnnotationCheckerContext
findClosest)FirSuperReference
hadExplicitTypeInSourceFirExpression
toArgumentInfoConeKotlinType
toTypeInfoTypeInfo
isNotNullPrimitiveFirClassSymbol
isBuiltinTypeInfo
isIdentityLess)FirExpression
mostOriginalTypeIfSmartCastFirClassSymbol
isFinalClassTypeInfo
isNullableEnum"TypeInfo
enforcesEmptyIntersection*FirMemberDeclaration
isEffectivelyExternal'FirCallableSymbol
hasExplicitReturnType.FirTypeRef
needsMultiFieldValueClassFlattening'FirMemberDeclaration
isEffectivelyFinalFirBasedSymbol
isLocalMemberFirDeclaration
isLocalMember'FirClassSymbol
primaryConstructorSymbol#FirCallableSymbol
isExtensionMember(FirMemberDeclaration
isEffectivelyExpect(FirCallableDeclaration
isExtensionMemberFirClass
canHaveOpenMembers'FirSession
platformDiagnosticSuppressor%FirProperty
hasAccessorImplementationFirBasedSymbol
expandedClass)KtModifierKeywordToken
toVisibilityOrNullKtModifierList
getVisibilityFirCallableSymbol
fromKotlin(FirProperty
isCompileTimeBuiltinProperty(FirFunctionCall
isCompileTimeBuiltinCall#ConeKotlinType
canBeUsedForConstVal*FirCallableSymbol
getReferencedClassSymbolFirDeclaration
isCollectableFirElement
hasModifierKtSourceElement
getModifierListFirModifierList
containsFirElement
getModifierKtSourceElement
valOrVarKeyword/FirDeclaration
loadWasExperimentalMarkerClasses3FirDeclaration
checkSinceKotlinVersionAccessibility'FirDeclaration
getOwnSinceKotlinVersion(ConeKotlinType
isNonReifiedTypeParameter"ConeKotlinType
allParameterReified!ConeAttributes
originalProjectionFirRegularClass
getRetention.FirAnnotationContainer
getDefaultUseSiteTarget(FirExpression
extractClassesFromArgument)FirAnnotation
getAllowedAnnotationTargets+FirRegularClass
getAllowedAnnotationTargets"FirDeclaration
getTargetAnnotation)FirClassLikeSymbol
getAnnotationRetentionFirAnnotation
getRetention.FirAnnotation
getAnnotationClassForOptInMarker%FirDeclaration
getRetentionAnnotation3FirAnnotationContainer
getImplicitUseSiteTargetList/FirClassLikeSymbol
containsRepeatableAnnotation&FirClassLikeSymbol
getTargetAnnotation.FirClassLikeSymbol
getAllowedAnnotationTargetsFirAnnotation
isRepeatable1FirClassLikeSymbol
getExplicitAnnotationRetention&FirExpression
extractClassFromArgument&FirExtensionService
additionalCheckers%FirSimpleFunction
overriddenFunctionsFirElement
isLhsOfAssignment'FirBasedSymbol
getContainingClassSymbol#FirClassLikeSymbol
outerClassSymbolConeKotlinType
leastUpperBound9FirIntersectionCallableSymbol
subjectToManyNotImplemented#FirBasedSymbol
typeParameterSymbols'FirDeclaration
getContainingClassSymbol'FirCallableDeclaration
isVisibleInClassConeKotlinType
isValueClass)FirBasedSymbol
getAnnotationFirstArgument-FirClassSymbol
getContainingDeclarationSymbol2FirBasedSymbol
hasAnnotationOrInsideAnnotatedClass(FirMemberDeclaration
redundantModalities!ConeKotlinType
collectUpperBoundsFirDeclaration
hasBody#ConeKotlinType
isSubtypeOfThrowableCheckerContext
isTopLevel@FirQualifiedAccessExpression
explicitReceiverIsNotSuperReference"FirCallableSymbol
isVisibleInClassFirFunctionCall
isIterator"CheckerContext
closestNonLocalWithFirClassSymbol
isSupertypeOf"FirClass
findNonInterfaceSupertype+ConeKotlinType
getInlineClassUnderlyingType+FirBasedSymbol
getAnnotationStringParameter(ConeKotlinType
isRecursiveValueClassType8FirFunctionSymbol
isFunctionForExpectTypeFromCastFeature.ConeTypeProjection
isConflictingOrNotInvariant'CheckerContext
findClosestClassOrObjectCheckerContext
closestNonLocal2FirDeclaration
hasAnnotationOrInsideAnnotatedClass)FirCallableSymbol
getImplementationStatusFirTypeRef
toRegularClassSymbol!FirMemberDeclaration
isInlineOnlyKotlinTypeMarker
isSupertypeOf)FirTypeParameterSymbol
collectUpperBoundsName
isDelegated'FirClass
collectSupertypesWithDelegatesFirClassLikeSymbol
classKindFirTypeRef
toClassLikeSymbolFirValueParameter
hasValOrVar-FirNamedFunctionSymbol
matchesEqualsSignature@FirNamedFunctionSymbol
matchesDataClassSyntheticMemberSignatures(KtSourceElement
defaultValueForParameter0FirNamedFunctionSymbol
directOverriddenFunctions&ConeKotlinType
isSingleFieldValueClass/FirNamedFunctionSymbol
matchesHashCodeSignature3ConeKotlinType
isRecursiveSingleFieldValueClassType/FirNamedFunctionSymbol
matchesToStringSignature/FirSession
overridesBackwardCompatibilityHelper-FirSessionConfigurator
registerNativeCheckers5FirSessionConfigurator
registerExtendedCommonCheckers*FirSessionConfigurator
registerJvmCheckers-FirSessionConfigurator
registerCommonCheckers)FirSessionConfigurator
registerJsCheckersFirSession
checkersComponentConeDiagnostic
toKtDiagnosticKtDiagnosticFactory3
createOn NewConstraintError
lowerConeTypeKtDiagnosticFactory2
createOnKtDiagnosticFactory1
createOn"ConstraintSystemError
toDiagnosticConeDiagnostic
toFirDiagnosticsKtDiagnosticFactory4
createOnConeSimpleDiagnostic
getFactory NewConstraintError
upperConeTypeKtDiagnosticFactory0
createOn#FirImport
getSourceForImportSegmentKtLightSourceElement
getChildKtPsiSourceElement
getChildKtSourceElement
getChild,KtLightSourceElement
buildChildSourceElement'FirResult
convertToIrAndActualizeForJvm!FirResult
convertToIrAndActualize(ModuleCompilerAnalyzedOutput
convertToIrFirSession
runResolutionFirSession
runCheckersFirSession
buildFirFromKtFilesFirSession
buildFirViaLightTreeList
acceptAllElementsFirElement
transformSingleMutableList
transformInplace#MutableOrEmptyList
transformInplaceFirContractDescription
effects KtEffectDeclaration
toFirElement)KtContractDescriptionElement
toFirElementString
nameAsSafeNameFirUserTypeRef
isUnderscored#FirCallBuilder
extractArgumentsFrom)LighterASTNode
getAsStringWithoutBacktick&FirExtensionService
registerExtensionsFirSession
extensionService!FirExtensionService
hasExtensions+FirExtensionService
typeAttributeExtensions!FirSession
predicateBasedProviderFirClass
generatedMembers#FirClass
generatedNestedClassifiers.FirExtensionService
extensionSessionComponents/FirExtensionService
statusTransformerExtensionsFirDeclarationStatus
transform.FirExtensionService
functionTypeKindExtensions&FirSession
registeredPluginAnnotations2FirRegularClassSymbol
markedWithMetaAnnotationImpl&FirAnnotation
markedWithMetaAnnotation2FirExtensionService
expressionResolutionExtensions'FirExtensionService
supertypeGenerators)FirExtensionService
declarationGenerators+FirExtensionService
assignAltererExtensions3FirExtensionService
declarationForMetadataProviders.FirSession
generatedDeclarationsSymbolProviderFirCallableDeclaration
irName%FirReference
toResolvedFunctionSymbol%FirReference
toResolvedPropertySymbolFirReference
resolved&FirReference
toResolvedEnumEntrySymbol(FirReference
toResolvedConstructorSymbol!FirReference
toResolvedBaseSymbol+FirReference
toResolvedValueParameterSymbolFirReference
isError%FirReference
toResolvedCallableSymbol%FirReference
toResolvedVariableSymbol*FirReference
toResolvedTypeParameterSymbolFirReference
toResolvedSymbol3FirResolvedArgumentList
toAnnotationArgumentMapping+FirArgumentList
toAnnotationArgumentMapping&FirWhenExpression
isProperlyExhaustiveFirWhenExpression
isExhaustiveFirCall
argumentsFirBlock
replaceFirstStatement&FirExpression
unwrapAndFlattenArgumentFirFunctionCall
isCalleeDynamic"FirVariableAssignment
unwrapLValueFirCall
resolvedArgumentMapping)FirExpression
toResolvedCallableReferenceFirElement
calleeReferenceFirCall
argument&FirVariableAssignment
dispatchReceiver&FirVariableAssignment
explicitReceiver%FirVariableAssignment
calleeReferenceFirExpression
unwrapArgument#FirBlock
transformStatementsIndexed'FirExpression
unwrapSmartcastExpression.FirVariableAssignment
contextReceiverArgumentsFirCall
dynamicVarargFirCall
dynamicVarargArguments3FirQualifiedAccessExpression
allReceiverExpressions&FirExpression
toResolvedCallableSymbol"FirCallableReferenceAccess
isBound'FirVariableAssignment
extensionReceiverFirExpression
toReferenceFirAnnotation
unexpandedClassId(FirExpression
unwrapAndFlattenArgumentTo)FirAnnotation
unexpandedConeClassLikeType2FirTypeParameterBuilder
addDefaultBoundIfNecessary&FirRegularClassBuilder
addDeclarations%FirRegularClassBuilder
addDeclaration&FirMemberDeclaration
nameOrSpecialNameFirDeclaration
isJavaFirClass
anonymousInitializersFirDeclaration
isFromLibraryFirDeclaration
isPrecompiledFirClassLikeDeclaration
classIdFirDeclaration
isJavaSourceFirClass
delegateFieldsFirClass
superConeTypesFirTypeAlias
expandedConeType"FirCallableDeclaration
isExtensionFirDeclaration
isNonLocalFirDeclaration
isSynthetic!FirPropertySymbol
hasBackingField#FirProperty
hasExplicitBackingFieldFirProperty
isFromVararg)FirPropertySymbol
hasExplicitBackingFieldFirProperty
isReferredViaField)FirPropertySymbol
getExplicitBackingField0FirDeclaration
getDanglingTypeConstraintsOrEmptyFirProperty
hasBackingField)FirPropertySymbol
canNarrowDownGetterType#FirProperty
getExplicitBackingField&FirDeclaration
danglingTypeConstraintsFirRegularClass
moduleName FirClassLikeSymbol
sourceElement=FirProperty
correspondingValueParameterFromPrimaryConstructor$FirMemberDeclaration
containerSource(FirPropertySymbol
fromPrimaryConstructor#FirProperty
canNarrowDownGetterTypeCFirPropertySymbol
correspondingValueParameterFromPrimaryConstructor"FirProperty
fromPrimaryConstructor%FirClassLikeDeclaration
sourceElementFirSimpleFunction
isLocalFirMemberDeclaration
modalityFirMemberDeclaration
isInlineFirFunction
hasBody,FirMemberDeclaration
hasStableParameterNamesFirMemberDeclaration
isAbstractFirRegularClass
isCompanionFirClass
isEnumClassFirRegularClass
isSealed&FirMemberDeclaration
isFromSealedClass-FirMemberDeclaration
allowsToHaveFakeOverrideFirMemberDeclaration
isConstFirMemberDeclaration
visibilityFirMemberDeclaration
isStaticFirMemberDeclaration
isSuspendFirMemberDeclaration
isInfix,FirPropertyAccessor
allowsToHaveFakeOverrideFirMemberDeclaration
isOverride*FirRegularClass
canHaveAbstractDeclaration$FirProperty
allowsToHaveFakeOverrideFirMemberDeclaration
isInnerFirMemberDeclaration
isFinalFirMemberDeclaration
isActualFirMemberDeclaration
isLateInitFirMemberDeclaration
isOperator(FirMemberDeclaration
effectiveVisibilityFirPropertyAccessor
hasBody#Visibility
allowsToHaveFakeOverride$FirMemberDeclaration
isFromEnumClassFirClassLikeDeclaration
isLocalFirClass
isInterfaceFirMemberDeclaration
isExternalFirMemberDeclaration
isTailRecFirMemberDeclaration
isExpectFirRegularClass
isDataFirMemberDeclaration
isOpenFirMemberDeclaration
isFunFirCallableSymbol
isActual*FirPropertySymbol
allowsToHaveFakeOverrideFirCallableSymbol
isExpectFirClassLikeSymbol
isFinalFirCallableSymbol
isTailRecFirCallableSymbol
isOperatorFirCallableSymbol
isInfixFirClassLikeSymbol
isStaticFirClassLikeSymbol
modalityFirCallableSymbol
isInnerFirClassLikeSymbol
isCompanionFirCallableSymbol
visibility%FirCallableSymbol
effectiveVisibilityFirCallableSymbol
isOverride#FirCallableSymbol
isFromSealedClassFirClassLikeSymbol
visibility&FirClassLikeSymbol
effectiveVisibilityFirClassSymbol
isEnumClassFirCallableSymbol
isLateInitFirCallableSymbol
isSuspend2FirPropertyAccessorSymbol
allowsToHaveFakeOverrideFirClassLikeSymbol
isExpect"FirClassLikeSymbol
isFromEnumClass*FirCallableSymbol
allowsToHaveFakeOverrideFirClassLikeSymbol
isAbstract!FirCallableSymbol
isFromEnumClassFirClassLikeSymbol
isSealedFirNamedFunctionSymbol
isLocalFirCallableSymbol
isExternal$FirClassLikeSymbol
isFromSealedClassFirCallableSymbol
isOpenFirCallableSymbol
modalityFirClassSymbol
isInterfaceFirClassLikeSymbol
isOpenFirClassLikeSymbol
isActualFirCallableSymbol
isInlineFirClassLikeSymbol
isFunFirCallableSymbol
isAbstractFirCallableSymbol
isFunFirClassLikeSymbol
isLocalFirCallableSymbol
isFinalFirClassLikeSymbol
isExternalFirCallableSymbol
isStatic0FirRegularClassSymbol
canHaveAbstractDeclarationFirClassLikeSymbol
isInline,FirClassSymbol
isLocalClassOrAnonymousObjectFirClassLikeSymbol
isInnerFirCallableSymbol
isConstFirClassLikeSymbol
isData!FirCallableSymbol
modalityOrFinalFirClassSymbol
isEnumEntry/SessionHolder
collectTowerDataElementsForScript'FirElementWithResolveState
resolvePhaseFirResolvePhase
asResolveStateFirResolvePhase
isBodyResolveFirClass
delegateFieldsMapGeneratedDeclarationKey
origin<ConeSimpleKotlinType
valueClassRepresentationTypeMarkersList+FirSimpleFunction
isTypedEqualsInValueClass8ConeKotlinType
unsubstitutedUnderlyingTypeForInlineClass6ConeKotlinType
substitutedUnderlyingTypeForInlineClass1FirRegularClass
getValueClassUnderlyingParameters.FirAnnotationContainer
getDeprecationsProvider$FirAnnotation
getVersionFromArgumentFirBasedSymbol
getDeprecation!FirAnnotation
getDeprecationLevel/List
extractDeprecationAnnotationInfoPerUseSite+List
getDeprecationsProviderFromAnnotations7FirAnnotationContainer
extractDeprecationInfoPerUseSite(FirBasedSymbol
getDeprecationForCallSite FirBasedSymbol
isEnumConstructor(FirDeclarationOrigin
isJavaOrEnhancement'FirClass
constructorsSortedByDelegationFirClass
collectEnumEntries!FirClassSymbol
collectEnumEntries(FirConstructorSymbol
getConstructedClassFirClass
constructors"FirBasedSymbol
isJavaOrEnhancement-FirConstructorSymbol
delegatedThisConstructor&FirFunctionSymbol
containsDefaultValue"FirDeclaration
isJavaOrEnhancement&FirBasedSymbol
isAnnotationConstructor%FirClassLikeSymbol
fullyExpandedClass*FirRegularClassSymbol
isInlineOrValueClass FirClass
primaryConstructorIfAny7FirBasedSymbol
isPrimaryConstructorOfInlineOrValueClass(FirRegularClass
getSealedClassInheritors$FirRegularClass
sealedInheritorsAttr(FirSession
sealedClassInheritorsProvider(FirRegularClass
setSealedClassInheritorsOFirResolvedContractDescription
createContractDescriptionForSubstitutionOverrideFirEffectDeclaration
substituteGFirContractDescription
createContractDescriptionForSubstitutionOverride$FirContractDescription
isNullOrEmptyKtEffectDeclaration
substituteKtBooleanExpression
substitute&SessionHolder
collectImplicitReceivers)FirScope
asTowerDataElementForStaticScopeList
asTowerDataElement.SessionHolder
collectTowerDataElementsForClassFirClass
staticScopeFirScope
asTowerDataElement(ImplicitReceiverValue
asTowerDataElement2FirCallableDeclaration
createContextReceiverValues7FirBasedSymbol
getSingleCompatibleExpectForActualOrNullFirDeclaration
expectForActual:FirFunctionSymbol
getSingleCompatibleExpectForActualOrNullFirBasedSymbol
expectForActual(FirRegularClass
valueClassRepresentation)FirRegularClass
inlineClassRepresentation2FirRegularClass
multiFieldValueClassRepresentationFirElement
validate'FirDeclaration
versionRequirementsTableFirExpression
unwrapVarargValueList
getAnnotationByClassId)FirAnnotation
toAnnotationClassLikeSymbol FirAnnotation
findArgumentByNameFirAnnotation
getIntArgumentList
nonSourceAnnotationsFirAnnotation
toAnnotationClass List
mapAnnotationsWithClassIdTo/FirAnnotationContainer
getJvmNameFromAnnotationList
getAnnotationsByClassIdFirAnnotation
resolvedFirBasedSymbol
hasAnnotation$FirAnnotationContainer
hasAnnotation%FirBasedSymbol
getAnnotationByClassIdList
getAnnotationByClassIds.FirAnnotationContainer
getAnnotationsByClassId%FirAnnotation
toAnnotationClassIdSafeFirGetClassCall
getTargetTypeFirDeclaration
hasAnnotation+FirAnnotationContainer
nonSourceAnnotationsFirAnnotation
getStringArgument2FirExpression
callableNameOfMetaAnnotationArgument'FirAnnotation
getPrimitiveArgumentValueList
hasAnnotationSafe'FirAnnotation
toAnnotationLookupTagSafe.FirAnnotation
useSiteTargetsFromMetaAnnotation"FirAnnotation
isJvmFieldAnnotation$FirAnnotation
getStringArrayArgument FirDeclaration
hasAnnotationSafe FirAnnotation
getBooleanArgument!FirProperty
hasJvmFieldAnnotation-FirAnnotationContainer
getAnnotationByClassId!FirAnnotation
toAnnotationClassId FirAnnotation
findUseSiteTargetsFirAnnotation
getKClassArgument#FirAnnotation
toAnnotationLookupTag'FirAnnotation
toAnnotationClassLikeType'FirMemberDeclaration
shouldBeSerialized@ConeKotlinType
suspendFunctionTypeToFunctionTypeWithContinuationKClassValue
getArgumentType%LinkedHashMap
convertToConstantValuesLocalClass
coneTypeAnnotationValue
coneTypeSafeMap
convertToConstantValuesFirExpression
toConstantValueFirExpression
hasConstantValueFirVariable
isEnumEntriesFirBlock
returnExpressionsFirDeclarationStatus
copyFirElement
renderFirElement
renderWithType FirTypeRef
copyWithNewSourceKindFirSession
exceptionHandlerFirTypeRef
copyWithNewSourceList
smartPlusFirElement
psiFirContextReceiver
labelNameFirFile
packageFqNameFirElement
realPsi1FirSession
providedDeclarationsForMetadataServiceCallableId
replaceNameProtoEnumFlags
projectionLFirEnumEntryDeserializedAccessExpression
toQualifiedPropertyAccessExpression.FirRegularClassBuilder
addSerializableIfNeeded(FirSession
deserializedClassConfigurator/FirRegularClassBuilder
addCloneForArrayIfNeeded ClassOrBuilder
propertiesInOrderFirSession
moduleDataFirSession
nullableModuleData!FirTypeRef
errorTypeFromPrototype(FirFunctionCall
copyAsImplicitInvokeCallFirAnnotation
tryExpandClassId$FirTypeRef
resolvedTypeFromPrototypeList
computeTypeAttributes*FirAnnotation
extractContextReceiversCountFirVariable
toQualifiedAccess.FirRegularClassBuilder
generateValueOfFunction,FirRegularClassBuilder
generateEntriesGetter-FirRegularClassBuilder
generateValuesFunctionFirSession
visibilityChecker"FirSession
moduleVisibilityChecker(FirBasedSymbol
isVariableOrNamedFunction FirBasedSymbol
getOwnerLookupTag0BodyResolveComponents
resolveRootPartOfQualifier!FqName
continueQualifierInPackage&FirResolvedQualifier
continueQualifier&FirClassLikeDeclaration
ownerGenerator$FirSession
languageSettingsComponent"FirSession
languageVersionSettings(FirSession
safeLanguageSettingsComponent&FirSession
safeLanguageVersionSettingsClassId
createTypeFirClass
isByteFirClass
isPrimitiveTypeFirClass
isPrimitiveNumberTypeConeClassLikeType
isFloatFirClassSymbol
isFloatFirClassSymbol
isLongFirClassSymbol
isIntConeClassLikeType
isULong'ConeClassLikeType
isPrimitiveNumberTypeFirClassSymbol
isShort,FirClassSymbol
isPrimitiveUnsignedNumberTypeConeClassLikeType
isBooleanFirClassSymbol
isCharFirClass
isChar$FirClassSymbol
isPrimitiveNumberTypeFirClass
isBooleanConeClassLikeType
isDoubleFirClassSymbol
isByte/ConeClassLikeType
isPrimitiveUnsignedNumberTypeFirClassSymbol
isPrimitiveTypeFirClass
isLong!ConeClassLikeType
isPrimitiveTypeFirClass
isFloat&FirClass
isPrimitiveUnsignedNumberTypeFirClass
isDouble.FirClass
isPrimitiveNumberOrUnsignedNumberTypeConeClassLikeType
isInt4FirClassSymbol
isPrimitiveNumberOrUnsignedNumberType7ConeClassLikeType
isPrimitiveNumberOrUnsignedNumberTypeConeClassLikeType
isCharFirClass
isIntConeClassLikeType
isLongFirClassSymbol
isBooleanConeClassLikeType
isShortFirClassSymbol
isDoubleFirClass
isShortConeClassLikeType
isByte3FirLookupTrackerComponent
recordTypeResolveAsLookup*FirLookupTrackerComponent
recordTypeLookupFirSession
lookupTracker*FirLookupTrackerComponent
recordCallLookupFirSession
enumWhenTracker1FirEnumWhenTrackerComponent
reportEnumUsageInWhen Visibility
toEffectiveVisibilityFirSession
nameConflictsTracker5FirCallableDeclaration
unwrapFakeOverridesOrDelegated*FirCallableDeclaration
unwrapFakeOverrides(FirCallableSymbol
originalIfFakeOverride:FirCallableDeclaration
originalForIntersectionOverrideAttr6FirCallableSymbol
dispatchReceiverClassLookupTagOrNull+FirDanglingModifierList
containingClassAttr/FirCallableDeclaration
containingClassLookupTag-FirCallableDeclaration
originalIfFakeOverride-FirCallableDeclaration
isIntersectionOverride-FirCallableDeclaration
isSubstitutionOverrideFirClass
hasNoEnumEntriesAttr(FirCallableSymbol
isIntersectionOverride-FirCallableSymbol
unwrapSubstitutionOverrides;FirCallableDeclaration
isSubstitutionOrIntersectionOverride8FirCallableDeclaration
originalIfFakeOverrideOrDelegated+FirRegularClass
containingClassForLocalAttr:FirCallableDeclaration
originalForSubstitutionOverrideAttr.FirClassLikeSymbol
getContainingClassLookupTagFirRegularClass
isJavaRecord;FirCallableDeclaration
dispatchReceiverClassLookupTagOrNull1FirCallableSymbol
dispatchReceiverClassTypeOrNull+FirRegularClass
isNewPlaceForBodyGeneration6FirCallableSymbol
isSubstitutionOrIntersectionOverride*FirCallableSymbol
containingClassLookupTag2FirCallableDeclaration
baseForIntersectionOverride!FirFunction
isJavaRecordComponent-FirCallableDeclaration
propertyIfBackingField FirCallableSymbol
originalOrSelf6FirCallableDeclaration
dispatchReceiverClassTypeOrNullFirProperty
isCatchParameter'FirValueParameter
correspondingProperty'FirRegularClass
containingClassForLocal&FirCallableSymbol
delegatedWrapperData1FirCallableSymbol
originalForSubstitutionOverride6FirCallableDeclaration
originalForSubstitutionOverride9FirCallableDeclaration
containingClassForStaticMemberAttr2FirCallableDeclaration
unwrapSubstitutionOverrides%FirCallableDeclaration
originalOrSelf)FirCallableDeclaration
propertyIfAccessor'FirDanglingModifierList
containingClass9FirCallableDeclaration
unwrapUseSiteSubstitutionOverridesFirClass
hasEnumEntries(FirCallableSymbol
isSubstitutionOverride+FirCallableDeclaration
initialSignatureAttr%FirCallableSymbol
unwrapFakeOverrides+FirCallableDeclaration
delegatedWrapperData-FirCallableSymbol
baseForIntersectionOverride2FirAnonymousFunction
matchingParameterFunctionTypeStringBuilder
appendInnKtElement
getDebugText!KtPureElement
findClassDescriptor5KtClass
createPrimaryConstructorParameterListIfAbsent(KtClass
createPrimaryConstructorIfAbsentKtElement
getModificationStamp(KtElement
suppressDiagnosticsInDebugMode%KtFile
suppressDiagnosticsInDebugMode.KtCallableDeclaration
setReceiverTypeReference'KtFunctionType
setReceiverTypeReference$KtElement
doSetReceiverTypeReferencePsiElement
parameterIndex%KtModifierList
visibilityModifierType4KtExpression
getQualifiedExpressionForSelectorOrThis"KtClassOrObject
findFunctionByName"KtFunctionLiteral
findLabelAndCall.KtExpression
getQualifiedExpressionForReceiver*KtModifierListOwner
visibilityModifierType!KtModifierList
visibilityModifierKtElement
isFirstStatementKtElement
containingClass KtCallExpression
addTypeArgumentKtExpression
getLabeledParent*KtFunctionLiteral
getOrCreateParameterListKtSimpleNameExpression
isCallee%KtElement
getQualifiedElementSelector)KtNamedFunction
isContractPresentPsiCheck1KtNameReferenceExpression
isUnderscoreInBackticksString
quoteIfNeeded3KtSimpleNameExpression
isPackageDirectiveExpressionString
isIdentifier-KtCallExpression
getOrCreateValueArgumentList(KtModifierListOwner
modifierFromTokenSet3KtModifierListOwner
visibilityModifierTypeOrDefaultKtParameter
isPropertyParameterKtClassOrObject
isObjectLiteral'KtStringTemplateExpression
plainContent!PsiElement
isExtensionDeclaration#KtCallElement
getCallNameExpression*KtSimpleNameExpression
getQualifiedElement6KtAnnotationsContainer
collectAnnotationEntriesFromPsiKtElement
parentSubstitute.KtExpression
isContractDescriptionCallPsiCheck7KtQualifiedExpression
isContractDescriptionCallPsiCheck,KtExpression
getOutermostParenthesizerOrThisKtExpression
asAssignment'KtExpression
isLambdaOutsideParentheses+KtElement
getQualifiedExpressionForSelector KtExpression
isInImportDirectiveKtExpression
isDotSelector%KtClassOrObject
effectiveDeclarations%KtDeclaration
containingClassOrObject4KtExpression
getQualifiedExpressionForReceiverOrThisEKtSimpleNameExpression
getTopmostParentQualifiedExpressionForSelector!KtElement
isContextualDeclaration7KtSimpleNameExpression
getQualifiedElementOrCallableRef%StubBasedPsiElementBase
getSuperNames%KtNamedDeclaration
getValueParametersKtExpression
getAssignmentByLHS/KtExpression
getPossiblyQualifiedCallExpressionKtDeclaration
modalityModifier"KtDeclaration
modalityModifierType"KtFile
getFileOrScriptDeclarations'KtExpression
topParenthesizedParentOrMe"KtStringTemplateExpression
isPlainKtModifierListOwner
isPublicKtBlockExpression
contentRange%KtExpression
lastBlockStatementOrThisKtClass
isAbstract*KtStringTemplateExpression
getContentRange(KtNamedDeclaration
getValueParameterListKtElement
nonStaticOuterClassesKtTypeElement
unwrapNullabilityKtModifierListOwner
isPrivate-KtStringTemplateExpression
isPlainWithEscapes3StubElement
collectAnnotationEntriesFromStubElement)KtStringTemplateExpression
isSingleQuotedKtDeclaration
hasBody!KtExpression
getAnnotationEntries"KtClassOrObject
findPropertyByName)KtNamedDeclaration
safeNameForLazyResolveKtModifierListOwner
isProtected$KtExpression
getBinaryWithTypeParentName
safeNameForLazyResolve2KtSimpleNameExpression
isImportDirectiveExpression!PsiElement
isFunctionalExpression&KtModifierListOwner
visibilityModifierKtExpression
isDotReceiver#PsiElement
isTopLevelKtOrJavaMember/KtNamedDeclaration
isPrivateNestedClassOrObject<KtAnnotationsContainer
collectAnnotationEntriesFromStubOrPsi+KtNamedDeclaration
safeFqNameForLazyResolvePsiElement
astReplace KtExpression
referenceExpression"KtElement
blockExpressionsOrSingle,KtSimpleNameExpression
getReceiverExpressionKtValueArgument
argumentIndex#KtModifierList
modifierFromTokenSet#KtModifierListOwner
addModifierList#KtModifierListOwner
setModifierListPsiElement
siblings%PsiElement
collectDescendantsOfTypeTo&PsiElement
startOffsetSkippingCommentsPsiElement
prevLeafs KtModifierList
hasActualModifierPsiElement
getParentOfTypes3#PsiElement
textRangeWithoutCommentsPsiElement
endOffsetPsiElement
findDescendantOfType$PsiElement
getElementTextWithContextPsiElement
getStartOffsetInPsiElement
getParentOfTypePsiElement
getParentOfTypes2PsiChildRange
textRange!KtModifierList
hasSuspendModifier PsiElement
prevSiblingOfSameTypePsiElement
startsWithCommentPsiElement
parents PsiElement
nextSiblingOfSameType!PsiElement
getTopmostParentOfTypeKtExpression
isNullPsiElement
startOffset%PsiElement
getParentOfTypeAndBranchesKtPureElement
pureStartOffsetPsiElement
allChildren!PsiElement
getIfChildIsInBranchesPsiElement
beforeASTNode
closestPsiElement#PsiElement
getParentOfTypeAndBranch+PsiElement
getLastParentOfTypeInRowWithSelfPsiElement
getChildOfTypeASTNode
children%KtModifierListOwner
hasExpectModifierPsiFile
elementsInRange0PsiElement
unwrapParenthesesLabelsAndAnnotationsASTNode
siblingsPsiElement
nextLeafPsiElement
prevLeaf#PsiElement
collectDescendantsOfTypePsiElement
parentsWithSelf6PsiElement
getNextSiblingIgnoringWhitespaceAndCommentsPsiElement
getTextWithLocationPsiChildRange
getTextPsiElement
getChildrenOfTypePsiElement
anyDescendantOfType(PsiElement
getOutermostParentContainedInASTNode
parentsASTNode
leavesSearchScope
contains6PsiElement
getPrevSiblingIgnoringWhitespaceAndCommentsKtModifierList
hasValueModifier'PsiElement
getParentOfTypesAndPredicate KtModifierList
hasExpectModifier+PsiElement
getNextSiblingIgnoringWhitespace%KtModifierListOwner
hasActualModifier+LazyParseablePsiElement
getContainingKtFilePsiElement
createSmartPointerPsiElement
getParentOfTypesTextRange
containsInsidePsiChildRange
trimWhiteSpacesKtPureElement
pureEndOffsetPsiElement
getIfChildIsInBranch"PsiElement
forEachDescendantOfTypePsiElement
nextLeafsKtModifierList
hasFunModifier+PsiElement
getPrevSiblingIgnoringWhitespace6PsiElement
unwrapParenthesesLabelsAndAnnotationsDeeply#PsiElement
getLastParentOfTypeInRowPsiElement
isInsideOfPsiElement
isAncestorKtFile
doNotAnalyzeKtFile
analysisContext"KtExpression
unpackFunctionLiteralKtElement
deleteSemicolonKtClassOrObject
allConstructorsKtClassOrObject
getOrCreateBodyKtContractEffect
getExpression'KtPsiFactory
createDeclarationByPattern*KtPsiFactory
buildDestructuringDeclarationKtPsiFactory
buildExpression-KtPsiFactory
createValueArgumentListByPattern#KtPsiFactory
buildValueArgumentList&KtPsiFactory
createExpressionByPattern4KtPsiFactory
createDestructuringDeclarationByPatternKtPsiFactory
buildDeclarationPsiElement
isThisWithoutLabel'KtContractEffectList
getContractEffects$KtFunction
getCalleeByLambdaArgument$KtSimpleNameExpression
mainReferenceKtElement
mainReferenceKDocName
mainReferencePsiReference
unwrappedTargets#KtReferenceExpression
mainReferenceKtExpression
readWriteAccess.KtExpression
readWriteAccessWithFullExpressionTypeUsage
toAttributesPropertyDescriptor
isJavaField*LazyJavaResolverContext
resolveAnnotations	Int
isSet)LazyJavaResolverContext
replaceComponents7LazyJavaResolverContext
computeNewDefaultTypeQualifiers8LazyJavaResolverContext
copyWithNewDefaultTypeQualifiers&LazyJavaResolverContext
childForMethod.LazyJavaResolverContext
childForClassOrPackageLazyJavaResolverContext
childString
splitCanonicalFqName"String
convertCanonicalNameToQName(JavaAnnotationOwner
buildLazyValueForMapJavaClass
classIdJavaType
isSuperWildcard$JavaMember
isObjectMethodInInterfaceCollection
convertArray
convert-ClassDescriptor
getParentJavaStaticClassScope2DescriptorWithContainerSource
isFromJvmPackagePart=DescriptorWithContainerSource
getImplClassNameForDeserialized!Visibility
toDescriptorVisibility!KotlinType
hasEnhancedNullability&ClassifierDescriptor
enhanceMutability!List
compositeAnnotationsOrSingle#TypeComponentPosition
shouldEnhance5TypeSystemCommonBackendContext
hasEnhancedNullability/JavaTypeQualifiers
computeQualifiersForOverride'JavaTypeQualifiers
nullabilityForErrors
Set
selectFqNameUnsafe
childSafeProject
createJavaClassFinder@CallableMemberDescriptor
doesOverrideBuiltinWithDifferentJvmName-CallableMemberDescriptor
isFromJavaOrBuiltins5ClassDescriptor
hasRealKotlinSuperClassWithOverrideOf4CallableMemberDescriptor
getOverriddenSpecialBuiltinACallableMemberDescriptor
getOverriddenBuiltinWithDifferentJvmNameDCallableMemberDescriptor
getOverriddenBuiltinReflectingJvmDescriptor#CallableMemberDescriptor
isFromJavaCompanion
loadModuleMapping!KotlinClassFinder
findKotlinClass-TypeSystemCommonBackendContext
mapBuiltInTypeJvmTypeFactory
boxTypeIfNeeded6TypeSystemCommonBackendContext
shouldUseUnderlyingType4TypeSystemCommonBackendContext
computeUnderlyingType%DeclarationDescriptor
toSourceElementClassDescriptor
internalName&CallableDescriptor
computeJvmSignature2PropertyDescriptor
computeJvmDescriptorWithoutName'FunctionDescriptor
computeJvmDescriptorKotlinType
mapToJvmTypeStringBuilder
appendErasedType>TypeSystemCommonBackendContext
getOptimalModeForValueParameter=TypeSystemCommonBackendContext
getOptimalModeForSignaturePart:TypeSystemCommonBackendContext
getOptimalModeForReturnType%SignatureBuildingComponents
signatureClassId
internalName4CallableDescriptor
getContainingKotlinJvmBinaryClassString
jsId ClassId
callableIdForConstructor%FqName
findValueForMostSpecificFqnameFqName
tailFqName
parentOrNullFqName
isOneSegmentFQNFqName
isChildOfFqName
isSubpackageOfString
collectionsIdString
reflectIdString
javaAnnotationIdString
enumsIdString
coroutinesIdString
jvmInternalIdString
concurrentIdString
internalIdName
primitiveArrayIdString
jvmIdString
rangesIdString
annotationIdMap
inverseMapString
internalIrIdString
javaLangIdString
baseIdClassId
unsignedIdOption
getOrNullTuple2
component1Tuple2
component2Map
getOrNullAny
computeHashWeakPair
component2WeakPair
component1Iterable
filterIsInstanceAndLighterASTNode
getChildrenSmartPrinter
withIndentCollection
bfsString
isUpperCaseCharAtString
isLowerCaseCharAtString
toLowerCaseAsciiOnlyString
decapitalizeAsciiOnlyString
capitalizeFirstWordString
toUpperCaseAsciiOnlyString
decapitalizeSmartString
capitalizeAsciiOnly#String
decapitalizeSmartForCompiler>NewConstraintSystem
buildNotFixedVariablesToPossibleResultType"FunctionDescriptor
isValidOperatorLighterASTNode
isInsideThrowable
classNameAndMessage5Throwable
wrapIntoSourceCodeAnalysisExceptionIfNeeded/Throwable
wrapIntoFileAnalysisExceptionIfNeededCharSequence
asQuote)KtSourceElement
isDefinitelyNotInsideFileKtDeclaration
isOrdinaryClass'KtElement
containingNonLocalDeclarationKtDeclaration
isAnnotatedEnumWhenTracker
recordByte
toWatDataByteArray
toWatDataWasmModule
calculateIds+WasmFunctionType
referencesTypeDeclarations"WasmType
referencesTypeDeclarationWasmType
getHeapTypeWasmOp
pureStacklessInstructionWasmOp
isOutCfgNodeWasmOp
isInCfgNode%PropertyDescriptor
hasValidJsCodeBody%FunctionDescriptor
hasValidJsCodeBodyKtExpression
isJsCall(KtDeclarationWithBody
hasValidJsCodeBody#BuildMetricsReporter
startMeasureGc!BuildMetricsReporter
endMeasureGcBuildMetricsReporter
measureICReporter
debugICReporter
infoICReporter
warnDouble
asStringFile
isModuleMappingFileList
joinToReadableStringKtClassOrObject
computeClassIdJavaClass
collectAllSupertypes Collection
filterTypeAnnotationsJCModifiers
isAbstractJCModifiers
visibilityJCModifiers
hasDefaultModifierJCModifiers
isFinalJCTree
annotationsJCModifiers
isStaticElement
isStatic!ExecutableElement
valueParametersElement
isFinalElement
isAbstractElement
getVisibilityTypeElement
computeClassIdSet
getVisibility!AnnotatedConstruct
findAnnotationTypeArgumentListMarker
allVariance
convertVariance5TypeConstructorMarker
isIntegerLiteralTypeConstructor KotlinTypeMarker
typeConstructorUnwrappedType
replaceArgumentsTypeConstructor
debugInfoKotlinType
approximateKotlinTypeRefiner
refineTypesTypeVariableMarker
defaultType$TypeSubstitutorMarker
safeSubstitute'TypeVariableMarker
freshTypeConstructor(KotlinTypeMarker
dependsOnTypeParameters)KotlinTypeMarker
dependsOnTypeConstructor CapturedTypeMarker
captureStatusSimpleType
isClassTypeSimpleType
isIntegerLiteralType2UnwrappedType
hasSupertypeWithGivenTypeConstructor%UnwrappedType
anySuperTypeConstructor!SimpleType
isSingleClassifierTypeSimpleType
isIntersectionTypeTypeVariance
convertVariance+SimpleFunctionDescriptor
createFunctionType(KtCallExpression
isWithoutValueArguments KotlinTypeRefiner
refineBareTypeKotlinType
isBooleanKotlinType
isNullableNothing.KotlinType
replaceArgumentsWithStarProjectionsKotlinType
cannotBeReifiedKotlinType
isNullableAny'KotlinType
getImmediateSuperclassNotAnyKotlinType
contains5KotlinType
containsTypeProjectionsInTopLevelArgumentsKotlinType
immediateSupertypesKotlinType
isSubtypeOf+SimpleType
replaceArgumentsByParametersWithKotlinType
isEnumKotlinType
asTypeProjectionKotlinType
isLongKotlinType
isTypeParameterKotlinType
isDefaultBoundKotlinType
nullabilityList
defaultProjections&KotlinType
replaceArgumentsWithNothingKotlinType
isByte$KotlinType
containsSelfTypeParameter%KotlinType
isNothingOrNullableNothingAbbreviatedType
unCapture#KotlinTypeChecker
equalTypesOrNulls%KotlinType
isBooleanOrNullableBooleanKotlinType
isAnyKotlinType
containsError0TypeParameterDescriptor
representativeUpperBound KotlinType
isPrimitiveNumberType,KotlinType
expandIntersectionTypeIfNecessaryKotlinType
builtInsKotlinType
isShortKotlinType
isAnyOrNullableAny/KotlinType
extractTypeParametersFromUpperBounds%NewCapturedType
unCaptureTopLevelTypeKotlinType
isUnit+KotlinType
replaceArgumentsByParametersWith'KotlinType
isSignedOrUnsignedNumberTypeKotlinType
constituentTypes(KotlinType
isGenericArrayOfTypeParameterKotlinType
isDoubleTypeProjection
substitute2SimpleType
replaceArgumentsByExistingArgumentsWith6KotlinType
upperBoundedByPrimitiveNumberOrNullableTypeKotlinType
isStubTypeSimpleType
unCaptureKotlinType
supertypesCollection
closureKotlinType
isDefNotNullStubTypeKotlinType
containsTypeAliasesKotlinType
isNothing)ClassifierDescriptor
isTypeAliasParameterKotlinType
isNotNullThrowableKotlinType
unCapture(KotlinType
isStubTypeForBuilderInferenceKotlinType
isArrayOfNothing%KotlinType
requiresTypeAliasExpansionKotlinType
isCharFlexibleType
unCaptureKotlinType
makeNotNullable*KotlinType
isPrimitiveNumberOrNullableType+KotlinType
isStubTypeForVariableInSubtypingKotlinType
replaceAnnotations KotlinType
containsTypeParameter&KotlinType
containsTypeAliasParametersUnwrappedType
unCaptureKotlinType
makeNullableKotlinType
shouldBeUpdatedKotlinType
isIntKotlinType
isFloatKotlinType
isUnsignedNumberType=KtOperationExpression
reportDeprecatedDefinitelyNotNullSyntaxKotlinType
isNullableKotlinType
isErrorKotlinType
classFqnStringBindingContext
getElementType,CallableDescriptor
isTopLevelExtensionOnType;DeclarationDescriptor
findTypeInModuleByTopLevelClassFqNameKotlinType
replaceTypeArgumentsTypeArgument
toTypeProjectionTypeProjection
toTypeArgument KotlinType
isNullabilityFlexibleKotlinType
isFlexible#Collection
singleBestRepresentativeKotlinType
upperIfFlexibleKotlinType
asFlexibleTypeKotlinType
lowerIfFlexible#TypeAttributes
toDefaultAnnotations!TypeAttributes
replaceAnnotationsAnnotations
toDefaultAttributesKotlinType
isDynamic:IntersectionTypeConstructor
makeDefinitelyNotNullOrNotNull"KotlinType
isDefinitelyNotNullTypeSimpleType
withAbbreviation%NewCapturedType
withNotNullProjection,UnwrappedType
makeDefinitelyNotNullOrNotNull3SimpleType
makeSimpleTypeDefinitelyNotNullOrNotNullKotlinType
getAbbreviatedType9KotlinType
makeIntersectionTypeDefinitelyNotNullOrNotNullKotlinType
getAbbreviation!KotlinType
getCustomTypeParameter#KotlinType
getSubtypeRepresentative KotlinType
isCustomTypeParameter%KotlinType
getSupertypeRepresentativeKotlinType
replaceKotlinType
asSimpleTypeSimpleType
replace@TypeSystemCommonBackendContext
computeExpandedTypeForInlineClass7TypeSystemCommonBackendContext
computeExpandedTypeInner*TypeParameterDescriptor
starProjectionTypeTypeConstructor
isExpectClass+KotlinType
restoreAdditionalTypeInformation,TypeConstructor
allDependentTypeConstructors KotlinType
isFunctionPlaceholder'KotlinType
getEnhancementDeeplyInternalList
enhanceTypeArguments"KotlinType
unwrapEnhancementDeeplyKotlinType
getEnhancementList
wereTypeArgumentsChanged UnwrappedType
inheritEnhancementUnwrappedType
wrapEnhancementKotlinType
getEnhancementDeeplyKotlinType
unwrapEnhancement#KotlinType
wereTypeArgumentsChanged-KotlinType
representativeTypeForTypeParameterTypeAttributes
annotations#TypeAttributes
annotationsAttribute/IntersectionTypeConstructor
transformComponents File
withReplacedExtensionOrNullFile
descendantRelativeToClassLoader
loadedClassesAny
isJavacComponentAny
isPrimitiveOrString!CharSequence
substringWithContextAny
sureArrayList
compactIterable
keysToMapExceptNullsMutableCollection
addIfNotNullList
compactIfPossibleIterable
mapToIndexMutableMap
getOrPutNullableIterable
keysToMapSequenceScope
yieldIfNotNull$Throwable
isProcessCanceledExceptionField
getSafeLookAheadIterator
sequenceUntilKType
allowsNulls!LanguageVersion
toMetadataVersionIterable
filterIsInstanceAndToCollection
filterIsInstanceAnd%Collection
filterIsInstanceMapNotNullIterable
filterIsInstanceMapTo%Iterable
filterIsInstanceMapNotNullTo8DeserializationConfiguration
jvmMetadataVersionOrDefaultCollection
foldMapAny
castIterable
firstIsInstanceOrNullIterable
lastIsInstanceOrNullArray
ifNotEmptyIterable
flatMapToNullableString
lastIndexOfOrNullAny
assertedCastAny
applyIfBoolean
ifFalseSet
compactIfPossibleIterable
flattenToMap
compactIfPossibleArray
firstNotNullResultIterable
sameSequence
firstIsInstanceOrNullMutableList
trimToSize	Pair
swapIterable
castAllArray
firstIsInstanceMutableList
popLastString
indexOfOrNullIterable
firstIsInstanceSequence
firstIsInstanceCollection
ifNotEmpty$Iterable
filterIsInstanceWithCheckerBoolean
ifTrueIterable
zipWithNullsIterable
sumByLongList
flatGroupBy
Any
safeAsIterable
partitionIsInstanceArray
firstIsInstanceOrNullList
flatAssociateByIterable
firstNotNullResultSequence
atMostOne$Collection
memoryOptimizedMapNotNull$Collection
memoryOptimizedMapIndexedCollection
memoryOptimizedZipCollection
memoryOptimizedMapIterable
findIsInstanceAnd!Collection
memoryOptimizedFlatMap#Collection
memoryOptimizedFilterNotCollection
toSmartListList
memoryOptimizedPlus*Collection
memoryOptimizedFilterIsInstance Collection
memoryOptimizedFilterLightElement
cannotModify(PsiType
annotateByTypeAnnotationProvider'KtClassOrObject
getExternalDependenciesKtUserType
fqName"PsiReferenceList
addSuperTypeEntryKtSuperTypeList
findEntry"KtUltraLightSupport
jvmDefaultModePsiElement
toLightClassOrigin(JvmDeclarationOrigin
toLightMemberOrigin&AnnotationDescriptor
toLightAnnotation,DeclarationDescriptor
obtainLightAnnotations%ConstantValue
toAnnotationMemberValue$PsiQualifiedReference
nameFromSourcePsiClass
isAnonymous#KtAnnotationEntry
analyzeAnnotation KtModifierListOwner
isDeprecated"KtUltraLightSupport
findAnnotationConstantValue
createPsiLiteral"KotlinType
cleanFromAnonymousTypesKotlinType
asPsiTypeProject
applyCompilerPluginsKtDeclaration
getKotlinType&KtValueArgument
looksLikeLevelArgumentKtClassOrObject
safeIsLocalKtUltraLightSupport
mapTypeList
toLightAnnotationsKtDeclaration
resolveKtFile
safeScript5KtUltraLightClass
createGeneratedMethodFromDescriptorKtAnnotated
isJvmStatic)KtModifierListOwner
isHiddenByDeprecationKtUltraLightClass
lightMethod#ConstantValue
asStringForPsiLiteralKtDeclaration
simpleVisibilityKtFile
safeIsScript%KtAnnotationEntry
looksLikeDeprecated.KtClassOrObject
shouldNotBeVisibleAsLightClass0KtClassOrObject
defaultJavaAncestorQualifiedName<KtLightClassForSourceDeclaration
isPossiblyAffectedByAllOpen?KtLightClassImpl
getFirstSupertypeFQNameForAnonymousDeclarationKtLightMethod
isSetterKtLightMethod
isAccessor!KtLightMethod
isTraitFakeOverrideKtLightMethod
isGetterKtExpression
nameReference$PsiAnnotation
tryConvertAsRepeatable%PsiAnnotation
extractAnnotationFqName*PsiAnnotation
tryConvertAsMustBeDocumentedPsiAnnotation
tryConvertAs+PsiAnnotation
extractArrayAnnotationFqNames-PsiAnnotation
tryConvertAsRepeatableContainer*PsiAnnotation
asUltraLightSimpleAnnotation#PsiAnnotation
tryConvertAsRetention PsiAnnotation
tryConvertAsTarget*KtNamedDeclaration
getAccessorLightMethods-HmppCliModuleStructure
getModuleNameForSourcePsiMethod
syntheticGetter#KtTypeParameter
toPsiTypeParameters.KtClassOrObject
toLightClassWithBuiltinMappingPsiMethod
syntheticAccessorsKtScript
toLightClassPsiMethod
isTopLevelDeclarationPsiMethod
canHaveOverride#PsiMethod
canHaveSyntheticAccessors PsiMethod
canHaveSyntheticSetter PsiMethod
canHaveSyntheticGetterPsiMethod
getterNamePsiElement
toLightMethodsKtClassOrObject
toLightClass0KtClassOrObject
hasRepeatableAnnotationContainerPsiMethod
canBeSetterPsiMethod
canBeGetterPsiElement
unwrapped'PsiElement
getRepresentativeLightMethodKtParameter
toPsiParameters+PsiMethod
probablyCanHaveSyntheticAccessorsPsiMethod
isFinalProperty#KtParameter
toAnnotationLightMethod#PsiAnnotation
withNestedAnnotationsKtParameter
toLightSetterKtElement
toLightElementsKtElement
toLightAnnotationPsiMethod
syntheticSetters(KtClassOrObject
hasInterfaceDefaultImpls PsiElement
namedUnwrappedElementPsiMethod
setterNamesFqName
defaultImplsChildKtFile
findFacadeClass)FqName
repeatableAnnotationContainerChildKtParameter
toLightGetter KtClassOrObject
toFakeLightClass8LanguageVersionSettings
isLibraryToSourceAnalysisEnabled-CompilerConfiguration
languageVersionSettingsLanguageVersion
toKotlinVersion1LanguageFeature
forcesPreReleaseBinariesIfEnabled)LanguageVersion
isStableOrReadyForPreviewGenerator
getOrFail-Generator
getExpressionTypeWithCoercionToUnit)Generator
getTypeInferredByFrontendOrFailGenerator
getGenerator
getResolvedCall3Generator
getExpressionTypeWithCoercionToUnitOrFail#Generator
getTypeInferredByFrontendResolvedCall
isImplicitInvokeResolvedCall
isImplicitGetResolvedCall
isImplicitSetKtElement
getDynamicOperator/SimpleType
getSubstitutedFunctionTypeForSamType&DeclarationDescriptor
isSamConstructor/KotlinType
getSubstitutedFunctionTypeForSamTypeSamConversion
isSamType9CallableDescriptor
getOriginalForFunctionInterfaceAdapterCallGenerator
generateCall*IrProperty
linkCorrespondingPropertySymbolGenerator
createBodyGenerator:KtPureClassOrObject
getStartOffsetOfClassDeclarationOrNullAKtPureElement
getStartOffsetOfConstructorDeclarationKeywordOrNull>KtPureElement
getStartOffsetOfFunctionDeclarationKeywordOrNull$StatementGenerator
computeVarargType>StatementGenerator
generateReceiverForCalleeImportedFromObject5StatementGenerator
createFunctionForSuspendConversionCStatementGenerator
applySuspendConversionForValueArgumentIfRequired)IrMemberAccessExpression
putTypeArgumentsFStatementGenerator
generateContextReceiverForDelegatingConstructorCall)StatementGenerator
generateReceiverOrNull"ResolvedCall
isExtensionInvokeCall.StatementGenerator
getSamTypeForValueParameterCStatementGenerator
generateSamConversionForValueArgumentsIfRequired'StatementGenerator
generateCallReceiver0StatementGenerator
generateVarargExpressionUsing&StatementGenerator
loadContextReceiver(StatementGenerator
generateValueArgumentGenerator
getSuperQualifier1StatementGenerator
pregenerateValueArgumentsUsing-StatementGenerator
generateValueArgumentUsing#StatementGenerator
generateReceiver/StatementGenerator
generateBackingFieldReceiver"StatementGenerator
pregenerateCall1StatementGenerator
pregenerateExtensionInvokeCall=StatementGenerator
shouldGenerateReceiverAsSingletonReference>StatementGenerator
castArgumentToFunctionalInterfaceForSamType+StatementGenerator
pregenerateCallReceivers.StatementGenerator
generateThisOrSuperReceiver'StatementGenerator
pregenerateCallUsing-StatementGenerator
generateSingletonReferenceCallReceiver
adjustForCalleeIrVariable
loadAt'IrExpression
safeCallOnDispatchReceiverCallBuilder
argumentsCount CallBuilder
dispatchReceiverType-CallBuilder
getValueArgumentsInParameterOrder CallBuilder
hasExtensionReceiverCallBuilder
lastArgument$CallBuilder
setExplicitReceiverValue-CallBuilder
isValueArgumentReorderingRequired%Scope
declareTemporaryVariableInBlock$Scope
createTemporaryVariableInBlockIrType
asJvmFlexibleTypeIrType
isWithFlexibleMutability IrType
isWithFlexibleNullability$JvmBackendContext
createJvmIrBuilder!IrType
isMultiFieldValueClassType(IrTypeParameter
representativeUpperBoundIrType
isValueClassTypeIrType
upperBoundIrType
defaultValueIrType
eraseTypeParametersIrTypeArgument
eraseToScopeIrType
eraseToScope"IrTypeArgument
eraseTypeParametersIrType
isInlineClassTypeIrType
isReifiedTypeParameterIrFunction
isInlineFunctionCall!IrFunction
isPrivateInlineSuspend3IrDeclarationWithVisibility
isEffectivelyInlineOnlyIrFunction
isReifiable#IrDeclaration
isInPublicInlineScopeIrDeclaration
originalIrStatement
unwrapInlineLambda/IrAttributeContainer
getDeclarationBeforeInline#IrDeclaration
inlineScopeVisibility2IrAttributeContainer
getAttributeOwnerBeforeInline$IrDeclaration
fileParentBeforeInlineIrDeclaration
isInlineOnlyIrFile
findInlineCallSitesIrFile
findInlineLambdasJvmIrBuilder
irArrayOfJvmIrBuilder
irArray(KtElement
getChildTokenStartOffsetOrNullMemberScope
findSingleFunctionKtElement
deparenthesize&PropertyDescriptor
resolveFakeOverride5KtSecondaryConstructor
isConstructorDelegatingToSuper%PropertyDescriptor
unwrappedSetMethod.ResolvedCall
isValueArgumentReorderingRequired(KtPureElement
pureStartOffsetOrUndefined%PropertyDescriptor
unwrappedGetMethod&KtPureElement
pureEndOffsetOrUndefinedPsiElement
endOffsetOrUndefinedKotlinType
containsNull!PsiElement
startOffsetOrUndefined IrSimpleFunction
resolvesToClass$IrSimpleFunction
overriddenFromClass'IrFunction
isNonBoxingSuspendDelegation(IrFunction
isInvokeSuspendOfContinuation&IrFunction
isBridgeToSuspendImplMethod&IrFunction
shouldContainSuspendMarkers+IrFunction
isInvokeSuspendForInlineOfLambda7IrFunction
isStaticInlineClassReplacementDelegatingCallBIrFunction
isStaticInlineClassReplacementForDefaultInterfaceMethod IrExpression
isReadOfCrossinline"IrFunction
isInvokeSuspendOfLambda-IrFunction
isInvokeOfSuspendCallableReferenceIrFunction
hasContinuation IrFunction
continuationParameterIrFunction
isArrayOfIrFunction
isEmptyArray IrScript
needsReceiverProcessingIrClass
addAnonymousInitializer!IrClass
isOptionalAnnotationClass.IrSimpleFunction
copyCorrespondingPropertyFromIrField
constantValue IrFunction
extensionReceiverNameIrFunction
propertyIfAccessor,IrDeclaration
isStaticInlineClassReplacementIrProperty
needsAccessorIrSimpleType
isRawTypeIrClass
isJvmInterfaceIrClass
getAnnotationRetention"IrFunction
suspendFunctionOriginal*DeclarationDescriptorWithSource
psiElement5IrDeclaration
isStaticMultiFieldValueClassReplacement.IrDeclaration
getCallableReferenceTopLevelFlagIrFunction
hasPlatformDependent$IrClass
buildAssertionsDisabledField"IrClass
hasAssertionsDisabledField!IrField
isAssertionsDisabledField'IrSimpleFunction
isCompiledToJvmDefaultJvmIrBuilder
javaClassReferenceJvmIrBuilder
kClassToJavaClass/IrMemberAccessExpression
getStringConstArgument0IrClass
hasJvmDefaultWithCompatibilityAnnotation2IrSimpleFunction
isOrOverridesDefaultParameterStub*IrFunctionAccessExpression
receiverAndArgs7IrDeclarationParent
getCallableReferenceOwnerKClassType&IrDeclaration
getJvmNameFromAnnotationIrElement
hasChild0IrMemberAccessExpression
getBooleanConstArgumentIrSimpleFunction
isJvmAbstract=IrMemberAccessExpression
copyFromWithPlaceholderTypeArguments)IrMemberWithContainerSource
parentClassIdIrClass
rawType#IrMemberAccessExpression
psiElement.IrClass
hasJvmDefaultNoCompatibilityAnnotation&IrElement
replaceThisByStaticReference"IrConstructorCall
getValueArgumentIrDeclaration
psiElementIrFile
getKtFileIrDeclaration
fileParent.IrExpression
isSmartcastFromHigherThanNullable'JvmBackendContext
makeRawTypeAnnotationIrClass
isSyntheticSingletonIrFile
getIoFileIrFunction
hasJvmDefault0IrFunction
getJvmVisibilityOfDefaultArgumentStubIrFunction
isBridge+IrDeclaration
isStaticValueClassReplacement(IrSimpleFunction
suspendFunctionOriginal,IrMemberAccessExpression
getIntConstArgumentIrDeclaration
isInCurrentModule/IrFunction
isSimpleFunctionCompiledToJvmDefault!IrSimpleFunction
isGenericToArrayIrClass
isCollectionSubClassIrType
isArrayOrNullableArray$IrSimpleFunction
isNonGenericToArrayIrType
isArrayOrNullableArrayOf@IrProperty
getSingletonOrConstantForOptimizableDelegatedProperty*IrSimpleFunction
returnsResultOfStdlibCall#IrProperty
isJvmOptimizableDelegate>IrProperty
getPropertyReferenceForOptimizableDelegatedPropertyIrFile
getFileClassInfoIrFunction
capturesCrossinline*IrSimpleFunction
suspendFunctionViewOrStub.IrMemberAccessExpression
retargetToSuspendViewIrClass
findEnumValuesFunctionIrField
shouldMoveToFacade0IrSimpleFunction
createMultifileDelegateIfNeededIrField
resolveFakeOverride$IrDeclaration
isJvmStaticInCompanion!IrDeclaration
isJvmStaticInObject$IrDeclaration
isJvmStaticDeclaration#IrMemberAccessExpression
makeStaticIrGetField
isGetFieldOfUnitList
findTailCallIrClass
toStringFunction%JvmIrBuilder
lowerInlineClassArgument"IrExpression
unwrapImplicitNotNullJvmIrBuilder
callToStringJvmIrBuilder
normalizeArgumentIrBlock
parseSafeCallIrBlock
parseElvis!IrFunctionReference
replaceOriginIrStatementOrigin
isInlinableList
subListWithoutLast&BlockOrBody
makeBodyWithAddedVariables!IrBody
makeBodyWithAddedVariables7BlockOrBody
extractVariablesSettersToOuterPossibleBlockMutableList
replaceAllIrStatement
containsUsagesOf2IrSimpleFunction
isDefinitelyNotDefaultImplsMethod!IrSimpleFunction
isCloneableClone0IrExpression
reinterpretAsDispatchReceiverOfTypeIrClass
getFlagsIrClass
getSynthAccessFlagIrField
computeFieldFlags*IrField
isPrivateCompanionFieldInInterfaceModality
flagsType
isAnonymousClassDescriptorVisibility
flagsIrDeclarationOrigin
flagsPromisedValue
materializeAtExpressionCodegen
unitValue PromisedValue
materializeAtBoxedPromisedValue
materializedPromisedValue
materialize!PromisedValue
materializedAtBoxedPromisedValue
materializedAtExpressionCodegen
nullConstantIrType
anyTypeArgumentPromisedValue
coerceToBooleanIrClass
applicableTargetSet+IrValueParameter
isSyntheticMarkerParameterIrFunction
continuationClass0IrSimpleFunction
overridesReturningDifferentType%IrFunction
suspendForInlineToOriginal(IrFunction
isSuspendCapturingCrossinline!IrExpression
isReadOfInlineLambda!MethodNode
acceptWithStateMachine1IrFunction
anyOfOverriddenFunctionsReturnsNonUnitIIrFunction
originalReturnTypeOfSuspendFunctionReturningUnboxedInlineClassIrFrameMap
leave3IrFunction
isAccessorForDeprecatedJvmStaticProperty'IrClass
getVisibilityAccessFlagForClass1IrDeclaration
getVisibilityAccessFlagForAnonymous&IrClass
calculateInnerClassAccessFlags'IrDeclaration
isAnnotatedWithDeprecatedAIrFunction
isAccessorForDeprecatedPropertyImplementedByDelegation!JvmBackendContext
getSourceMapperIrFrameMap
enter9IrDeclarationWithVisibility
isInlineOnlyPrivateInBytecode1IrDeclarationWithVisibility
specialCaseVisibilityIrFunction
isDeprecatedFunction"IrDeclaration
isDeprecatedCallableIrTypeMapper
mapClassSignature*IrClass
innerAccessFlagsForModalityAndKindIrType
isExtensionFunctionType3IrDeclarationWithVisibility
getVisibilityAccessFlagIrClass
reifiedTypeParametersIrLoop
nonLocalReturnLabelIrTypeMapper
mapTypeParameter#IrSimpleType
buildPossiblyInnerType!IrTypeMapper
mapTypeAsDeclarationIrTypeMapper
mapTypeIrTypeMapper
mapClassIrTypeMapper
mapOwnerIrTypeMapper
mapSupertypeIrDeclaration
wrapToOrigin!JvmDeclarationOrigin
unwrapOriginIrDeclaration
descriptorOrigin0IrDeclaration
findPsiElementForDeclarationOrigin#IrFunctionAccessExpression
argTypesIrFunction
hasMangledReturnType,IrFunction
isMultiFieldValueClassFieldGetterIrType
unboxInlineClass#IrFunction
isInlineClassFieldGetter!IrFunction
fullValueParameterListIrClass
inlineClassFieldNameIrType
getRequiresManglingIrFunction
hasMangledParametersIrClassSymbol
fieldByNameIrClassSymbol
functionByNameIrFunction
isMultifileBridgeMfvcNodeInstance
size7IrStatementsBuilder
savableStandaloneVariableWithSetter$MfvcNodeInstance
addSetterStatements!IrExpression
isRepeatableAccessorIrExpression
isRepeatableGetter!MfvcNodeInstance
checkValuesCount&MfvcNodeInstance
makeSetterExpressionsIrExpression
isRepeatableSetter!IrContainerExpression
unwrapBlock,IrBuilderWithScope
savableStandaloneVariable*IrModuleFragment
stubOrphanedExpectSymbolsIrSimpleFunction
getGetterFieldMfvcNode
flatMapLeaves,MfvcNode
createInstanceFromValueDeclarationsMfvcNode
getSubnodeAndIndicesNameableMfvcNode
unboxMethodIrType
needsMfvcFlatteningMfvcNode
mapLeavesMfvcNode
createInstanceFromBoxNameableMfvcNode
namePartsNameableMfvcNode
nameNameableMfvcNode
fullFieldNameList
subnodeIndicesList
mapLeavesList
allEqualList
leavesMfvcNodeWithSubnodes
get6MfvcNode
createInstanceFromValueDeclarationsAndBoxType IrSimpleFunction
isDefaultGetterNameableMfvcNode
fullMethodNameMfvcNode
fields.MfvcNodeWithSubnodes
collectLeavesUnboxMethods(MfvcNodeWithSubnodes
makeBoxedExpressionList
fields$JvmBackendContext
irInlinerIsEnabledIrClass
isGeneratedLambdaClassIrFactory
addClassIrProperty
isStatic$IrProperty
backingFieldIfNotDelegateIrClass
isKotlinExternalStubIrProperty
getterIfDeclaredList
onAllFilesIrBlockBuilder
irIntPlus!StringBuilder
appendParameterList,IrBuilderWithScope
createAssociatedObjectAdd6IrAnnotationContainer
hasExcludedFromCodegenAnnotation(IrAnnotationContainer
getJsFunAnnotation(IrAnnotationContainer
getJsPrimitiveType/IrAnnotationContainer
hasWasmNoOpCastAnnotation;IrAnnotationContainer
hasWasmPrimitiveConstructorAnnotation)IrAnnotationContainer
getWasmOpAnnotation,IrAnnotationContainer
getWasmArrayAnnotation"IrFunction
getWasmImportDescriptor0IrAnnotationContainer
hasWasmAutoboxedAnnotationIrSimpleFunction
wasmSignatureSequence
filterVirtualFunctionsIrClass
hasInterfaceSuperClassIrClass
allFieldsIrClass
getSuperClassIrClass
allSuperInterfaces1WasmExpressionBuilder
buildUnreachableForVerifier6WasmExpressionBuilder
buildUnreachableAfterNothingTypeInt
toLittleEndianBytesLong
toLittleEndianBytesToChar
toLittleEndianBytesIrTry
isCanonicalIrClass
isAbstractOrSealed&IrFunction
getEffectiveValueParametersIrFunction
isExportedString
toJsStringLiteralIrType
getRuntimeClass&BodyGenerator
tryGenerateOptimisedWhenBodyGenerator
createBinaryTableBodyGenerator
genTableIntSwitch1WasmCompiledModuleFragment
generateAsyncJsWrapperIrExpression
isPure*IrFunction
isInlineFunWithReifiedParameter4IrFunction
getAdapteeFromAdaptedForReferenceFunction,CommonBackendContext
createArrayOfExpressionIrBranch
isUnconditional%IrSimpleFunction
addExtensionReceiver$IrSimpleFunction
addDispatchReceiverIrReturnTarget
returnTypeIrDeclaration
isProperExpectIrDeclaration
isExpect>IrInlinedFunctionBlock
getAdditionalStatementsFromInlinedBlock<IrInlinedFunctionBlock
putStatementsInFrontOfInlinedFunctionIrFunction
inlineIrExpression
asInlinableLambdaIrExpression
asInlinable IrReturnableBlock
inlineFunctionHIrInlinedFunctionBlock
getNonDefaultAdditionalStatementsFromInlinedBlockEIrInlinedFunctionBlock
getDefaultAdditionalStatementsFromInlinedBlock(IrInlinedFunctionBlock
inlineDeclaration)IrExpression
asInlinableFunctionReferenceIrFunction
moveBodyTo5IrInlinedFunctionBlock
putStatementBeforeActualInlineIrBody
move-IrContainerExpression
innerInlinedBlockOrThis'IrInlinedFunctionBlock
isLambdaInlining<IrInlinedFunctionBlock
getOriginalStatementsFromInlinedBlock%IrInlinedFunctionBlock
inlineFunction"IrReturnableBlock
sourceFileSymbolIrInlinable
inline)IrInlinedFunctionBlock
isFunctionInlining;DeclarationIrBuilder
createLoopTemporaryVariableIfNecessary
Any
toLong7DeclarationIrBuilder
createTemporaryVariableIfNecessaryAny
toDouble	Any
toIntIrExpression
canHaveSideEffects
Any
toByteIrExpression
castIfNecessary*IrExpression
canChangeValueDuringExecutionIrExpression
negateAny
toShortAny
toFloatIrExpression
constLongValueIrExpression
decrementIrStatement
isInductionVariable'IrExpression
isAdaptedFunctionReferenceIrFunction
isTopLevelInPackage9IrFunction
isBuiltInSuspendCoroutineUninterceptedOrReturn8IrSimpleFunction
getOrCreateFunctionWithContinuationStubBitSet
withBitBitSet
withOutBit+IrBuilderWithScope
irImplicitCoercionToUnitIrConstructor
delegationKindIrBuilderWithScope
irThrowIrBuilderWithScope
irCatchIrBuiltIns
createIrBuilderIrGetValue
actualizeBackendContext
createIrBuilder(ParameterDescriptor
copyAsValueParameterIrBuilderWithScope
irNotIrConstructor
callsSuper'TailrecLowering
lowerTailRecursionCalls*IrValueParameterSymbol
suggestVariableName"IrExpression
replaceTailExpressionIrProperty
isRealLateinit,CommonBackendContext
buildOrGetNullableField2InnerClassesSupport
primaryConstructorParameterMap#IrField
primaryConstructorParameterIrDeclaration
parentsIrDeclaration
parentsWithSelfIrClass
isLocalNotInner IrValueParameter
isMovedReceiverCompilerPhase
toPhaseMapFunction3
plus!PhaserState
changePhaserStateTypeCompilerPhase
invokeToplevelPhaserState
downlevelIrFile
copySavingMappingsActionState
isValidationNeededActionState
isDumpNeededIrElement
elementNameCompilerPhase
then%IrMessageLogger
checkNoUnboundSymbols$KotlinIrLinker
checkNoUnboundSymbols+CompilerConfiguration
checkNoUnboundSymbols.UserVisibleIrModulesSupport
getProblemModuleIdMap
describeDependencyStates'StringBuilder
appendProjectDependenciesMap
findMatchingModule6StringBuilder
appendPotentiallyConflictingDependencies'Appendable
invalidConstructorDelegationAppendable
appendCapitalized.StringBuilder
expressionWithUnusableClassifier Appendable
declarationNameIsKind*Appendable
suspendableCallWithoutCoroutineAppendable
unusableAnnotationAppendable
declarationKindName Appendable
illegalNonLocalReturnAppendable
module"Appendable
inaccessibleDeclarationIrExpression
expressionAppendable
declarationNameAppendable
signature!Appendable
wrongTypeOfDeclaration!Appendable
noDeclarationForSymbolIrSymbol
declarationKind(Appendable
unimplementedAbstractCallable,Appendable
declarationWithUnusableClassifierAppendable
unusableClassifierStringBuilder
expressionAppendable
declarationKind%PartialLinkageCase
renderLinkageError2Appendable
memberAccessExpressionArgumentsMismatch'Appendable
cantInstantiateAbstractClassIrSymbol
guessNameMap
getMatchesIrFunction
matchList
getMatches%IrElement
containsOptionalExpectationBKtDiagnosticReporterWithImplicitIrBasedContext
reportMissingActual"MutableMap
appendTypeParametersMapIrDeclaration
isBuiltinMemberCallableDescriptor
isSuspend CallableDescriptor
allParametersString
synthesizedNameString
synthesizedStringIrElement
sourceElementMutableList
peek"CommonBackendContext
reportWarning.BodyAndScriptBodyLoweringPass
runOnFilePostfixFileLoweringPass
lower1DeclarationContainerLoweringPass
runOnFilePostfix!BodyLoweringPass
runOnFilePostfix#ScriptLoweringPass
runOnFilePostfixFunction3
toMultiModuleAction"ClassLoweringPass
runOnFilePostfixName
isAnonymousIterable
collectForMangler.DeclarationDescriptorWithSource
findKDocStringIterable
maybeChunkedIrBuiltIns
knownBuiltinsIrLibraryFile
createFileIrLibraryFile
deserializeFqNameIrSymbol
kind.IrModuleDeserializer
deserializeIrSymbolOrFailString
cityHash64$DeclarationDescriptor
isExpectMember+ModuleDescriptor
isForwardDeclarationModule!DeclarationDescriptor
findPackage1DeclarationDescriptor
extractSerializedKdocString/DeclarationDescriptor
isSerializableExpectClass'CallableMemberDescriptor
findSourceFileByteArray
codedInputStream8IrModuleDeserializer
findModuleDeserializerForTopLevelIdIterable
atMostOneCollection
atMostOne!IrElement
checkDeclarationParents,CommonBackendContext
reportIrValidationErrorKMutableProperty0
getOrPutDelegate
getOrPutBitSet
forEachBitBitSet
copyAFunctionDescriptor
isBuiltInSuspendCoroutineUninterceptedOrReturn&Throwable
wrapWithCompilationExceptionType
isPrimitiveIntOrCoercible4ExpressionCodegen
createIntrinsifiedRangeValueOrNull0ExpressionCodegen
createReversedRangeValueOrNull/ExpressionCodegen
createRangeValueForExpressionStackValue
unsignedType#ExpressionCodegen
isArraySizeAccessExpressionCodegen
isConstantOne6ExpressionCodegen
canBeSpecializedByExcludingHighBound%ExpressionCodegen
isArraySizeMinusOneClassBuilderFactory
wrapWith7CallableMemberDescriptor
createTypeParameterWithNewNameATypeSystemCommonBackendContext
isMostPreciseContravariantArgument1TypeMappingMode
updateArgumentModeFromAnnotations+DeclarationDescriptor
suppressWildcardsMode=TypeSystemCommonBackendContext
isMostPreciseCovariantArgument7CallableDescriptor
isMethodWithDeclarationSiteWildcards*AnnotationDescriptor
suppressWildcardsModeCTypeSystemCommonBackendContext
extractTypeMappingModeFromAnnotationATypeSystemCommonBackendContext
canHaveSubtypesIgnoringNullability1FqName
isMethodWithDeclarationSiteWildcardsFqName&KotlinTypeMarker
suppressWildcardsModeAppendable
appendQuotedAppendable
appendNameValueFrame
getSourceRangeMapping
toRange5TypeSystemCommonBackendContext
generateTypeOfArgument-TypeSystemCommonBackendContext
generateTypeOfHTypeSystemCommonBackendContext
typeReferencesParameterWithRecursiveBound>TypeSystemCommonBackendContext
generateNonReifiedTypeParameter)InstructionAdapter
unrollArrayIfFewerThan5TypeSystemCommonBackendContext
createTypeOfMethodBodySLRUMap
getOrPut%FunctionDescriptor
explicitParameters%TryCatchBlockNodeInfo
bodyInstuctionsMethodInsnNode
operationKind"MethodInsnNode
reificationArgumentMethodNode
inlineBridge2MethodNode
findCapturedFieldAssignmentInstructionsBasicValue
functionalArgument5AbstractInsnNode
isAloadBeforeCheckParameterIsNotNullMethodNode
removeAbstractInsnNode
isAload0"AbstractInsnNode
getNextMeaningfulGenerationState
trackLookup,DeclarationDescriptor
isInlineOrInsideInline1DeclarationDescriptor
getInlineCallSiteVisibility'IntervalMetaInfo
getMeaningfulIntervalsInterval
isMeaninglessTryCatchBlockNode
isMeaningless)AbstractInsnNode
isInplaceCallStartMarker6AbstractInsnNode
isProhibitedDuringArgumentsEvaluation+AbstractInsnNode
isInplaceArgumentEndMarker,InstructionAdapter
addInplaceCallStartMarker-AbstractInsnNode
isInplaceArgumentStartMarker0InstructionAdapter
addInplaceArgumentStartMarker*InstructionAdapter
addInplaceCallEndMarkerInstructionAdapter
addMarker'AbstractInsnNode
isInplaceCallEndMarker.InstructionAdapter
addInplaceArgumentEndMarkerMethodNode
fixupLVTCollection
lineNumberRangeMethodNode
dumpBody%String
isNumberedFunctionInternalNameAbstractInsnNode
insnOpcodeText#InstructionAdapter
emitInlineMarkerTryCatchBlockNode
textMethodNode
nodeTextString
isIntegerAbstractInsnNode
insnText#MethodNode
preprocessSuspendMarkers)FunctionDescriptor
allValueParameterTypesType
isIntLike*MethodNode
allSuspensionPointsAreTailCallsAbstractInsnNode
nextMeaningful*AbstractInsnNode
isInvisibleInDebugVarInsn$AbstractInsnNode
skipUntilMeaningfulAbstractInsnNode
isReturnUnit&MethodNode
addCoroutineSuspendedChecks BasicValue
toFromSuspensionPoint&AbstractInsnNode
isPopBeforeReturnUnit9FunctionDescriptor
isLocalSuspendFunctionNotSuspendLambda*FunctionDescriptor
isInvokeSuspendOfLambdaModuleDescriptor
getResult2InstructionAdapter
generateCoroutineSuspendedCheck8ResolvedCall
replaceSuspensionFunctionWithRealDescriptorMethod
getImplForOpenMethod/InstructionAdapter
loadCoroutineSuspendedMarkerFqName
identifiedChild.InstructionAdapter
invokeInvokeSuspendWithUnit#FunctionDescriptor
createCustomCopy5CallableDescriptor
isSuspendFunctionNotSuspensionViewQFunctionDescriptor
originalReturnTypeOfSuspendFunctionReturningUnboxedInlineClassString
isCoroutineSuperClass<CallableDescriptor
unwrapInitialDescriptorForSuspendFunction1FunctionDescriptor
getOriginalSuspendFunctionViewResolvedCall
isSuspensionPoint1FunctionDescriptor
isSuspendLambdaOrLocalFunctionFFunctionDescriptor
isBuiltInSuspendCoroutineUninterceptedOrReturnInJvm"ResolvedCall
asMutableResolvedCall#InstructionAdapter
invokeGetContext@FunctionDescriptor
getContinuationParameterTypeOfSuspendFunction*NewResolvedCallImpl
asDummyOldResolvedCall(LocalVariableNode
extendRecordIfPossibleType
fieldNameForVarMethodNode
nodeTextWithLiveness3InstructionAdapter
generateResumeWithExceptionCheck6InstructionAdapter
generateContinuationConstructorCallList
containsType
normalize%InstructionAdapter
fakeAlwaysTrueIfeq"InstructionAdapter
fixStackAndJumpAbstractInsnNode
isPseudoInstructionAdapter
asNotNullInstructionAdapter
storeNotNull&InstructionAdapter
fakeAlwaysFalseIfeq*AbstractInsnNode
isPrimitiveTypeConversionAbstractInsnNode
isUnitInstanceAbstractInsnNode
isPopAbstractInsnNode
isPurePushType
toFixStackValueAbstractInsnNode
findNextOrNull%MethodNode
removeUnusedLocalVariablesAbstractInsnNode
takeInsnIfMethodNode
remapLocalVariablesMethodNode
prepareForEmitting%VarInsnNode
isSize2LoadStoreOperationAbstractInsnNode
intConstant!MethodNode
removeEmptyCatchBlocks!AbstractInsnNode
isStoreOperationAbstractInsnNode
debugTextInsnList
asSequenceMethodNode
updateMaxStackAbstractInsnNode
isInsn#MethodNode
stripOptimizationMarkersAbstractInsnNode
hasOpcodeAbstractInsnNode
isBranchOrCall AbstractInsnNode
isLoadOperation#AbstractInsnNode
findPreviousOrNullInsnList
removeAllAbstractInsnNode
isMeaningfulEAbstractInsnNode
isJavaLangComparableCompareToForSameTypedBoxedValues6AbstractInsnNode
isNextMethodCallOfProgressionIterator$AbstractInsnNode
isInlineClassBoxing'MethodInsnNode
isBoxingMethodDescriptor&AbstractInsnNode
isInlineClassUnboxing2MethodInsnNode
isInlineClassBoxingMethodDescriptor2AbstractInsnNode
isIteratorMethodCallOfProgressionAbstractInsnNode
isBoxing(AbstractInsnNode
isJavaLangClassUnboxing;AbstractInsnNode
isAreEqualIntrinsicForSameTypedBoxedValues"AbstractInsnNode
isPrimitiveBoxingAbstractInsnNode
isUnboxing+AbstractInsnNode
isCoroutinePrimitiveBoxing$AbstractInsnNode
isAreEqualIntrinsic;MethodInsnNode
isMultiFieldValueClassBoxingMethodDescriptor=MethodInsnNode
isMultiFieldValueClassUnboxingMethodDescriptor&AbstractInsnNode
isJavaLangClassBoxing%AbstractInsnNode
isIteratorMethodCall4MethodInsnNode
isInlineClassUnboxingMethodDescriptor/AbstractInsnNode
isMultiFieldValueClassUnboxing-AbstractInsnNode
isMultiFieldValueClassBoxing$AbstractInsnNode
isPrimitiveUnboxing!AbstractInsnNode
isMethodInsnWith.AbstractInsnNode
isJavaLangComparableCompareToFrame
peekWordsToFrame
peekWords
Frame
peek	Frame
topBasicValue
getNullability&TryCatchBlockNode
isDefaultHandlerNodeMethodNode
debugStringTypeInsnNode
getObjectTypeAbstractInsnNode
isCheckNotNull!AbstractInsnNode
isThrowIntrinsic0AbstractInsnNode
isCheckExpressionValueIsNotNull(AbstractInsnNode
isInstanceOfOrNullCheck*AbstractInsnNode
isCheckParameterIsNotNull,MethodNode
usesLocalExceptParameterNullCheck*AbstractInsnNode
isCheckNotNullWithMessage InsnList
popReferenceValueBefore*AbstractInsnNode
isParameterCheckedForNullInsnList
removeNodeGetNextInsnList
replaceNodeGetNextClassBuilder
generateMethod:CallableMemberDescriptor
isDefinitelyNotDefaultImplsMethodCollection
withVariableIndices FqName
topLevelClassInternalName#String
isDefinitelyFitEncodingLimitKotlinType
asmType/CallableDescriptor
isJvmStaticInCompanionObject1KotlinType
isInlineClassTypeWithPrimitiveEqualityFqName
topLevelClassAsmType(CallableDescriptor
unwrapFrontendVersion,ExpressionCodegen
generateCallSingleArgumentString
encodedUTF8SizeFrameMap
useTmpVarCallableDescriptor
arity&ExpressionCodegen
generateCallReceiverKtExpression
kotlinType8CallableDescriptor
isJvmStaticInObjectOrClassOrInterfaceKtExpression
asmTypeLabelNode
linkWithLabel CallableDescriptor
isJvmStaticIn/Collection
filterOutDescriptorsWithSpecialNames(MemberDescriptor
isToArrayFromCollection?InstructionAdapter
generateNewInstanceDupAndPlaceBeforeStackTop+CallableDescriptor
isJvmStaticInInlineClassFrameMap
evaluateOnce&FunctionDescriptor
isNonGenericToArray;TypeSystemCommonBackendContext
extractUsedReifiedParameters-SpecialSignatureInfo
replaceValueParametersIn9TypeSystemCommonBackendContext
extractReificationArgument0ClassDescriptor
isPossiblyUninitializedSingleton#FunctionDescriptor
isGenericToArrayList
filterClassFiles!Builder
addDataFromCompiledModule"GenerationState
loadCompiledModuleIterable
addCompiledPartsClassFileFactory
getClassFiles Iterable
addCompiledPartsAndSort2FunctionDescriptor
isJavaForKotlinOverrideProperty8CallableMemberDescriptor
isJvmDefaultOrPlatformDependent8FunctionDescriptor
containerEntityForEqualityAndHashCode9FunctionDescriptor
isBuiltinAlwaysEnabledAssertWithLambda)ResolvedCall
replaceAssertWithAssertInner/FunctionDescriptor
isBuiltinAlwaysEnabledAssert<FunctionDescriptor
isBuiltinAlwaysEnabledAssertWithoutLambda%FieldInsnNode
isCheckAssertionsStatusClassBuilder
addRecordComponentGBaseExpressionCodegen
putReifiedOperationMarkerIfTypeIsReifiedParameter:CallableMemberDescriptor
getSpecialBridgeSignatureIfExists-CalculatedClosure
isForBoundCallableReferenceDInstructionAdapter
generateClosureFieldsInitializationFromParameters/CalculatedClosure
isBoundReferenceReceiverField(CalculatedClosure
isForCallableReference4ClassDescriptor
isSyntheticClassForCallableReference6InstructionAdapter
loadBoundReferenceReceiverParameter#CallableMemberDescriptor
getJvmName.ClassDescriptor
syntheticAccessorToSuperSuffixType
classId3KotlinType
isInlineClassWithUnderlyingTypeAnyOrAnyN%CallableDescriptor
isGenericParameterTypeApproximator
approximate2ReceiverParameterDescriptor
substituteTopLevelTypeChar
isValidCharacterProjectContext
withModuleGlobalContext
withProjectArray
insertEntryAtIndexArray
replaceEntryWithNodeArray
replaceNodeWithEntryArray
removeEntryAtIndexSet
toPersistentHashSetPersistentCollection
plusPersistentSet
plusPersistentMap
putAllPersistentList
plusPersistentSet
mutateIterable
toPersistentSetMap
toPersistentMapPersistentMap
mutatePersistentList
mutateCharSequence
toPersistentSetMap
toPersistentHashMapPersistentList
minusIterable
toPersistentListPersistentCollection
minusCharSequence
toPersistentListCharSequence
toImmutableListPersistentMap
plusPersistentSet
minusPersistentMap
minus#ModuleDescriptorImpl
isStdlibModule!KlibModuleOrigin
isInteropLibraryKotlinLibrary
isInteropLibrary=CallableMemberDescriptor
isCompiledToJvmDefaultWithProperMode;CallableMemberDescriptor
isInsideCompanionObjectOfInterface'TypeWithEnhancement
enhancementFromJava KotlinType
enhancementFromKotlinKotlinType
mustNotBeNull!KtModifierList
findOneOfModifiersJvmTarget
areRecordsAllowedMethod
parametersDescriptor$Annotated
findJvmSyntheticAnnotationBCallableMemberDescriptor
checkIsImplementationCompiledToJvmDefault,DeclarationDescriptor
findJvmFieldAnnotation<DeclarationDescriptor
hasJvmDefaultNoCompatibilityAnnotation0DeclarationDescriptor
findSynchronizedAnnotation/DeclarationDescriptor
hasJvmSyntheticAnnotation0DeclarationDescriptor
findJvmOverloadsAnnotation:DeclarationDescriptor
isCallableMemberCompiledToJvmDefault7CallableMemberDescriptor
hasPlatformDependentAnnotation0CallableMemberDescriptor
hasJvmDefaultAnnotation/CallableMemberDescriptor
isCompiledToJvmDefault>DeclarationDescriptor
hasJvmDefaultWithCompatibilityAnnotationClassDescriptor
isJvmRecord+DeclarationDescriptor
hasJvmFieldAnnotation,DeclarationDescriptor
findStrictfpAnnotation)Collection
containsAnyNotTrivialSignature"FunctionDescriptor
containsVarargs)FunctionDescriptor
hasNotTrivialSignature(KtExpression
textForRuntimeAssertionInfo6DeclarationDescriptor
isValueClassThatRequiresMangling7KotlinType
requiresFunctionNameManglingInParameterTypes+KotlinType
isValueClassThatRequiresMangling<KotlinType
isTypeParameterWithUpperBoundThatRequiresMangling7SamConversionResolver
getFunctionTypeForPossibleSamType)AnnotationDescriptor
getSourceForArgument+ModuleDescriptor
findPackageFragmentForFileKtFile
fileScopesCustomizer%KtNamedDeclaration
isSingleUnderscore%ResolvedCall
getImplicitReceiverValue)CandidateApplicability
toResolutionStatus!ResolvedCall
getImplicitReceivers-ResolvedCall
getDispatchReceiverWithSmartCastResolvedCall
hasBothReceivers(ResolvedCall
hasThisOrNoDispatchReceiver"ResolvedCall
hasInferredReturnType)KtCallElement
getArgumentByParameterIndexResolvedCall
isNewNotCompleted$ResolvedCall
hasSafeNullableReceiver%ResolvedCall
getExplicitReceiverValue"CallableDescriptor
isNotSimpleCall+ResolvedCall
makeNullableTypeIfSafeReceiver1CallableDescriptor
isLowPriorityFromStdlibJre7Or8Call
hasUnresolvedArguments,KtCallElement
getValueArgumentsInParentheses'ResolvedCall
getFirstArgumentExpressionCall
getResolvedCallWithAssert"Call
getValueArgumentListOrElement!ResolvedCall
hasUnmappedArguments!ResolvedCall
usesDefaultArgumentsPsiElement
isCallableReferenceCall
isSafeCall"ResolvedCall
hasUnmappedParameters-KotlinCall
extractCallableReferenceExpressionKtElement
getParentResolvedCall,ResolvedCall
hasTypeMismatchErrorOnParameter#Call
getValueArgumentsInParentheses.KtExpression
getPropertyResolvedCallWithAssert$NewTypeSubstitutor
toOldSubstitution(PsiElement
asCallableReferenceExpressionKtElement
getCallWithAssert%ResolvedCall
noErrorsInValueArguments0ResolvedCallImpl
shouldBeSubstituteWithStubTypes.KtExpression
getFunctionResolvedCallWithAssertCall
isCallableReference(BindingTrace
reportTrailingLambdaErrorOr,KtLambdaExpression
isTrailingLambdaOnNewLIneList
filterArgsInParentheses'Call
extractCallableReferenceExpression#KtElement
getResolvedCallWithAssert"ResolvedCall
getReceiverExpressionKtElement
getParentCallPsiElement
isFakePsiElementResolvedCall
allArgumentsMapped.KtExpression
getVariableResolvedCallWithAssertKtElement
isFakeElementKotlinCall
checkCallInvariants0SimpleKotlinCallArgument
checkReceiverInvariantsPsiElement
reportOnElementPSIKotlinCall
replaceArguments;CallableDescriptor
hasReturnTypeDependentOnUninferredParams(CallableDescriptor
hasInferredReturnTypeList
replaceTypesResolvedCall
isReallySuccess#CallResolutionResult
resultCallAtomResolvedLambdaAtom
unwrap ResolvedCallAtom
freshReturnType8ResolutionCandidate
markCandidateForCompatibilityResolve KotlinDiagnosticsHolder
addErrorGCallableReferencesCandidateFactory
markCandidateForCompatibilityResolve.KotlinDiagnosticsHolder
addDiagnosticIfNotNull"ConstraintSystemError
asDiagnostic*KotlinCallDiagnostic
constraintSystemErrorCollection
asDiagnosticsList
filterErrorDiagnostics)PropertyDescriptor
isSyntheticEnumEntriesDeclarationDescriptor
isDynamicCandidate
forceResolution CallableDescriptor
isSynthesized<CandidateWithBoundDispatchReceiver
requiresExtensionReceiver%CandidateApplicability
isInapplicable8ImplicitScopeTower
getExtensionInvokeCandidateDescriptorKotlinCall
psiKotlinCall#KotlinCall
getResolvedPsiKotlinCall(ReceiverKotlinCallArgument
receiverValue-KotlinType
getClassifierFromMeAndSuperclasses3ResolutionScope
getContributedVariablesAndIntercept6ResolutionScope
getContributedFunctionsAndConstructorsKotlinType
getInnerConstructors+ClassDescriptor
canHaveCallableConstructors3ResolutionScope
getContributedFunctionsAndIntercept>ResolutionScope
getContributedObjectVariablesIncludeDeprecated-ResolutionScope
getContributedObjectVariables/TypeAliasDescriptor
canHaveCallableConstructors KotlinCallArgument
psiExpression2KotlinCallArgument
setResultDataFlowInfoIfRelevant"KotlinCallArgument
psiCallArgument4ErrorCandidateContext
getWrongResolutionToClassifier&ErrorCandidateContext
asClassifierCall(CandidateApplicability
shouldStopResolve CandidateApplicability
isSuccess6ResolutionContext
transformToReceiverWithSmartCastInfo&BasicCallResolutionContext
isSuperCallCall
isCallWithSuperReceiver1SimpleConstraintSystem
isSignatureNotLessSpecific:SimpleConstraintSystem
isValueParameterTypeNotLessSpecific#CallChecker
isComputingDeferredType ResolvedCall
createFlatSignature&Companion
createFromCallableDescriptor"Companion
createFromReflectionType*ValueParameterDescriptor
argumentValueType,Companion
createForPossiblyShadowedExtension FqName
isBuiltInCoroutineContext(KotlinType
isRestrictsSuspensionReceiver,PropertyDescriptor
isBuiltInCoroutineContext4HierarchicalScope
isScopeForDefaultParameterValuesOf,FunctionDescriptor
isBuiltInCoroutineContext FunctionDescriptor
isOperatorMod+Receiver
classDescriptorForImplicitReceiverReceiverValue
isQualifierFor#TypeConstructor
typeForTypeVariableConstraint
replaceType%NewConstraintError
transformToWarning!Constraint
isExpectedTypePosition6TypeSystemInferenceExtensionContext
getNestedArgumentsTypeSubstitutor
composeWithITypeSystemInferenceExtensionContext
extractProjectionsForAllCapturedTypes8TypeSystemInferenceExtensionContext
containsTypeVariable;TypeSystemInferenceExtensionContext
isProperTypeForFixationConstraintPosition
derivedFrom:ConstraintPosition
getValidityConstraintForConstituentTypeBoundKind
reverseCall
toHandle:OverloadResolutionResultsImpl
isResultWithBuilderInference5OverloadResolutionResultsImpl
getBuilderInferenceDataKotlinType
containsTypeTemplate,ConstraintSystemBuilderImpl
incorporateBound,ConstraintSystemBuilderImpl
generateNewBound3ConstraintSystemBuilderImpl
addConstraintFromBoundsKotlinType
getNestedArguments%ConstraintSystem
filterConstraintsOut"KotlinType
getNestedTypeParameters'ConstraintSystem
getNestedTypeVariables%ConstraintSystem
descriptorToVariable.ConstraintSystemBuilder
isConstraintCompatible1ConstraintSystemBuilder
addConstraintIfCompatible8ConstraintSystemBuilder
addSubtypeConstraintIfCompatible5ConstraintSystemBuilder
isSubtypeConstraintCompatible9ConstraintSystemBuilder
addEqualityConstraintIfCompatible&ConstraintSystemBuilder
runTransaction)ConstraintStorage
buildCurrentSubstitutorGConstraintStorage
buildNotFixedVariablesToNonSubtypableTypesSubstitutorOTypeSystemInferenceExtensionContext
hasRecursiveTypeParametersWithGivenSelfTypeMTypeSystemInferenceExtensionContext
extractTypeForGivenRecursiveTypeParameter<TypeSystemInferenceExtensionContext
isRecursiveTypeParameter3ConstraintStorage
buildAbstractResultingSubstitutor8NewConstraintSystemImpl
registerTypeVariableIfNotPresent.TypeSubstitution
wrapWithCapturingSubstitutionKotlinType
isCaptured%TypeProjection
createCapturedIfNeeded+ConstraintStorage
buildResultingSubstitutor:PostponedArgumentsAnalyzerContext
addSubsystemFromArgumentCallableDescriptor
substitute0CallableDescriptor
substituteAndApproximateTypesTypeSubstitutor
substitute&CallableDescriptor
returnTypeOrNothingNewConstraintSystem
builtIns ConstraintSystemBuilder
builtIns)ResolutionCandidate
resolveKotlinArgument:ResolutionCandidate
checkUnsafeImplicitInvokeAfterSafeCall'ResolutionCandidate
prepareExpectedType3ResolutionCandidate
shouldRunConversionForConstantsAResolutionCandidate
getReceiverArgumentWithConstraintIfCompatible$ResolutionCandidate
isErrorCandidate"KotlinCallArgument
getExpectedType(KotlinCallArgument
isArrayOrArrayLiteral;KotlinCallArgument
isArrayAssignedAsNamedArgumentInFunction+ReceiverValueWithSmartCastInfo
unstableType(ValueParameterDescriptor
hasDefaultValue/ValueParameterDescriptor
checkExpectedParameterJValueParameterDescriptor
isActualParameterWithCorrespondingExpectedDefault!ValueParameterDescriptor
isVararg@ValueParameterDescriptor
isActualParameterWithAnyExpectedDefaultParameterDescriptor
isVararg)ReceiverValueWithSmartCastInfo
stableType=KotlinCallArgument
isArrayAssignedAsNamedArgumentInAnnotation/ConstraintSystemOperation
addReceiverConstraint3CallableReferenceResolutionCandidate
addConstraints.ConstraintSystemOperation
addLhsTypeConstraintAny
requireIs,ResolvedLambdaAtom
transformToResolvedLambda'KtExpression
getKotlinTypeForComparison3KtExpression
getKotlinTypeWithPossibleSmartCastToFPKotlinType
immanentNullabilityMap
put?DeclarationDescriptorWithVisibility
isInvisibleFromOtherModules#PropertyDescriptor
hasDefaultGetterVariableDescriptor
variableKind,PropertyDescriptor
isDeclaredInAnotherModulePropertyDescriptor
propertyKind#Annotations
extractDslMarkerFqNames AnnotationDescriptor
isDslMarker,NewCommonSuperTypeCalculator
commonSuperType7KotlinType
isApplicableExpectedTypeForCallableReference%NewConstraintMismatch
upperKotlinType%NewConstraintMismatch
lowerKotlinType$Call
hasUnresolvedArgumentsRecursiveDeclarationChecker
check.MemberDescriptor
isInlineOnlyPrivateInBytecode0CallableMemberDescriptor
hasInlineOnlyAnnotation(MemberDescriptor
isEffectivelyInlineOnly'MemberDescriptor
isPrivateInlineSuspend$MemberDescriptor
isInlineWithReifiedMemberDescriptor
isInlineOnly-CallableMemberDescriptor
hasReifiedParametersQualifier
expressionCReceiverValueWithSmartCastInfo
prepareReceiverRegardingCaptureTypes5DeclarationDescriptor
canBeResolvedWithoutDeprecation.HierarchicalScope
findFirstFromImportingScopes'HierarchicalScope
processForMeAndParentHierarchicalScope
parents:HierarchicalScope
findFirstClassifierWithDeprecationStatusHierarchicalScope
findFunction"HierarchicalScope
collectFunctions(HierarchicalScope
collectFromMeAndParent#LexicalScope
getDeclarationsByLabel(LexicalScope
createScopeForDestructuring!HierarchicalScope
parentsWithSelf HierarchicalScope
findClassifier'MemberScope
memberScopeAsImportingScopeLexicalScope
addImportingScopes"HierarchicalScope
collectVariablesHierarchicalScope
findVariable#LexicalScope
replaceImportingScopesHierarchicalScope
takeSnapshotLexicalScope
findLocalVariableLexicalScope
addImportingScope*LexicalScope
getImplicitReceiversHierarchyHierarchicalScope
findPackage,HierarchicalScope
collectDescriptorsFiltered+HierarchicalScope
collectAllFromMeAndParent*HierarchicalScope
findFirstFromMeAndParentImportingScope
withParent/HierarchicalScope
collectAllFromImportingScopesMemberScope
computeAllNames%Iterable
flatMapClassifierNamesOrNullMemberScope
findFirstVariable"MemberScope
getDescriptorsFiltered3SyntheticScopes
collectSyntheticExtensionProperties,SyntheticScopes
collectSyntheticConstructors/SyntheticScopes
collectSyntheticMemberFunctions/SyntheticScopes
collectSyntheticStaticFunctionsSourceElement
getPsi&PsiElement
isUsageAsAnnotationOrImportDiagnostic
nonApplicableKtPureElement
toSourceElement+AnnotationDescriptor
isKotlinTestAnnotation*LanguageVersionSettings
explicitApiEnabled#DeclarationDescriptor
isResultClassKotlinType
isResultType&ConstantValue
isStandaloneOnlyConstant,CompileTimeConstant
isStandaloneOnlyConstantShort
fromUShortToLongInt
fromUIntToLongByte
fromUByteToLongModuleDescriptor
unsignedType(ModuleDescriptor
allUnsignedLiteralTypesKotlinType
minValueModuleDescriptor
uLongTypeModuleDescriptor
uShortType&ModuleDescriptor
allSignedLiteralTypesKotlinType
maxValueModuleDescriptor
uIntTypeModuleDescriptor
uByteType<DescriptorBasedDeprecationInfo
deprecatedByOverriddenMessageJDescriptorBasedDeprecationInfo
deprecatedByAnnotationReplaceWithExpression$AnnotationDescriptor
getSinceVersion,DeclarationDescriptor
hasJvmStaticAnnotation"AnnotationDescriptor
argumentValue4KtCallableDeclaration
createTypeBindingForReturnType!KtTypeReference
createTypeBindingIterable
applyFilter$ExpectActualCompatibility
compatibleKtFile
hmppModuleNameKtFile
isCommonSource*MemberDescriptor
findAnyActualsForExpected/MemberDescriptor
findCompatibleExpectsForActual1MemberDescriptor
findCompatibleActualsForExpected!DeclarationDescriptor
findExpects!DeclarationDescriptor
findActuals%ClassDescriptor
isNotJavaSamInterface0DeclarationDescriptorWithSource
couldHaveASourceKotlinType
hasExactAnnotation+Annotations
hasInternalAnnotationForResolve5CallableDescriptor
hasLowPriorityInOverloadResolution0CallableDescriptor
hasDynamicExtensionAnnotation%FqName
isInternalAnnotationForResolve&AnnotationDescriptor
isExactAnnotationKotlinType
hasNoInferAnnotation,CallableDescriptor
hasHidesMembersAnnotation3TypeParameterDescriptor
hasOnlyInputTypesAnnotation0CallableDescriptor
hasBuilderInferenceAnnotationKtElement
isUsedAsExpression$BindingContext
getDataFlowInfoBefore KtExpression
getReferenceTargets.KtReturnExpression
getTargetFunctionDescriptor$KtReturnExpression
getTargetFunction&KtTypeElement
getAbbreviatedTypeOrTypeBindingTrace
recordScope*KtElement
getParentOfTypeCodeFragmentAware KtElement
recordUsedAsExpression#BindingContext
getDataFlowInfoAfter(KtTypeReference
getAbbreviatedTypeOrTypeKtExpression
isUsedAsStatement$ResolutionContext
recordDataFlowInfo#KtExpression
isUsedAsResultOfLambda"PropertyDescriptor
hasBackingField%DeclarationDescriptor
parentsWithSelfClassifierDescriptor
classId#ClassDescriptor
getSuperClassNotAny+ClassifierDescriptor
getAllSuperClassifiersClassDescriptor
isSubclassOf1CallableDescriptor
overriddenTreeUniqueAsSequence)DeclarationDescriptor
isExtensionProperty,CallableMemberDescriptor
setSingleOverridden&MemberDescriptor
isEffectivelyExternalDeclarationDescriptor
builtIns7DeclarationDescriptor
isPrimaryConstructorOfInlineClass"ClassDescriptor
getSuperClassOrAnyDeclarationDescriptor
parents?ClassifierDescriptorWithTypeParameters
classValueTypeDescriptor*DeclarationDescriptor
isInsidePrivateClass-DeclarationDescriptor
isAnnotationConstructorDeclarationDescriptor
platform+AnnotationDescriptor
getAnnotationRetention'AnnotationDescriptor
isSourceAnnotation#Iterable
filterOutSourceAnnotations-ClassDescriptor
getClassObjectReferenceTarget@CallableDescriptor
getOwnerForEffectiveDispatchReceiverParameter"ClassDescriptor
getSuperInterfaces'DeclarationDescriptor
isCompanionObject Annotated
getAnnotationRetention Annotated
isDocumentedAnnotation$AnnotationDescriptor
annotationClass2ClassDescriptor
multiFieldValueClassRepresentation$VariableDescriptor
isUnderscoreNamed"DeclarationDescriptor
fqNameOrNull!DeclarationDescriptor
isExtension.ClassifierDescriptorWithTypeParameters
classId4ClassDescriptor
getAllSuperClassesTypesIncludeItself=ClassifierDescriptorWithTypeParameters
denotedClassDescriptorDeclarationDescriptor
module&FunctionDescriptor
isEnumValueOfMethod%ModuleDescriptor
getKotlinTypeRefiner:DeclarationDescriptorWithVisibility
isEffectivelyPublicApiClassDescriptor
classValueType"DeclarationDescriptor
fqNameUnsafe7DeclarationDescriptor
isMemberOfCompanionOfPrivateClass1CallableMemberDescriptor
overriddenTreeAsSequence'ClassDescriptor
classesFromInnerToOuter7ValueParameterDescriptor
declaresOrInheritsDefaultValue$ClassDescriptor
classValueDescriptor*CallableDescriptor
varargParameterPosition-DeclarationDescriptor
getImportableDescriptor"DeclarationDescriptor
isAncestorOf2CallableDescriptor
shouldBeSubstituteWithStubTypes(ModuleDescriptor
isTypeRefinementEnabled)ClassDescriptor
inlineClassRepresentation$DeclarationDescriptor
isPublishedApi9ClassifierDescriptorWithTypeParameters
hasCompanionObject;DeclarationDescriptorWithVisibility
isEffectivelyPrivateApi%ClassDescriptor
secondaryConstructors,ClassDescriptor
getAllSuperclassesWithoutAny'DeclarationDescriptor
isInsideInterface(CallableMemberDescriptor
firstOverridden'ClassDescriptor
hasClassValueDescriptor DeclarationDescriptor
fqNameSafe+CallableMemberDescriptor
propertyIfAccessor%ModuleDescriptor
resolveTopLevelClass)Annotated
isAnnotatedWithKotlinRepeatable"AnnotationDescriptor
firstArgument$CallableDescriptor
containsStubTypesAnnotated
nonSourceAnnotations:DeclarationDescriptor
checkSinceKotlinVersionAccessibility6DeclarationDescriptor
loadWasExperimentalMarkerClasses.DeclarationDescriptor
getOwnSinceKotlinVersion3Collection
selectMostSpecificInEachOverridableGroup;CallableDescriptor
findOriginalTopMostOverriddenDescriptors3CallableDescriptor
findTopMostOverriddenDescriptorsBindingTrace
addElementToSlice+CallableMemberDescriptor
isEffectivelyFinal9FunctionDescriptor
isFunctionForExpectTypeFromCastFeature StatementFilter
filterStatements(StatementFilter
getLastStatementInABlock'FunctionDescriptor
asImportedFromObject'PropertyDescriptor
asImportedFromObject%ModuleDescriptor
getStdlibClassFinder%KotlinType
substitutedUnderlyingTypes%KotlinType
isMultiFieldValueClassType,KotlinType
isRecursiveInlineOrValueClassType$KotlinType
substitutedUnderlyingTypeKotlinType
isValueClassType,DeclarationDescriptor
isMultiFieldValueClass"DeclarationDescriptor
isValueClass<CallableDescriptor
isGetterOfUnderlyingPropertyOfInlineClass4VariableDescriptor
isUnderlyingPropertyOfInlineClass1KotlinType
isRecursiveInlineOrValueClassTypeInner#DeclarationDescriptor
isInlineClass'KotlinType
unsubstitutedUnderlyingTypes3VariableDescriptor
isUnderlyingPropertyOfValueClass=VariableDescriptor
isUnderlyingPropertyOfMultiFieldValueClass#KotlinType
isNullableUnderlyingType;CallableDescriptor
isGetterOfUnderlyingPropertyOfValueClassKotlinType
isInlineClassType&KotlinType
unsubstitutedUnderlyingTypeECallableDescriptor
isGetterOfUnderlyingPropertyOfMultiFieldValueClassKotlinType
needsMfvcFlattening5ModuleDescriptor
hasImplicitIntegerCoercionCapability=KotlinType
containsIncorrectExplicitDefinitelyNonNullableType2StorageComponentContainer
configureDefaultCheckers)ModuleDescriptor
getResolutionAnchorIfAnyMClassifierDescriptor
getCallableReceiverDescriptorRetainingTypeAliasReferenceNullableLazyValue
getValueNotNullLazyValue
getValueSimpleLock
guarded$KtModule
allDirectDependenciesOfType*KtModule
directDependsOnDependenciesOfType'KtModule
directFriendDependenciesOfType(KtModule
directRegularDependenciesOfTypeKtModule
allDirectDependencies.VirtualFile
analysisExtensionFileContextModulePsiElement
getKtModulePsiElement
getKtModuleOfType PsiElement
getKtModuleOfTypeSafeProject
moduleScopeProvider!Project
createDeclarationProvider Project
createAnnotationResolverProject
createPackageProviderKKtSourceModule
createModuleWithoutDependenciesOutOfBlockModificationTracker-Project
createAllLibrariesModificationTracker6Project
createProjectWideOutOfBlockModificationTracker!Project
createPackagePartProvider(PsiElement
cachedValueWithLibraryTracker!ClassDescriptor
relativeClassNameClassDescriptor
descPsiMember
relativeClassName9CallableMemberDescriptor
mustNotBeWrittenToDecompiledText:DescriptorRendererOptions
defaultDecompilerRendererOptionsName
ref!MessageLite
annotatedCallableKind
FqName
refClsStubBuilderContext
child!ModuleDescriptor
hasJdkCapabilityModuleDescriptor
moduleInfo;StorageComponentContainer
configureCommonSpecificComponentsModuleInfo
flattenModuleInfo
getCapabilityModuleInfo
unwrapPlatformFunctionTypeKind
isBuiltin,FunctionTypeKind
isSuspendOrKSuspendFunction+FunctionTypeKind
isBasicFunctionOrKFunction7CompanionObjectMapping
isMappedIntrinsicCompanionObject>CompanionObjectMapping
isMappedIntrinsicCompanionObjectClassId+Annotations
withExtensionFunctionAnnotation1KotlinType
getValueParameterTypesFromFunctionTypeKotlinType
isKFunctionType%KotlinType
isNonExtensionFunctionType2Annotations
withContextReceiversFunctionAnnotation KotlinType
isSuspendFunctionType FqNameUnsafe
getFunctionTypeKindKotlinType
isTypeOrSubtypeOf*KotlinType
getReceiverTypeFromFunctionType*Annotations
hasExtensionFunctionAnnotation+KotlinType
isBuiltinFunctionalTypeOrSubtype9KotlinType
isFunctionOrKFunctionTypeWithAnySuspendability)KotlinType
isSuspendFunctionTypeOrSubtype5KotlinType
getPureArgumentsForFunctionalTypeOrSubtype+KotlinType
isBuiltinExtensionFunctionalType"KotlinType
isExtensionFunctionType3KotlinType
isTypeAnnotatedWithExtensionFunctionType.KotlinType
extractFunctionalTypeFromSupertypes*KotlinType
isFunctionOrSuspendFunctionType!KotlinType
isKSuspendFunctionType"KotlinType
isBuiltinFunctionalType"KotlinType
isFunctionTypeOrSubtype7KotlinType
extractParameterNameFromFunctionTypeArgument(KotlinType
getReturnTypeFromFunctionType;KotlinType
getValueParameterTypesFromCallableReflectionTypeKotlinType
functionTypeKind)KotlinType
contextFunctionTypeParamsCount)DeclarationDescriptor
getFunctionTypeKind.Annotations
withoutExtensionFunctionAnnotationKotlinType
replaceReturnTypeKotlinType
isFunctionType8DeclarationDescriptor
isBuiltinFunctionalClassDescriptor2KotlinType
getContextReceiverTypesFromFunctionType2ProjectExtensionDescriptor
registerExtensionUnsafe"ExtensionStorage
registerInProject9StorageComponentContainer
configureJavaSpecificComponents3ComponentProvider
initJvmBuiltInsForTopDownAnalysis:StorageComponentContainer
initializeJavaSpecificComponentsJvmBuiltIns
initialize1StorageComponentContainer
configureModule$default<StorageComponentContainer
configureStandardResolveComponents9StorageComponentContainer
configureIncrementalCompilation@StorageComponentContainer
configurePlatformIndependentComponents)StorageComponentContainer
configureModuleList
toExpandedRecordsListModule
serializeToByteArray$ExtendableMessage
getExtensionOrNull'InputStream
readBuiltinsPackageFragmentTypeParameter
upperBoundsProperty
returnTypeProperty
contextReceiverTypesTypeAlias
expandedTypeProperty
hasReceiverClass
supertypesType
abbreviatedTypeFunction
returnTypeClass
contextReceiverTypes ValueParameter
varargElementTypeTypeAlias
underlyingTypeProperty
receiverTypeFunction
hasReceiverType
outerTypeFunction
receiverTypeFunction
contextReceiverTypesExpression
isInstanceTypeClass
inlineClassUnderlyingTypeType
flexibleUpperBoundValueParameter
typeArgument
typeTargetPlatform
isJvm!TargetPlatform
deprecatedIsNative%TargetPlatform
presentableDescription!TargetPlatform
subplatformsOfType&TargetPlatform
oldFashionedDescriptionTargetPlatform
hasSimplePlatform
toTargetPlatformTargetPlatform
isMultiPlatform SimplePlatform
serializeToStringTargetPlatform
isCommonTargetPlatform
isWasm7NativePlatformUnspecifiedTarget
legacySerializeToStringTargetPlatform
isNativeName
renderFqNameUnsafe
renderFqName
renderName
shouldBeEscaped*StorageComponentContainer
registerInstance!StorageComponentContainer
resolve+StorageComponentContainer
registerSingleton)StorageComponentContainer
resolveMultipleClass
getInfo#StorageComponentContainer
useImplIfComponentProvider
getComponentProvider
getValue*StorageComponentContainer
useClashResolver%StorageComponentContainer
useInstance!StorageComponentContainer
useImplComponentProvider
tryGetService.StorageComponentContainer
useInstanceIfNotNullComponentProvider
getServiceMethod
bindToMethodMember
bindArgumentsClass
bindToConstructorESValue
isWildcardESExpression
isFalseESExpression
isTrueESType
isBooleanKotlinType
toESTypeESEffect
isReturnsESExpression
andESExpression
or'DeclarationDescriptor
isFromContractDsl4DeclarationDescriptor
isCallsInPlaceEffectDescriptor0DeclarationDescriptor
isReturnsNotNullDescriptor,ResolvedCall
firstArgumentAsExpressionOrNull/DeclarationDescriptor
isReturnsEffectDescriptor*DeclarationDescriptor
isInvocationKindEnum(DeclarationDescriptor
isEqualsDescriptor1DeclarationDescriptor
isReturnsWildcardDescriptor)DeclarationDescriptor
equalsDslDescriptor.DeclarationDescriptor
isContractCallDescriptor-DeclarationDescriptor
isImpliesCallDescriptor(DeclarationDescriptor
isEffectDescriptorEventOccurrencesRange
isInPlace"EventOccurrencesRange
canBeVisited)EventOccurrencesRange
isDefinitelyVisited$EventOccurrencesRange
canBeRevisitedESValue
toDataFlowValue!MutableContextInfo
toDataFlowInfo+FunctionDescriptor
hasJavaOriginInHierarchy%DescriptorVisibility
isVisibleOutside)ResolvedCall
isResolvedWithSamConversions"CallableDescriptor
isSuspendLambda/ValueParameterDescriptor
hasSuspendFunctionType9ValueParameterDescriptor
hasFunctionOrSuspendFunctionType/ClassDescriptor
getRefinedMemberScopeIfPossible<ClassDescriptor
getRefinedUnsubstitutedMemberScopeIfPossible(DeclarationDescriptor
referencedPropertyModuleDescriptor
isNativeStdlibClass
functionClassArityClass
safeClassLoader
Class
desc,Class
isEnumClassOrSpecializedEnumEntryClassClass
wrapperByPrimitiveClass
primitiveByWrapperType
parameterizedTypeArgumentsArray
findAnnotationArray
getAnnotationsClassId
toRuntimeFqNameClassLoader
tryLoadClass'AnnotationDescriptor
abbreviationFqName)KotlinBuiltIns
createDeprecatedAnnotationKotlinType
canBeUsedForConstValClassKind
isObjectClassKind
isClassClassKind
isInterfaceClassKind
isEnumEntryClassKind
isEnumClassClassKind
isAnnotationClassClassDescriptor
isFinalOrEnumClassDescriptor
isFinalClass&CallableMemberDescriptor
isOverridable1CallableMemberDescriptor
isOverridableOrOverrides'DeclarationDescriptor
containingPackage%ModuleDescriptor
resolveClassByFqName)FunctionDescriptor
overridesEqualsFromAnyDeclarationDescriptor
isSealed0ModuleDescriptor
findContinuationClassDescriptor6ModuleDescriptor
findContinuationClassDescriptorOrNull+ModuleDescriptor
getContinuationOfTypeOrAny,FunctionDescriptor
isTypedEqualsInValueClass)DeclarationDescriptor
isTopLevelInPackage5DeclarationDescriptor
getTopLevelContainingClassifier2CallableDescriptor
isSupportedForCallableReference6ModuleDescriptor
findNonGenericClassAcrossDependencies2ModuleDescriptor
findClassAcrossModuleDependencies6ModuleDescriptor
findTypeAliasAcrossModuleDependencies%ModuleDescriptor
withResolutionAnchor7ModuleDescriptor
findClassifierAcrossModuleDependencies7TypeParameterDescriptor
capturedCopyForInnerDeclarationGClassifierDescriptorWithTypeParameters
computeConstructorTypeParameters!KotlinType
buildPossiblyInnerType"PropertyAccessorDescriptor
hasBody3TypeCheckerProviderContext
createTypeCheckerContext"ModuleDescriptor
moduleInvalidated5TypeSystemCommonBackendContext
valueClassLoweringKind(PackageFragmentProvider
packageFragmentsPackageFragmentProvider
isEmptyBPackageFragmentProvider
collectPackageFragmentsOptimizedIfPossible)VariableDescriptorWithAccessors
accessors"DescriptorVisibility
forVisibilitySet
leastPermissiveKotlinType
dependentDescriptors(DescriptorVisibility
effectiveVisibility7DeclarationDescriptorWithVisibility
effectiveVisibility*EffectiveVisibility
toDescriptorVisibility$KotlinType
leastPermissiveDescriptor)ClassifierDescriptor
dependentDescriptors#ClassDescriptor
effectiveVisibilityDescriptorRenderer
asRenderer DiagnosticReporter
deduplicatingCompanion
fromDiagnosticCompanion
parameters9ClassifierDescriptorWithTypeParameters
renderKindWithNameClassDescriptor
renderKind)RenderingContext
adaptiveClassifierPolicy+DescriptorRenderer
withAnnotationsWhitelist'KtPsiDiagnostic
checkPsiTypeConsistency!BindingTrace
reportDiagnosticOnceEResolutionContext
reportTypeMismatchDueToScalaLikeNamedFunctionSyntaxDiagnosticSink
reportFromPlugin9BindingTrace
reportDiagnosticOnceWrtDiagnosticFactoryList7ResolutionContext
reportTypeMismatchDueToTypeProjection/KtDiagnosticFactoryForDeprecation
chooseFactory'LighterASTNode
nonFillerLastChildOrSelf0KtLightSourceElement
startOffsetSkippingComments(LighterASTNode
nonFillerFirstChildOrSelfLighterASTNode
isFillerKtSourceElement
hasVar1FlyweightCapableTreeStructure
lastChildExpression1FlyweightCapableTreeStructure
referenceExpressionLighterASTNode
isExpression0FlyweightCapableTreeStructure
findExpressionDeep1FlyweightCapableTreeStructure
findFirstDescendant0FlyweightCapableTreeStructure
operationReference1FlyweightCapableTreeStructure
traverseDescendants$FlyweightCapableTreeStructure
getter'FlyweightCapableTreeStructure
ifKeyword.FlyweightCapableTreeStructure
companionKeyword)FlyweightCapableTreeStructure
initKeyword*FlyweightCapableTreeStructure
fieldKeyword.FlyweightCapableTreeStructure
getChildrenArray,FlyweightCapableTreeStructure
supertypesList(FlyweightCapableTreeStructure
safeAccess(FlyweightCapableTreeStructure
firstChild3FlyweightCapableTreeStructure
findDescendantByTypes&FlyweightCapableTreeStructure
userTypeClassVisitor
publicStaticMethodOpenEndRange
containsClosedRange
containsString
substring7RegisteringDomainObjectDelegateProvider
provideDelegate?RegisteringDomainObjectDelegateProviderWithType
provideDelegateARegisteringDomainObjectDelegateProviderWithAction
provideDelegateHRegisteringDomainObjectDelegateProviderWithTypeAndAction
provideDelegate4ExistingDomainObjectDelegateProvider
provideDelegateEExistingDomainObjectDelegateProviderWithTypeAndAction
provideDelegate>ExistingDomainObjectDelegateProviderWithAction
provideDelegate<ExistingDomainObjectDelegateProviderWithType
provideDelegateMap
getValueMutableList
shuffleIterable
shuffledIterable
sumReportSeverity
getSeverity&TaskContainer
resolvableConfigurationsTaskContainer
dependencyInsightNamedDomainObjectContainer
ext-IdeaKotlinSerializationContext
IdeaKpmProjectCaller
arity*Caller
createValueClassAwareCallerIfNeeded Any
coerceToExpectedReceiverType.CallableMemberDescriptor
hasValueClassReceiverCaller
checkParametersSize-CallableMemberDescriptor
expectedReceiverTypeKotlinType
toInlineClass#DeclarationDescriptor
toInlineClassClass
getInlineClassUnboxMethodClass
getBoxMethod$ClassifierDescriptor
toJvmDescriptorAny
transformKotlinToJvmArrayValue
arrayToRuntimeValueClass
getDeclaredFieldOrNullAny
asKFunctionImpl"DescriptorVisibility
toKVisibilityClassDescriptor
toJavaClassAny
asKCallableImplKType
isInlineClassType List
unwrapRepeatableAnnotationsAny
asKPropertyImplClass
createArrayType,CallableDescriptor
instanceReceiverParameter)KType
needsMultiFieldValueClassFlattening)AnnotationDescriptor
toAnnotationInstanceClass
getDeclaredMethodOrNullAnnotated
computeAnnotations!ClassDescriptor
readOnlyToMutableAccessor
boundReceiver6PropertyDescriptor
isJvmFieldPropertyInCompanionObject!Accessor
computeCallerForAccessorMethod
signatureClass
getOrCreateModuleKClass
jvmNameKClassifier
jvmErasureKType
jvmErasure KAnnotatedElement
findAnnotationKAnnotatedElement
hasAnnotation!KAnnotatedElement
findAnnotationsFunction
reflectKClassifier
createTypeKClassifier
starProjectedTypeKProperty2
getExtensionDelegateKProperty1
getExtensionDelegateKType
isSubtypeOfKType
withNullabilityKType
isSupertypeOfKCallable
isAccessibleKCallable
valueParametersKCallable
findParameterByNameKCallable
callSuspendKCallable
instanceParameter$KCallable
extensionReceiverParameterKCallable
callSuspendByKProperty
javaFieldCollection
findKPropertyKFunction
javaConstructorField
kotlinPropertyConstructor
kotlinFunctionKProperty
javaGetterKFunction
javaMethodCollection
findKFunctionMember
getKPackageKMutableProperty
javaSetterMethod
kotlinFunctionKClass
allSupertypesKClass
functionsKClass
companionObjectKClass
superclasses(KClass
declaredMemberExtensionPropertiesKClass
createInstanceKClass
memberFunctionsKClass
staticFunctionsKClass
isSuperclassOfKClass
declaredFunctionsKClass
declaredMemberPropertiesKClass
memberPropertiesKClass
primaryConstructor'KClass
declaredMemberExtensionFunctionsKClass
allSuperclasses KClass
memberExtensionPropertiesKClass
memberExtensionFunctionsKClass
defaultTypeKClass
isSubclassOfKCallableImpl
isExtensionKClass
declaredMembersKCallableImpl
isNotExtensionKClass
staticPropertiesKClass
companionObjectInstanceKClass
declaredMemberFunctionsExecution
convertSigningConfig
isPresentTaskProvider
dependsOnProject
listPropertyLogger
kotlinInfoLogger
kotlinWarnLogger
kotlinDebugIrType
getPrimitiveTypeIrClassifierSymbol
isInterfaceMutableMap
addConeTypeProjection
replaceTypeConeKotlinType
classId&ConeKotlinType
isExtensionFunctionTypeFirClass
modalityString
callableIdKotlinType
isInterfaceKtElement
analyze*IrSimpleFunction
createSuspendFunctionStubIrFunction
continuationType"SearchPathResolver
libraryResolver$ResolvedCall
getParameterForArgument"KtElement
getCalleeExpressionIfAnyCall
createLookupLocation!KtExpression
createLookupLocationCall
getResolvedCall"Call
getValueArgumentForExpressionKtElement
getCallKtExpression
getTypeTargetPlatform
isJsDiagnosticReporter
reportOnByteArray
md5'MutableIsolateContext
withPropertyTrace3FlyweightCapableTreeStructure
receiverTypeReference.FlyweightCapableTreeStructure
overrideModifier0FlyweightCapableTreeStructure
constructorKeyword)FlyweightCapableTreeStructure
elseKeyword0FlyweightCapableTreeStructure
valueParameterList%KtSourceElement
hasPrimaryConstructor*FlyweightCapableTreeStructure
getAncestors'FlyweightCapableTreeStructure
lastChildKtSourceElement
hasValOrVar1FlyweightCapableTreeStructure
findLastChildByTypeCFlyweightCapableTreeStructure
unwrapParenthesesLabelsAndAnnotations2FlyweightCapableTreeStructure
findDescendantByType)FlyweightCapableTreeStructure
annotations0FlyweightCapableTreeStructure
visibilityModifier0FlyweightCapableTreeStructure
primaryConstructor+FlyweightCapableTreeStructure
typeReference*FlyweightCapableTreeStructure
modifierList,FlyweightCapableTreeStructure
inlineModifier&FlyweightCapableTreeStructure
selector$FlyweightCapableTreeStructure
setter6FlyweightCapableTreeStructure
collectDescendantsOfType'FlyweightCapableTreeStructure
byKeyword+FlyweightCapableTreeStructure
returnKeyword*FlyweightCapableTreeStructure
defaultValue+FlyweightCapableTreeStructure
objectKeyword2FlyweightCapableTreeStructure
firstChildExpression,FlyweightCapableTreeStructure
nameIdentifier.FlyweightCapableTreeStructure
modalityModifier0FlyweightCapableTreeStructure
typeParametersList5FlyweightCapableTreeStructure
accessorNamePlaceholder.FlyweightCapableTreeStructure
rightParenthesis-FlyweightCapableTreeStructure
valOrVarKeyword.FlyweightCapableTreeStructure
findParentOfType)FlyweightCapableTreeStructure
dotOperator)FlyweightCapableTreeStructure
whenKeyword-FlyweightCapableTreeStructure
findChildByType0FlyweightCapableTreeStructure
findLastDescendant3DeclarationDescriptor
isTopLevelInJvmMultifileClass MessageCollector
reportException/JvmFileClassesProvider
getFileClassInternalNameKtFile
fileClassInfo&FqName
internalNameWithoutInnerClassesKtFile
javaFileFacadeFqNameKtFile
isJvmMultifileClassFile+KtDeclaration
isInsideJvmMultifileClassFileDataExternalizer
loadFromFileDataInput
readStringDataExternalizer
saveToFileDataExternalizer
toByteArrayDataOutput
writeStringDataExternalizer
fromByteArrayCollection
filterClassesToFileToPathConverter
toPathsFileToPathConverter
toFilesFile
md5!LookupTracker
recordPackageLookupPath
isParentOfCollection
toProgramSymbolSet ProgramSymbolSet
toChangesEitherProgramSymbol
toLookupSymbol7ClasspathSnapshot
removeDuplicateAndInaccessibleClasses/ClasspathSnapshot
getNonDuplicateClassSnapshots"ChangesCollector
getChangedSymbols!List
getChangedAndImpactedSymbols-ChangesCollector
getChangedAndImpactedSymbolsLookupStorage
updateByteArray
hashToLongFile
deleteDirectoryContentsFile
isClassFileFile
deleteRecursivelyOrThrowFile
createDirectory&K2JVMCompilerArguments
classpathAsList(K2JVMCompilerArguments
destinationAsFileMap
dumpMapCollection
dumpCollectionClass
isSealedClassProtoData
getConstantsPackage
typeTableOrNullClass
typeTableOrNullMessageLite
isPrivateClass
isCompanionObjectProtoMapValue
toProtoData%ClassProtoData
getCompanionObjectName
List
namesMessageLite
name"JavaClassDescriptor
convertToProtoSerializedJavaClass
toProtoData"JavaClassDescriptor
javaSourceFile CompilationTransaction
writeText!CompilationTransaction
writeBytes CompilationTransaction
runWithinCompilationTransaction
writeValue
hashCodeClass
hashCodeProperty
hashCodeEnumEntry
hashCodeContract
hashCodeAnnotation
hashCodeJvmFieldSignature
hashCodeJvmPropertySignature
hashCodePackage
hashCodeType
hashCodeEffect
hashCodeExpression
hashCodeConstructor
hashCodeFunction
hashCodeJvmMethodSignature
hashCode VersionRequirementTable
hashCodeVersionRequirement
hashCodeValueParameter
hashCodeArgument
hashCodeTypeParameter
hashCodeTypeAlias
hashCode5CompilerConfiguration
configureSourceRootsFromSources(CompilerConfiguration
configureBaseRootsPackageFragment
isEmptyMap
missingMetadataPackageFragment
fqNameNameResolver
getNameNameResolver
getClassId"Class
loadValueClassRepresentation#ProtoEnumFlags
descriptorVisibilityProtoEnumFlags
memberKindKClass
newArgumentsInstance%CommonToolArguments
toArgumentStrings SimpleOutputItem
toGeneratedFile%LighterASTNode
toKtLightSourceElementKtSourceElement
fakeElementPsiElement
toKtPsiSourceElementKtSourceElement
realElementAbstractKtSourceElement
psiKtSourceElement
text+InputStreamReader
readSourceFileWithMapping!CharSequence
toSourceLinesMappingToolchainManagement
jvm"Property
simplePropertyDescriptionClass
requireResourceCharSequence
capitalizedScriptSource
uriGradleInternal
serviceOfTaskInternal
serviceOf.Throwable
maybeUnwrapInvocationTargetExceptionString
toDefaultLowerCaseAny
uncheckedCastMap
filterKeysByPrefix/DocumentationRegistry
configurationCacheLinkFor*DocumentationRegistry
documentationLinkForListenerManager
getBroadcasterReadContext
readPropertyValueWriteContext
writeNextPropertyAccessibleObject
makeAccessibleClass
relevantFieldsField
isTransient0MutableIsolateContext
reportUnsupportedFieldTypeField
isStaticReadContext
decodingBeanWithIdMethod
isReadResolve%Iterable
serializationMethodHierarchyReadContext
putIdentity,Iterable
firstAccessibleMatchingMethodOrNullClass
firstMatchingMethodOrNullClass
allMethods)Class
firstAccessibleMatchingMethodOrNullWriteContext
writeEnumValueOfBindingsBuilder
javaTimeTypes(IsolateContext
withTaskReferencesAllowed!ReadContext
readInputPropertiesOfIsolateContext
withTaskOfReadContext
createTask(WriteContext
writeRegisteredPropertiesOf&ReadContext
readRegisteredPropertiesOf"ReadContext
readOutputPropertiesOfReadContext
readPatternSetWriteContext
writePatternSet9ReadContext
readCollectionCheckingForCircularElementsInto7WriteContext
writeCollectionCheckingForCircularElementsClass
overridesHashCode BindingsBuilder
unsupportedTypesWriteContext
writeAttributeReadContext
readAttributeReadContext
readAttributesUsingReadContext
readAttributeValueReadContext
readManagedWriteContext
writeManaged WriteContext
writeAttributeValueWriteContext
writeAttributesReadContext
runReadOperationWriteContext
runWriteOperation IsolateContext
logNotImplemented!IsolateContext
logPropertyProblemIsolateContext
logUnsupportedWriteContext
withDebugFrame#MutableIsolateContext
withBeanTrace*ReadContext
decodePreservingSharedIdentity'MutableIsolateContext
withGradleIsolateReadContext
readNonNull'WriteContext
encodePreservingIdentityOf$ReadContext
decodePreservingIdentityWriteContext
encodeBeanReadContext
decodeBean-WriteContext
encodePreservingSharedIdentityOfReadContext
withImmediateModeMutableIsolateContext
withCodec!MutableIsolateContext
withIsolate!InternalOptions
getInternalStringInternalOptions
getInternalFlagDecoder
readCollectionIntoDecoder
readCollectionEncoder
writeStringsReadContext
readCollectionIntoEncoder
writeEnum!Encoder
writeTransformedClassPathReadContext
readClassOfDecoder
readFileDecoder
readEnumReadContext
readArray(ReadContext
decodeUsingJavaSerializationEncoder
writeFileWriteContext
writeClassArrayDecoder
readDoubleReadContext
readClassArrayEncoder
writeDoubleDecoder
readDefaultClassPathWriteContext
writeMapEntriesReadContext
readMapIntoDecoder
readFloatReadContext
readMapEntriesIntoReadContext
readListEncoder
writeCollectionIsolateContext
ownerService Decoder
readTransformedClassPathDecoder
readShortDecoder
readClassPathWriteContext
writeCollectionEncoder
writeFloatWriteContext
writeMapEncoder
writeClassPathEncoder
writeDefaultClassPathEncoder
writeShort)WriteContext
encodeUsingJavaSerializationWriteContext
writeArrayDecoder
readStringsThreadLocal
setValueThreadLocal
getValueHost
service$BuildOperationExecutor
withOperation)BuildOperationExecutor
withStoreOperation(BuildOperationExecutor
withLoadOperationLifecycleOwner
lifecycleScopeExecutionException
nonNullCauseListenableFuture
awaitView
findViewTreeLifecycleOwnerView
setViewTreeLifecycleOwnerLifecycle
whenCreatedLifecycle
whenStateAtLeastLifecycleOwner
whenStartedLifecycle
whenResumedLifecycle
whenStartedLifecycleOwner
whenCreatedLifecycleOwner
whenResumed$View
findViewTreeViewModelStoreOwner#View
setViewTreeViewModelStoreOwner.InitializerViewModelFactoryBuilder
initializerLiveData
switchMapLiveData
distinctUntilChangedLiveData
mapLifecycle
coroutineScope1SavedStateRegistryOwner
savedStateHandlesProvider%CreationExtras
createSavedStateHandle'ViewModelStoreOwner
savedStateHandlesVMViewModelProvider
getBitmap
writeToTestStorage"Window
generateBitmapFromPixelCopyWindow
generateBitmapWindow
captureRegionToBitmap!Window
captureRegionToBitmapAsyncLock
synchronizedSparseArrayCompat
removeSparseArrayCompat
valueIteratorSparseArrayCompat
keyIteratorSparseArrayCompat
plusSparseArrayCompat
getOrDefaultSparseArrayCompat
isNotEmptySparseArrayCompat
forEachSparseArrayCompat
sizeSparseArrayCompat
getOrElseSparseArrayCompat
containsSparseArrayCompat
setView
getBoundsInWindow%View
reflectivelyGetLocationInSurfaceView
forceRedrawView
captureToBitmapView
getSurfaceView
generateBitmap View
generateBitmapFromPixelCopyView
captureToBitmapAsyncView
getBoundsInSurface2SurfaceView
generateBitmapFromSurfaceViewPixelCopyView
generateBitmapFromDrawArraySet
indexOfInternalArraySet
containsAllInternalArraySet
binarySearchInternalArraySet
ensureCapacityInternalArraySet
allocArraysArraySet
removeInternalArraySet
addInternalArraySet
retainAllInternalArraySet
containsInternalArraySet
addAllInternalArraySet
toStringInternalArraySet
removeAllInternalArraySet
hashCodeInternalArraySet
valueAtInternalArraySet
removeAtInternalArraySet
clearInternalArraySet
indexOfArraySet
isEmptyInternalArraySet
equalsInternalArraySet
indexOfNull/SavedStateRegistryOwner
enableSavedStateHandlesAny
enableSavedStateHandlesList
checkSubIndexList
checkIndexLong
maskEmptyOrDeleted
Long
matchLong
lowestBitSetLong
maskEmptyLong
hasNext	Long
nextLong
get(View
findViewTreeSavedStateRegistryOwner'View
setViewTreeSavedStateRegistryOwner"SparseArrayCompat
commonIndexOfKeySparseArrayCompat
commonKeyAtSparseArrayCompat
commonValueAt#SparseArrayCompat
commonPutIfAbsentSparseArrayCompat
internalGetSparseArrayCompat
commonPutAll$SparseArrayCompat
commonIndexOfValueSparseArrayCompat
commonSize SparseArrayCompat
commonToStringSparseArrayCompat
commonIsEmptySparseArrayCompat
commonGet%SparseArrayCompat
commonContainsValue"SparseArrayCompat
commonSetValueAtSparseArrayCompat
commonRemove%SparseArrayCompat
commonRemoveAtRange SparseArrayCompat
commonRemoveAtSparseArrayCompat
commonClearSparseArrayCompat
commonPutSparseArrayCompat
gcSparseArrayCompat
commonAppendSparseArrayCompat
commonReplace#SparseArrayCompat
commonContainsKeyLongSparseArray
commonKeyAtLongSparseArray
commonAppendLongSparseArray
getOrDefaultLongSparseArray
commonGcLongSparseArray
commonRemoveLongSparseArray
commonIsEmptyLongSparseArray
commonPutLongSparseArray
commonReplaceLongSparseArray
commonClearLongSparseArray
size LongSparseArray
commonSetValueAtLongSparseArray
commonPutAll"LongSparseArray
commonIndexOfValue!LongSparseArray
commonContainsKeyLongSparseArray
commonSizeLongSparseArray
plus LongSparseArray
commonIndexOfKey!LongSparseArray
commonPutIfAbsentLongSparseArray
forEachLongSparseArray
commonRemoveAtLongSparseArray
setLongSparseArray
commonToStringLongSparseArray
removeLongSparseArray
keyIterator#LongSparseArray
commonContainsValue!LongSparseArray
commonGetInternalLongSparseArray
commonValueAtLongSparseArray
containsLongSparseArray
isNotEmptyLongSparseArray
valueIteratorLongSparseArray
getOrElseLongSparseArray
commonGetLooper
asHandlerHandler
asCoroutineDispatcherHandler
postDelayedHandler
postAtTime
Uri
toFileString
toUri
File
toUriString
htmlEncodeLocale
layoutDirectionContinuation
asOutcomeReceiverSpanned
toHtmlString
parseAsHtmlCharSequence
isDigitsOnlyCharSequence
trimmedLengthSpanned
getSpansCharSequence
toSpannedFloat
toHalfShort
toHalfString
toHalfDouble
toHalfSpannable
clearSpansSpannable
setCharSequence
toSpannableSizeFCompat
component2Size
component2SizeF
component2SizeF
component1SizeFCompat
component1Size
component1Pair
toAndroidXPairPair
toAndroidPairPair
toKotlinPairContinuation
asRunnableClosedRange
toRangeRange
toClosedRange
Range
plus	Range
andAtomicFile
readBytesAtomicFile
writeBytesAtomicFile
tryWriteAtomicFile
readTextAtomicFile
writeTextSpannableStringBuilder
colorSpannableStringBuilder
italic"SpannableStringBuilder
superscriptSpannableStringBuilder
scale$SpannableStringBuilder
strikeThroughSpannableStringBuilder
inSpansSpannableStringBuilder
bold SpannableStringBuilder
subscript&SpannableStringBuilder
backgroundColor SpannableStringBuilder
underlineContinuation
asAndroidXConsumerMap
toPersistableBundleContinuation
asConsumerLongSparseArray
isEmptyLongSparseArray
containsKeyLongSparseArray
putAllLongSparseArray
containsValueSparseLongArray
isEmptySparseLongArray
containsKeySparseLongArray
removeSparseLongArray
plusSparseLongArray
containsSparseLongArray
setSparseLongArray
keyIteratorSparseLongArray
isNotEmptySparseLongArray
forEachSparseLongArray
getOrDefaultSparseLongArray
getOrElseSparseLongArray
valueIteratorSparseLongArray
putAllSparseLongArray
sizeSparseLongArray
containsValueMenu
iteratorMenu
getMenu
minusAssignMenu
isNotEmpty	Menu
sizeMenu
removeItemAtMenu
forEachMenu
forEachIndexedMenu
childrenMenu
containsMenu
isEmptySparseIntArray
getOrDefaultSparseIntArray
containsSparseIntArray
getOrElseSparseIntArray
setSparseIntArray
keyIteratorSparseIntArray
valueIteratorSparseIntArray
isNotEmptySparseIntArray
containsValueSparseIntArray
forEachSparseIntArray
sizeSparseIntArray
removeSparseIntArray
containsKeySparseIntArray
plusSparseIntArray
isEmptySparseIntArray
putAllSparseArray
isNotEmptySparseArray
containsValueSparseArray
keyIteratorSparseArray
setSparseArray
isEmptySparseArray
removeSparseArray
valueIteratorSparseArray
forEachSparseArray
getOrElseSparseArray
containsKeySparseArray
plusSparseArray
containsSparseArray
sizeSparseArray
getOrDefaultSparseArray
putAllSparseBooleanArray
containsKeySparseBooleanArray
isNotEmptySparseBooleanArray
getOrElseSparseBooleanArray
containsSparseBooleanArray
sizeSparseBooleanArray
setSparseBooleanArray
putAllSparseBooleanArray
getOrDefaultSparseBooleanArray
forEach SparseBooleanArray
valueIteratorSparseBooleanArray
plus SparseBooleanArray
containsValueSparseBooleanArray
keyIteratorSparseBooleanArray
isEmptySparseBooleanArray
removePaint
setBlendModeSQLiteDatabase
transactionSharedPreferences
editColor
toDrawableInt
toDrawableBitmap
toDrawableBitmap
toIconBitmap
toAdaptiveIcon
Uri
toIconByteArray
toIconContext
withStyledAttributesContext
getSystemServicePath
and
Path
minus	Path
plusPath
flattenPath
xorPath
orCursor
getFloatOrNullCursor
getBlobOrNullCursor
getStringOrNullCursor
getIntOrNullCursor
getShortOrNullCursor
getLongOrNullCursor
getDoubleOrNullTextView
doBeforeTextChangedTextView
addTextChangedListenerTextView
doOnTextChangedTextView
doAfterTextChangedDrawable
toBitmapDrawable
updateBoundsDrawable
toBitmapOrNullPoint
timesPointF
component1Point
component2
Point
plusPointF
unaryMinusPointF
plus
PointF
div	Point
divPoint
toPointFPointF
timesPoint
component1PointF
component2PointF
minusPointF
toPointPoint
minusPoint
unaryMinusViewGroup
forEachViewGroup
sizeViewGroup
plusAssignViewGroup
getViewGroup
isEmptyViewGroup
forEachIndexed(MarginLayoutParams
updateMarginsRelative MarginLayoutParams
updateMarginsViewGroup
childrenViewGroup
descendantsViewGroup
indicesViewGroup
containsViewGroup
iteratorViewGroup
isNotEmptyViewGroup
minusAssignMarginLayoutParams
setMarginsTypedArray
getIntOrThrowTypedArray
getStringOrThrow#TypedArray
getColorStateListOrThrowTypedArray
getTextArrayOrThrowTypedArray
getFloatOrThrowTypedArray
getBooleanOrThrowTypedArray
getDrawableOrThrowTypedArray
getDimensionOrThrowTypedArray
getColorOrThrowTypedArray
getFontOrThrowTypedArray
getResourceIdOrThrowTypedArray
useTypedArray
getIntegerOrThrow)TypedArray
getDimensionPixelOffsetOrThrowTypedArray
checkAttribute'TypedArray
getDimensionPixelSizeOrThrowTypedArray
getTextOrThrowCanvas
withSkewCanvas
withTranslationCanvas
withSaveCanvas
withRotationCanvas
withClipCanvas
withMatrixCanvas
withScaleAnimator
doOnPauseAnimator
doOnCancelAnimator
addListenerAnimator
doOnEndAnimator
doOnResumeAnimator
doOnStartAnimator
addPauseListenerAnimator
doOnRepeatRectF
containsRectF
component4Rect
component2Rect
orRect
xorRectF
orRectF
minusRect
toRegion
Rect
minus	RectF
andRectF
toRegionRectF
timesRect
andRectF
component2Rect
toRectF	Rect
plusRectF
toRectRectF
transformRect
component3Rect
component4RectF
component1RectF
component3Rect
containsRect
component1	RectF
xor
RectF
plus
Rect
timesView
isVisibleView
postDelayedView
setPaddingView
doOnDetachView
doOnAttachView
doOnPreDrawView
isGoneView
isInvisibleView
marginStartView
marginRightView
doOnLayoutView
updatePaddingRelativeView
updatePaddingView
allViewsView
postOnAnimationDelayedView
marginEndView
marginBottomView
drawToBitmapView
ancestorsView
marginTopView
marginLeftView
doOnNextLayoutView
updateLayoutParamsTransition
doOnStartTransition
addListenerTransition
doOnCancelTransition
doOnPauseTransition
doOnEndTransition
doOnResumeInt
component2Long
convertToInt
toColorLong
luminanceLong
isSrgbInt
component3Long
toColorColor
convertToLong
toColorIntInt
redInt
blueString
toColorInt	Long
blueInt
component1Int
component4Long
red	Int
alphaInt
convertToLong
colorSpace	Int
green
Long
greenInt
luminanceLong
component3Int
toColorLongLong
component1Color
component1
Long
alphaColor
component2Color
component3Color
component4Long
component2Long
component4Long
isWideGamut
Color
plusMutableStateFlow
updateMutableStateFlow
getAndUpdateMutableStateFlow
updateAndGetInt
checkParallelismSchedulerTaskContext
afterTaskSchedulerTask
taskContextKotlinPair
toAndroidPairAndroidPair
component2AndroidPair
toKotlinPairKotlinPair
toAndroidXPairAndroidPair
component1Group
maskEmptyOrDeletedBitmask
getGroup
maskEmptyStaticBitmask
lowestBitSetBitmask
nextGroup
matchBitmask
hasNextAny
containsAny
ifBlankLocalAtomicInt
value<OnUndeliveredElement
callUndeliveredElementCatchingException+OnUndeliveredElement
callUndeliveredElement(OnUndeliveredElement
bindCancellationFun#AtomicRef
findSegmentAndMoveForwardAtomicRef
moveForwardAtomicInt
addConditionallyCompletionHandler
isHandlerOfShader
transformMatrix
valuesMatrix
timesPicture
recordMode
toColorFilterMode
toXfermodeLocation
component1Location
component2Source
decodeBitmapSource
decodeDrawableBitmap
scaleBitmap
applyCanvasBitmap
contains
Bitmap
get
Bitmap
setRegion
unaryMinusRegion
minus
Region
and	Region
orRegion
iteratorRegion
plus
Region
notRegion
containsRegion
forEach
Region
xor!ContextAware
withContextAvailable-View
findViewTreeOnBackPressedDispatcherOwner,View
setViewTreeOnBackPressedDispatcherOwner(View
findViewTreeFullyDrawnReporterOwner'View
setViewTreeFullyDrawnReporterOwner%FullyDrawnReporter
reportWhenComplete"ComponentActivity
enableEdgeToEdge#OnBackPressedDispatcher
addCallbackAny
ifEmpty$CoroutineContext
hasCopyableElements$CoroutineContext
newCoroutineContextCompletionHandler
invokeIt                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             